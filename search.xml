<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>golang函数参数传值，传指针以及传引用</title>
      <link href="/2020/04/05/golang%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E5%80%BC%EF%BC%8C%E4%BC%A0%E6%8C%87%E9%92%88%E4%BB%A5%E5%8F%8A%E4%BC%A0%E5%BC%95%E7%94%A8/"/>
      <url>/2020/04/05/golang%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E5%80%BC%EF%BC%8C%E4%BC%A0%E6%8C%87%E9%92%88%E4%BB%A5%E5%8F%8A%E4%BC%A0%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>golang函数参数传值，传指针以及传引用区别<br><a id="more"></a></p><h3 id="三种参数传递方式的区别"><a href="#三种参数传递方式的区别" class="headerlink" title="三种参数传递方式的区别"></a>三种参数传递方式的区别</h3><h4 id="传值"><a href="#传值" class="headerlink" title="传值"></a>传值</h4><p>函数参数传值，会栈中创建传递变量的副本，对此副本的任何操作都不会影响被传递变量本身</p><h4 id="传指针"><a href="#传指针" class="headerlink" title="传指针"></a>传指针</h4><p>指针是一种特殊变量,指针变量存的值是指向变量的地址,对指针的操作都会影响到被传递指针变量指向的值,改变指针指向(值),并不影响原指向</p><h4 id="传引用"><a href="#传引用" class="headerlink" title="传引用"></a>传引用</h4><p>引用与指针不同,指针的值为指向变量地址,c++中传引用相当于符号表中的别名,因此对应用变量的操作会直接作用于被传递变量</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="传值"><a href="#传值-1" class="headerlink" title="传值"></a>传值</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> <span class="token number">1</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"变量a的值为%v\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"变量a的地址为:%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span>    <span class="token function">increment</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"传参后变量a的值为%v\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">increment</span><span class="token punctuation">(</span>b <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"函数内变量b的地址为:%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span>    b <span class="token operator">++</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//结果,参数b变量的地址是与a变量不同,为a变量的副本</span>变量a的值为<span class="token number">1</span>变量a的地址为<span class="token punctuation">:</span><span class="token number">0xc0000160a8</span>函数内变量b的地址为<span class="token punctuation">:</span><span class="token number">0xc0000160c8</span>传参后变量a的值为<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="传指针"><a href="#传指针-1" class="headerlink" title="传指针"></a>传指针</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> <span class="token number">1</span>    b <span class="token operator">:=</span> <span class="token operator">&amp;</span>a     fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"变量a的值为%v\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"变量a的地址为%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"指针b指向地址为:%v\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"指针b地址为:%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span>    <span class="token function">increment</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"传参后变量a的值为%v\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"传参后指针b的值为%p\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">increment</span><span class="token punctuation">(</span>b <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"函数内指针b的指向为:%p\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"函数内指针b的地址为:%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span>    <span class="token operator">*</span>b <span class="token operator">++</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"函数内*b的地址为:%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//结果,在函数中指针b的地址与传入指针b的地址不同，但都指向变量a的地址，表示函数传指针会在栈中对参数指针创建一个指向相同地址的副本,所以在最后把b指向nil后，原传入的指针依旧不变</span>变量a的值为<span class="token number">1</span>变量a的地址为<span class="token number">0xc00008e010</span>指针b指向地址为<span class="token punctuation">:</span><span class="token number">0xc00008e010</span>指针b地址为<span class="token punctuation">:</span><span class="token number">0xc000098018</span>函数内指针b的指向为<span class="token punctuation">:</span><span class="token number">0xc00008e010</span>函数内指针b的地址为<span class="token punctuation">:</span><span class="token number">0xc000098028</span>函数内<span class="token operator">*</span>b的地址为<span class="token punctuation">:</span><span class="token number">0xc00008e010</span>传参后变量a的值为<span class="token number">2</span>传参后指针b的值为<span class="token number">0xc00008e010</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="传引用"><a href="#传引用-1" class="headerlink" title="传引用"></a>传引用</h4><p>golang不存在传引用,php存在,但php的引用不同于c++是符号表别名,php引用是多个名字指向同一个变量</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$a</span> <span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">"变量a值为"</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"传引用变量a值为"</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"函数内删除变量a,a值为"</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果,php函数内unset($a),只是切断了对变量a的绑定,所以被传参$a仍旧存在</span>变量a值为<span class="token number">1</span>传引用变量a值为<span class="token number">2</span>函数内删除变量a<span class="token punctuation">,</span>a值为<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>golang函数参数不存在传引用，函数参数传值和传指针都会在函数体内创建,对应变量或指针变量的副本,对函数内传递指针变量而言，只会修改其指向变量的值，如果改变指针变量指向，并不会影响被传入指针的指向</p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>php文件锁或redis实现高并发秒杀</title>
      <link href="/2020/04/05/php%E6%96%87%E4%BB%B6%E9%94%81%E6%88%96redis%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80/"/>
      <url>/2020/04/05/php%E6%96%87%E4%BB%B6%E9%94%81%E6%88%96redis%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80/</url>
      
        <content type="html"><![CDATA[<p>php文件锁或redis实现高并发秒杀<br><a id="more"></a></p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul><li>redis,redis-cli</li><li>php7以及redis扩展,swoole扩展</li><li>并发测试工具ab(ApacheBench)</li></ul><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>某型号笔记本电脑限卖10台,进行秒杀</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="php文件锁实现"><a href="#php文件锁实现" class="headerlink" title="php文件锁实现"></a>php文件锁实现</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$http</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">swoole_http_server</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$max</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token variable">$http</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>swoole_http_request <span class="token variable">$request</span><span class="token punctuation">,</span> swoole_http_response <span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//随机数模拟用户ID</span>   <span class="token variable">$userId</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span><span class="token punctuation">.</span><span class="token string">'/lock'</span><span class="token punctuation">,</span><span class="token string">'w+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">flock</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">,</span><span class="token constant">LOCK_EX</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//排它锁</span>       <span class="token variable">$redisInstance</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">llen</span><span class="token punctuation">(</span><span class="token string">'usersId'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">echo</span> <span class="token string">"秒杀已结束\n"</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>           <span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">'usersId'</span><span class="token punctuation">,</span><span class="token variable">$userId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token function">flock</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">,</span><span class="token constant">LOCK_UN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//解锁</span>       <span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$http</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h4><img src="/2020/04/05/php文件锁或redis实现高并发秒杀/flock-ab.png"><img src="/2020/04/05/php文件锁或redis实现高并发秒杀/flock-redis.png"><p>截图中,列表usersId长度为10与秒杀限卖数量相同</p><h3 id="redis实现"><a href="#redis实现" class="headerlink" title="redis实现"></a>redis实现</h3><p>利用redis操作的原子性也可以达到同样的效果,本例中使用自减的方式,也可以使用自增或者预先存放秒杀数量的list,然后进行lpop的方式</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$http</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">swoole_http_server</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$redisInstance</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token string">'6379'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'max'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//秒杀最大数量</span><span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$http</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>swoole_http_request <span class="token variable">$request</span><span class="token punctuation">,</span> swoole_http_response <span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token variable">$redisInstance</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token string">'6379'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//随机数模拟用户ID</span>   <span class="token variable">$userId</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$remain</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">decr</span><span class="token punctuation">(</span><span class="token string">'max'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自减</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$remain</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">'usersId'</span><span class="token punctuation">,</span><span class="token variable">$userId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>       <span class="token keyword">echo</span> <span class="token string">"秒杀已结束\n"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$http</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="截图"><a href="#截图-1" class="headerlink" title="截图"></a>截图</h4><img src="/2020/04/05/php文件锁或redis实现高并发秒杀/redis-ab.png"><img src="/2020/04/05/php文件锁或redis实现高并发秒杀/redis-redis.png"><p>截图中,列表usersId长度为10与秒杀限卖数量相同,max自减为-47430,一个发送了47440个请求,只有10个请求有效</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p><strong>进行秒杀数量判断的时候,条件必须是经过redis操作后改变的值,否则并发下判断条件无法正确判断,如下</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$http</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">swoole_http_server</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$redisInstance</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token string">'6379'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'max'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//秒杀最大数量</span><span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$http</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>swoole_http_request <span class="token variable">$request</span><span class="token punctuation">,</span> swoole_http_response <span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token variable">$redisInstance</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token string">'6379'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//随机数模拟用户ID</span>   <span class="token variable">$userId</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$remain</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'max'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$remain</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//不能使用这种方式,并发情况下$remain在完成lpush并进行decr以前,存在同时满足条件的情况</span>       <span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">'usersId'</span><span class="token punctuation">,</span><span class="token variable">$userId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>       <span class="token keyword">echo</span> <span class="token string">"秒杀已结束\n"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">decr</span><span class="token punctuation">(</span><span class="token string">'max'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$http</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>买卖股票最佳时机</title>
      <link href="/2020/04/05/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/"/>
      <url>/2020/04/05/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>买卖股票的最佳时机<br><a id="more"></a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p><p>如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。</p><p>注意：你不能在买入股票前卖出股票。</p><p>示例 1:</p><p>输入: [7,1,5,3,6,4]<br>输出: 5<br>解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。<br>     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。<br>示例 2:</p><p>输入: [7,6,4,3,1]<br>输出: 0<br>解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>数组有N个数,那么一种可能为第N个数与前面N-1个数中最小值的差值，当N为N-1时，另一种可能为第N-1个数与前面N-2个数中最小的差值<br>依次类推，穷举从N到第一个数分别于他们前面数组中最小值得差值，然后找出所有差值中的最大值，如果最大值小于则不买入股票利润为0</p><p><strong>最优子结构为,第N个数与前N-1个数最小值的差值</strong><br><strong>状态变化为N</strong><br><strong>方程为 dp(n) = max(a[n] - min(m),dp(n-1)) m∈[1,n-1]</strong><br><strong>base条件:数组长度小于等于1返回0</strong><br>问题：当数组过大，内存问题php无法使用函数计算前N-1个数的最小值，预先只需要通过遍历比较当前位数的值与前N个数中的最小值，存储一个前n位数的最小值的hash表</p><h3 id="php版本"><a href="#php版本" class="headerlink" title="php版本"></a>php版本</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$minHash</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$isMinHash</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @param Integer[] $prices     * @return Integer     */</span>    <span class="token keyword">function</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$prices</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">isMinHash</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMinHash</span><span class="token punctuation">(</span><span class="token variable">$prices</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">faker</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$prices</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$prices</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">faker</span><span class="token punctuation">(</span><span class="token variable">$len</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token variable">$prices</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$len</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">max</span><span class="token punctuation">(</span><span class="token variable">$prices</span><span class="token punctuation">[</span><span class="token variable">$len</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">minHash</span><span class="token punctuation">[</span><span class="token variable">$len</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">faker</span><span class="token punctuation">(</span><span class="token variable">$len</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$prices</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$max</span> <span class="token operator">=</span> <span class="token variable">$a</span> <span class="token operator">></span> <span class="token variable">$b</span> <span class="token operator">?</span> <span class="token variable">$a</span> <span class="token punctuation">:</span> <span class="token variable">$b</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$max</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token variable">$max</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">setMinHash</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$prices</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">minHash</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$prices</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$prices</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$prices</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token markup">&lt; $this-></span>minHash<span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">minHash</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$prices</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">minHash</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">minHash</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">isMinHash</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="golang版本"><a href="#golang版本" class="headerlink" title="golang版本"></a>golang版本</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> minMap <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">func</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>prices <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token function">setMinMap</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">faker</span><span class="token punctuation">(</span>prices<span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">faker</span><span class="token punctuation">(</span>prices <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> digo <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> digo <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> digo <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span>        max <span class="token operator">:=</span> prices<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> max <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>            max <span class="token operator">=</span> <span class="token number">0</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max    <span class="token punctuation">}</span>    max <span class="token operator">:=</span>  prices<span class="token punctuation">[</span>digo <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> minMap<span class="token punctuation">[</span>digo <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span>    tmp <span class="token operator">:=</span> <span class="token function">faker</span><span class="token punctuation">(</span>prices<span class="token punctuation">,</span> digo <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> max <span class="token operator">&lt;</span> tmp <span class="token punctuation">{</span>        max <span class="token operator">=</span> tmp    <span class="token punctuation">}</span>    <span class="token keyword">if</span> max <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>        max <span class="token operator">=</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> max<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">setMinMap</span><span class="token punctuation">(</span>prices <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    minMap <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    minMap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> minMap<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>            minMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> minMap<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            minMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux大文件分割与恢复</title>
      <link href="/2019/04/24/linux%E5%A4%A7%E6%96%87%E4%BB%B6%E5%88%86%E5%89%B2/"/>
      <url>/2019/04/24/linux%E5%A4%A7%E6%96%87%E4%BB%B6%E5%88%86%E5%89%B2/</url>
      
        <content type="html"><![CDATA[<p>linux利用split命令进行大文件分割为有序后缀的小文件,利用cat命令进行文件恢复<br><a id="more"></a></p><h4 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h4><p>假如存在大文件100G move.avi,执行如下命令</p><pre class="line-numbers language-shell"><code class="language-shell">    split -b 50G -d -a 3 move.avi move.avi.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会生成move.avi.000 move.avi.001两个每个文件大小为50G</p><p><strong>-b</strong> 分割文件大小<br><strong>-d</strong> 指定分割文件后缀为数字，从开始<br><strong>-a 3</strong> 指定分割文件后缀数字长度,为3代表后缀从000</p><h4 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h4><p>分割文件move.avi.000 move.avi.001</p><pre class="line-numbers language-shell"><code class="language-shell">   cat move.avi.* > move.avi <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>phpstorm+docker+php+xdebug</title>
      <link href="/2019/03/31/phpstorm-docker-php-xdebug/"/>
      <url>/2019/03/31/phpstorm-docker-php-xdebug/</url>
      
        <content type="html"><![CDATA[<p>phpstorm配合docker中xdebug插件进行php代码调试</p><a id="more"></a><h4 id="xdebug插件及配置"><a href="#xdebug插件及配置" class="headerlink" title="xdebug插件及配置"></a>xdebug插件及配置</h4><pre><code>zend_extension=xdebug.soxdebug.remote_enable=onxdebug.remote_port=9003# docker宿主机ipxdebug.remote_host=172.17.0.1xdebug.idekey=PHPSTORM</code></pre><h4 id="配置server"><a href="#配置server" class="headerlink" title="配置server"></a>配置server</h4><ul><li><p>File | Settings | Languages &amp; Frameworks | PHP | Servers</p></li><li><p>add, Host:127.0.0.1 Port:9999(ports 9999:80)</p></li><li><p>path mapping  dir1  dir2   (volumes dir1:dir2)       </p></li></ul><h4 id="配置debug"><a href="#配置Debug" class="headerlink" title="配置Debug"></a>配置Debug</h4><ul><li><p>File | Settings | Languages &amp; Frameworks | PHP | Debug</p></li><li><p>xdebug debug port:9003(与xdebug.remote_port一致)</p></li></ul><h4 id="配置run-configure"><a href="#配置Run-configure" class="headerlink" title="配置Run configure"></a>配置Run configure</h4><ul><li><p>Run | Edit configurations</p></li><li><p>add, PHP Remote Debug</p></li><li><p>enable Filter Debug Connection by IDE key</p></li><li><p>choose server and write xdebug.idekey</p></li></ul><h4 id="validate"><a href="#validate" class="headerlink" title="validate"></a>validate</h4><h4 id="run-debug"><a href="#Run-Debug" class="headerlink" title="Run | Debug"></a>Run | Debug</h4><h4 id="browser-安装-xdebug-helper"><a href="#Browser-安装-xdebug-helper" class="headerlink" title="Browser 安装 xdebug helper"></a>Browser 安装 xdebug helper</h4><ul><li>options phpstorm  and config key (xdebug.idekey)</li></ul>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql相关</title>
      <link href="/2018/11/30/mysql%E2%95%A7%CE%B1%E2%95%A3%E2%95%AA/"/>
      <url>/2018/11/30/mysql%E2%95%A7%CE%B1%E2%95%A3%E2%95%AA/</url>
      
        <content type="html"><![CDATA[<p>mysql开发过程中遇见的问题</p><a id="more"></a><h2 id="查询表中去重查询id最大的记录"><a href="#查询表中去重查询-id最大的记录" class="headerlink" title="查询表中去重查询,id最大的记录"></a>查询表中去重查询,id最大的记录</h2><pre><code>SELECT MAX(id),field FROM TABLE GROUP BY field;</code></pre><h2 id="thread_stack"><a href="#thread-stack" class="headerlink" title="thread_stack"></a>thread_stack</h2><blockquote><p>The stack size for each thread. The default of 192KB (256KB for 64-bit systems) is large enough for normal operation. If the thread stack size is too small, it limits the complexity of the SQL statements that the server can handle, the recursion depth of stored procedures, and other memory-consuming actions.</p></blockquote><ul><li><code>show variables like &quot;thread_stack&quot;</code></li><li>修改配置文件mysql_stack=512k</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>排序算法</title>
      <link href="/2018/11/25/%E2%94%BC%E2%94%BC%E2%95%A8%E2%89%A5%E2%95%A6%CF%80%E2%95%96%C2%BF/"/>
      <url>/2018/11/25/%E2%94%BC%E2%94%BC%E2%95%A8%E2%89%A5%E2%95%A6%CF%80%E2%95%96%C2%BF/</url>
      
        <content type="html"><![CDATA[<p>很多其他算法都是对排序后的数据进行处理,如二分查找,排序算法分析与代码实现<br><a id="more"></a></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>冒泡排序通过多次遍历数据,对相邻的两个数进行比较,进行值交换找到此次遍历最大或者最小的数犹如冒泡</li><li>遍历的次数为数据数量减1</li><li>每次遍历需要操作的数减1</li><li>冒泡排序的时间复杂度为O(n^2)</li></ul><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><img src="/2018/11/25/┼┼╨≥╦π╖¿/bubble.png"><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="分析"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>快速排序</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>golang中mysql链接数设置</title>
      <link href="/2018/11/13/golang%E2%95%93%E2%95%A8mysql%E2%94%B4%E2%94%A4%E2%95%9C%E2%95%99%E2%95%A9%C2%B2%E2%95%94%CE%A6%E2%95%93%E2%94%9C/"/>
      <url>/2018/11/13/golang%E2%95%93%E2%95%A8mysql%E2%94%B4%E2%94%A4%E2%95%9C%E2%95%99%E2%95%A9%C2%B2%E2%95%94%CE%A6%E2%95%93%E2%94%9C/</url>
      
        <content type="html"><![CDATA[<p>golang中设置mysql的最大连接数与最大闲置连接数,以及mysql最大连接数配置与连接状态查看</p><a id="more"></a><h2 id="golang连接数设置"><a href="#golang连接数设置" class="headerlink" title="golang连接数设置"></a>golang连接数设置</h2><h3 id="max-open-connections"><a href="#max-open-connections" class="headerlink" title="max open connections"></a>max open connections</h3><p>与mysql服务器最大连接数</p><h3 id="max-idle-connections"><a href="#max-idle-connections" class="headerlink" title="max idle connections"></a>max idle connections</h3><ul><li>当没有数据库请求需要处理，与mysql保持的最大闲置连接数，为下次数据库处理做好准备</li><li>数量小于等于 max open connections</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-golang"><code class="language-golang">    dsn := ""    db,_ := sql.Open("mysql",dsn)    //最大连接数    db.SetMaxOpenConns(300)    //闲置连接数    db.SetMaxIdleConns(200)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mysql最大连接数查看与设置"><a href="#mysql最大连接数查看与设置" class="headerlink" title="mysql最大连接数查看与设置"></a>mysql最大连接数查看与设置</h2><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p><code>show variables like &quot;max_connections&quot;;</code></p><img src="/2018/11/13/golang╓╨mysql┴┤╜╙╩²╔Φ╓├/mysql_show_max_connections.png"><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p><code>set global max_connections=400;</code></p><img src="/2018/11/13/golang╓╨mysql┴┤╜╙╩²╔Φ╓├/mysql_set_max_connections.png"><h3 id="查看连接状态"><a href="#查看连接状态" class="headerlink" title="查看连接状态"></a>查看连接状态</h3><p><code>show status</code></p><h4 id="仅当前客户端连接到服务器threads_connected为1"><a href="#仅当前客户端连接到服务器-Threads-connected为1" class="headerlink" title="仅当前客户端连接到服务器,Threads_connected为1"></a>仅当前客户端连接到服务器,<strong>Threads_connected</strong>为1</h4><img src="/2018/11/13/golang╓╨mysql┴┤╜╙╩²╔Φ╓├/mysql_show_threads_connected.png"><h4 id="golang死循环开启与mysql连接设置最大链接数300"><a href="#golang死循环开启与mysql连接-设置最大链接数300" class="headerlink" title="golang死循环开启与mysql连接,设置最大链接数300"></a>golang死循环开启与mysql连接,设置最大链接数300</h4><pre class="line-numbers language-golang"><code class="language-golang">sqlTest := "SELECT id FROM yc_posts_posts where id > 10 limit 1"for {    db.Query(sqlTest)}time.Sleep(1e9 * 1000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="加上客户端一共301"><a href="#加上客户端一共301" class="headerlink" title="加上客户端一共301"></a>加上客户端一共301</h4><img src="/2018/11/13/golang╓╨mysql┴┤╜╙╩²╔Φ╓├/mysql_show_threads_connected2.png"><h4 id="也可以使用show-processlist查看连接的具体信息"><a href="#也可以使用show-processlist查看连接的具体信息" class="headerlink" title="也可以使用show processlist查看连接的具体信息"></a>也可以使用<code>show processlist</code>查看连接的具体信息</h4><img src="/2018/11/13/golang╓╨mysql┴┤╜╙╩²╔Φ╓├/mysql_show_processlist.png">]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>goquery_tips</title>
      <link href="/2018/11/12/goquery-tips/"/>
      <url>/2018/11/12/goquery-tips/</url>
      
        <content type="html"><![CDATA[<p>goquery一些零碎的知识点<br><a id="more"></a></p><h2 id="删除一个子元素"><a href="#删除一个子元素" class="headerlink" title="删除一个子元素"></a>删除一个子元素</h2><pre class="line-numbers language-golang"><code class="language-golang">//doc selectorselector.Find(".remove").Remove()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="获取dom-子html"><a href="#获取dom-子html" class="headerlink" title="获取dom 子html"></a>获取dom 子html</h2><pre class="line-numbers language-golang"><code class="language-golang">ht,err := selector.Html()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="获取当前dom-html"><a href="#获取当前dom-html" class="headerlink" title="获取当前dom html"></a>获取当前dom html</h2><pre class="line-numbers language-golang"><code class="language-golang">ht,err := goquery.OuterHtml(selector)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>God is dead</title>
      <link href="/2018/10/24/god-is-dead/"/>
      <url>/2018/10/24/god-is-dead/</url>
      
        <content type="html"><![CDATA[<h4 style="font: italic 1.5em Georgia, serif;" id="god-is-dead-god-remains-dead-and-we-have-killed-him">God is dead. God remains dead. And we have killed him</h4><a id="more"></a><p><img src="http://ph2zdsc2r.bkt.clouddn.com/God-is-Dead.jpg" style="margin-top:0px;margin-bottom:25px;margin-left:0"></p><h4 style="font: italic 1.5em Georgia, serif;" id="god-is-dead-god-remains-deadand-we-have-killed-himhow-shall-we-comfort-ourselves-the-murderers-of-all-murdererswhat-was-holiest-and-mightiest-of-all-that-the-world-has-yet-owned-has-bled-to-death-under-our-knives-who-will-wipe-this-blood-off-uswhat-water-is-there-for-us-to-clean-ourselveswhat-festivals-of-atonement-what-sacred-games-shall-we-have-to-inventis-not-the-greatness-of-this-deed-too-great-for-usmust-we-ourselves-not-become-gods-simply-to-appear-worthy-of-it-nietzsche"><br>God is dead. God remains dead<br>And we have killed him<br><br>How shall we comfort ourselves, the murderers of all murderers?<br><br>What was holiest and mightiest of all that the world has yet owned has bled to death under our knives: who will wipe this blood off us?<br>What water is there for us to clean ourselves?<br>What festivals of atonement, what sacred games shall we have to invent?<br><br>Is not the greatness of this deed too great for us?<br>Must we ourselves not become gods simply to appear worthy of it?<br><br>— Nietzsche<br></h4>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nietzsche </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>word代码语法高亮</title>
      <link href="/2018/10/22/word%E2%94%A4%C2%B7%E2%94%AC%CE%B4%E2%95%99%E2%88%A9%E2%95%96%C2%BF%E2%95%95%E2%96%80%E2%94%B4%E2%94%B4/"/>
      <url>/2018/10/22/word%E2%94%A4%C2%B7%E2%94%AC%CE%B4%E2%95%99%E2%88%A9%E2%95%96%C2%BF%E2%95%95%E2%96%80%E2%94%B4%E2%94%B4/</url>
      
        <content type="html"><![CDATA[<p>syntax highlight code for word documents<br><a id="more"></a></p><h2 id="语法支持"><a href="#语法支持" class="headerlink" title="语法支持"></a>语法支持</h2><p>目前支持:</p><ul><li>c c++</li><li>c#</li><li>css</li><li>delphi pascal</li><li>xml</li><li>java</li><li>javascript</li><li>php</li><li>python</li><li>ruby</li><li>sql </li><li>vb</li><li>html</li></ul><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><img src="/2018/10/22/word┤·┬δ╙∩╖¿╕▀┴┴/code.png"><h2 id="在线地址"><a href="#在线地址" class="headerlink" title="在线地址"></a>在线地址</h2><p><a href="http://planetb.ca/projects/syntaxHighlighter/" target="_blank" rel="noopener">planetb.ca</a></p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> word </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>php操作excel</title>
      <link href="/2018/10/22/php%E2%96%93%E2%94%98%E2%95%AB%E2%89%88excel/"/>
      <url>/2018/10/22/php%E2%96%93%E2%94%98%E2%95%AB%E2%89%88excel/</url>
      
        <content type="html"><![CDATA[<p>PHP操作excel的工具很多，在此使用php一个工具<strong>phpSpreadsheet</strong>,不仅能操作excel还包括一些其他格式如csv,pdf,sylk等<br><a id="more"></a></p><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><blockquote><p>PhpSpreadsheet is a library written in pure PHP and providing a set of classes that allow you to read from and to write to different spreadsheet file formats, like Excel and LibreOffice Calc.</p></blockquote><ul><li><a href="https://phpspreadsheet.readthedocs.io" target="_blank" rel="noopener">官方地址</a></li><li>composer拉取<code>composer require phpoffice/phpspreadsheet</code></li></ul><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><pre class="line-numbers language-php"><code class="language-php">   <span class="token variable">$o_spreadsheet</span> <span class="token operator">=</span> PhpOffice\<span class="token package">PhpSpreadsheet<span class="token punctuation">\</span>IOFactory</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token variable">$s_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$a_sheetData</span> <span class="token operator">=</span> <span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getActiveSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\</span>PhpSpreadsheet<span class="token punctuation">\</span>Cell<span class="token punctuation">\</span>DataType</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\</span>PhpSpreadsheet<span class="token punctuation">\</span>Spreadsheet</span><span class="token punctuation">;</span><span class="token variable">$o_spreadsheet</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Spreadsheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setActiveSheetIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'A1'</span><span class="token punctuation">,</span> <span class="token string">'姓名'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'B1'</span><span class="token punctuation">,</span> <span class="token string">'身份证号'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'C1'</span><span class="token punctuation">,</span> <span class="token string">'手机号'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a_templateData</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'乔峰'</span><span class="token punctuation">,</span> <span class="token string">'51132119941020365X'</span><span class="token punctuation">,</span> <span class="token string">'18180549051'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'需组'</span><span class="token punctuation">,</span> <span class="token string">'51132119941020300x'</span><span class="token punctuation">,</span> <span class="token string">'18180549051'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'短语'</span><span class="token punctuation">,</span> <span class="token string">'511321199410203654'</span><span class="token punctuation">,</span> <span class="token string">'18180549051'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a_templateData</span> <span class="token keyword">as</span> <span class="token variable">$i_key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$a_value</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setActiveSheetIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$i_key</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$a_value</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValueExplicit</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$i_key</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$a_value</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>DataType<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">TYPE_STRING</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValueExplicit</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$i_key</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$a_value</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>DataType<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">TYPE_STRING</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endforeach</span><span class="token punctuation">;</span><span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getActiveSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"导入抽奖人员模板"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Redirect output to a client’s web browser (Xls)</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type: application/vnd.ms-excel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Disposition: attachment;filename="导入抽奖人员模板.xls"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: max-age=0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// If you're serving to IE 9, then the following may be needed</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: max-age=1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// If you're serving to IE over SSL, then the following may be needed</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Expires: Mon, 26 Jul 1997 05:00:00 GMT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Date in the past</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Last-Modified: '</span> <span class="token punctuation">.</span> <span class="token function">gmdate</span><span class="token punctuation">(</span><span class="token string">'D, d M Y H:i:s'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">' GMT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// always modified</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: cache, must-revalidate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HTTP/1.1</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Pragma: public'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HTTP/1.0</span><span class="token variable">$writer</span> <span class="token operator">=</span> IOFactory<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">createWriter</span><span class="token punctuation">(</span><span class="token variable">$o_spreadsheet</span><span class="token punctuation">,</span> <span class="token string">'Xls'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$writer</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//output');</span>exit<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建并下载文件"><a href="#创建并下载文件" class="headerlink" title="创建并下载文件"></a>创建并下载文件</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\</span>PhpSpreadsheet<span class="token punctuation">\</span>Cell<span class="token punctuation">\</span>DataType</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\</span>PhpSpreadsheet<span class="token punctuation">\</span>Spreadsheet</span><span class="token punctuation">;</span><span class="token variable">$o_spreadsheet</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Spreadsheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setActiveSheetIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'A1'</span><span class="token punctuation">,</span> <span class="token string">'姓名'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'B1'</span><span class="token punctuation">,</span> <span class="token string">'身份证号'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'C1'</span><span class="token punctuation">,</span> <span class="token string">'手机号'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a_templateData</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'乔峰'</span><span class="token punctuation">,</span> <span class="token string">'51132119941020365X'</span><span class="token punctuation">,</span> <span class="token string">'18180549051'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'需组'</span><span class="token punctuation">,</span> <span class="token string">'51132119941020300x'</span><span class="token punctuation">,</span> <span class="token string">'18180549051'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'短语'</span><span class="token punctuation">,</span> <span class="token string">'511321199410203654'</span><span class="token punctuation">,</span> <span class="token string">'18180549051'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a_templateData</span> <span class="token keyword">as</span> <span class="token variable">$i_key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$a_value</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setActiveSheetIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$i_key</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$a_value</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValueExplicit</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$i_key</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$a_value</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>DataType<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">TYPE_STRING</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValueExplicit</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$i_key</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$a_value</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>DataType<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">TYPE_STRING</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endforeach</span><span class="token punctuation">;</span><span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getActiveSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"导入抽奖人员模板"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Redirect output to a client’s web browser (Xls)</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type: application/vnd.ms-excel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Disposition: attachment;filename="导入抽奖人员模板.xls"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: max-age=0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// If you're serving to IE 9, then the following may be needed</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: max-age=1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// If you're serving to IE over SSL, then the following may be needed</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Expires: Mon, 26 Jul 1997 05:00:00 GMT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Date in the past</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Last-Modified: '</span> <span class="token punctuation">.</span> <span class="token function">gmdate</span><span class="token punctuation">(</span><span class="token string">'D, d M Y H:i:s'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">' GMT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// always modified</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: cache, must-revalidate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HTTP/1.1</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Pragma: public'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HTTP/1.0</span><span class="token variable">$writer</span> <span class="token operator">=</span> IOFactory<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">createWriter</span><span class="token punctuation">(</span><span class="token variable">$o_spreadsheet</span><span class="token punctuation">,</span> <span class="token string">'Xls'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$writer</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//output');</span>exit<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">/** * 模板下载 * * @param array $a_header 模板头 * @param array $a_data 模板数据 * @param string $s_title 标题 * @param array $width 宽度 */</span><span class="token keyword">function</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$a_header</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$a_data</span><span class="token punctuation">,</span> string <span class="token variable">$s_title</span> <span class="token operator">=</span> <span class="token string">"模板"</span><span class="token punctuation">,</span><span class="token variable">$width</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$o_spreadsheet</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Spreadsheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$o_t</span> <span class="token operator">=</span> <span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setActiveSheetIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$i_char</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a_header</span> <span class="token keyword">as</span> <span class="token variable">$s_name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$o_t</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i_char</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token variable">$s_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i_char</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a_data</span> <span class="token keyword">as</span> <span class="token variable">$i_key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$a_value</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token variable">$o_t</span> <span class="token operator">=</span> <span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setActiveSheetIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$i_char</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a_value</span> <span class="token keyword">as</span> <span class="token variable">$i_key2</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$s_value</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token variable">$o_t</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValueExplicit</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i_char</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token variable">$i_key</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$s_value</span><span class="token punctuation">,</span> DataType<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">TYPE_STRING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$i_char</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">endforeach</span><span class="token punctuation">;</span>    <span class="token keyword">endforeach</span><span class="token punctuation">;</span>    <span class="token variable">$index</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$width</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a_header</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getActiveSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getColumnDimension</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$index</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token variable">$width</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$index</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getActiveSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token variable">$s_title</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Redirect output to a client’s web browser (Xls)</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type: application/vnd.ms-excel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Disposition: attachment;filename="'</span> <span class="token punctuation">.</span> <span class="token variable">$s_title</span> <span class="token punctuation">.</span> <span class="token string">'.xlsx"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: max-age=0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// If you're serving to IE 9, then the following may be needed</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: max-age=1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// If you're serving to IE over SSL, then the following may be needed</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Expires: Mon, 26 Jul 1997 05:00:00 GMT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Date in the past</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Last-Modified: '</span> <span class="token punctuation">.</span> <span class="token function">gmdate</span><span class="token punctuation">(</span><span class="token string">'D, d M Y H:i:s'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">' GMT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// always modified</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: cache, must-revalidate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HTTP/1.1</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Pragma: public'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HTTP/1.0</span>    <span class="token variable">$writer</span> <span class="token operator">=</span> IOFactory<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">createWriter</span><span class="token punctuation">(</span><span class="token variable">$o_spreadsheet</span><span class="token punctuation">,</span> <span class="token string">'Xlsx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$writer</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//output');</span>    exit<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>抽奖算法</title>
      <link href="/2018/10/20/%E2%94%82%CE%98%E2%95%9C%E2%96%92%E2%95%A6%CF%80%E2%95%96%C2%BF/"/>
      <url>/2018/10/20/%E2%94%82%CE%98%E2%95%9C%E2%96%92%E2%95%A6%CF%80%E2%95%96%C2%BF/</url>
      
        <content type="html"><![CDATA[<p>通过程序进行抽奖比较常见，算法可能比较多的实现，以下通过一种比较简单取随机数的方法进行抽奖算法的实现<br><a id="more"></a></p><h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><p>该代码可以实现任意权重的抽奖(包含权重为小数),如果权重为小数,对所有权重以10其最小权重的小数位数的幂次方放大,例如0.1所有权重放大10倍</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ul><li>1.计算所有奖项的权重和</li><li>2.将奖项按照权重的大小降序排序</li><li>3.取１到权重和的随机数</li><li>4.迭代奖项将随机数与每个迭代项的权重进行比较，如果小于该迭代项的权重则返回该奖项，权重和减去该迭代项</li></ul><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Lottery</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//奖项=>权重</span>    <span class="token keyword">private</span> <span class="token variable">$a_sets</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化，奖项对应的各项权重</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token operator">&amp;</span><span class="token variable">$a_sets</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果中奖权重中有小数，则找出其中最小的数，对所有中奖权重进行基于其进行10倍数进行放大使所有权重都为整数</span>        <span class="token comment" spellcheck="true">//找出最小的数</span>        <span class="token variable">$a_weights</span> <span class="token operator">=</span> <span class="token function">array_values</span><span class="token punctuation">(</span><span class="token variable">$a_sets</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$i_min</span> <span class="token operator">=</span> <span class="token variable">$a_weights</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//找出最小数</span>        <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">use</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$a_weights</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token variable">$i_min</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$a_weights</span> <span class="token keyword">as</span> <span class="token variable">$i_item</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i_item</span> <span class="token operator">&lt;</span> <span class="token variable">$i_min</span><span class="token punctuation">)</span> <span class="token variable">$i_min</span> <span class="token operator">=</span> <span class="token variable">$i_item</span><span class="token punctuation">;</span>            <span class="token keyword">endforeach</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断小数位数</span>        <span class="token variable">$a_tmp</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token variable">$i_min</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$i_size</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$a_tmp</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$a_tmp</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//放大所有权重为整数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i_size</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token function">array_walk</span><span class="token punctuation">(</span><span class="token variable">$a_sets</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$i_item</span><span class="token punctuation">)</span><span class="token keyword">use</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$i_size</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$i_item</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$i_item</span> <span class="token operator">*</span>  <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token variable">$i_size</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">endif</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//按照权重降序排序</span>        <span class="token function">krsort</span><span class="token punctuation">(</span><span class="token variable">$a_sets</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a_sets</span> <span class="token operator">=</span> <span class="token variable">$a_sets</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//抽奖</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//总的权重</span>        <span class="token variable">$i_totalWeight</span> <span class="token operator">=</span> <span class="token function">array_sum</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a_sets</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a_sets</span> <span class="token keyword">as</span> <span class="token variable">$prize</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$i_weight</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token variable">$i_rand</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$i_totalWeight</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i_rand</span> <span class="token operator">&lt;=</span> <span class="token variable">$i_weight</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token variable">$prize</span><span class="token punctuation">;</span>            <span class="token keyword">endif</span><span class="token punctuation">;</span>            <span class="token variable">$i_totalWeight</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token variable">$i_weight</span><span class="token punctuation">;</span>        <span class="token keyword">endforeach</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a_testSets</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">4</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">101</span><span class="token punctuation">,</span>    <span class="token number">3</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">70</span><span class="token punctuation">,</span>    <span class="token number">2</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">,</span>    <span class="token number">1</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0.1</span>   <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$o_lottery</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lottery</span><span class="token punctuation">(</span><span class="token variable">$a_testSets</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i_prize</span> <span class="token operator">=</span> <span class="token variable">$o_lottery</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抽奖</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php 抽奖 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux下SSH免密登录</title>
      <link href="/2018/10/18/linuxssh%E2%94%9C%CE%93%E2%94%9C%E2%96%84%E2%95%A1%E2%95%9F%E2%94%AC%E2%95%9D/"/>
      <url>/2018/10/18/linuxssh%E2%94%9C%CE%93%E2%94%9C%E2%96%84%E2%95%A1%E2%95%9F%E2%94%AC%E2%95%9D/</url>
      
        <content type="html"><![CDATA[<p>ssh每次远程登录输入内容比较繁琐，可以自己简单配置远程主机登录授权<br><a id="more"></a></p><h2 id="本机生成ssh钥匙对"><a href="#本机生成ssh钥匙对" class="headerlink" title="本机生成ssh钥匙对"></a>本机生成ssh钥匙对</h2><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -b 4096<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="将公钥添加到远程主机授权keys中即sshauthorized_keys中"><a href="#将公钥添加到远程主机授权keys中，即-ssh-authorized-keys中" class="headerlink" title="将公钥添加到远程主机授权keys中，即.ssh/authorized_keys中"></a>将公钥添加到远程主机授权keys中，即<code>.ssh/authorized_keys</code>中</h2><pre class="line-numbers language-bash"><code class="language-bash">ssh-copy-id -i ~/.ssh/id_rsa.pub -p24 root@120.26.79.188<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> -p24 root@120.26.79.188<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="远程主机登录脚本"><a href="#远程主机登录脚本" class="headerlink" title="远程主机登录脚本"></a>远程主机登录脚本</h2><ul><li>保存为sh脚本, chmod +x </li><li>command –help,获取用法</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token comment" spellcheck="true"># 远程主机数组</span><span class="token keyword">declare</span> -A hosts<span class="token comment" spellcheck="true"># ip 端口 用户名</span>hosts<span class="token punctuation">[</span><span class="token string">"winneroad188"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'120.26.79.188 24 root'</span>hosts<span class="token punctuation">[</span><span class="token string">"winneroad158"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'192.168.1.58 24 winneroad'</span><span class="token comment" spellcheck="true"># 登录函数</span><span class="token keyword">function</span> login<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    is<span class="token operator">=</span>0    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">${!hosts[@]}</span><span class="token punctuation">;</span><span class="token keyword">do</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"<span class="token variable">$i</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>            is<span class="token operator">=</span>1            <span class="token keyword">break</span>        <span class="token keyword">fi</span>    <span class="token keyword">done</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$is</span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"主机名[<span class="token variable">$1</span>]不存在"</span>        <span class="token keyword">return</span>    <span class="token keyword">fi</span>    n<span class="token operator">=</span>0    <span class="token keyword">declare</span> -A arr    <span class="token comment" spellcheck="true"># 将字符串转换为数组</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token variable">${hosts[$1]}</span><span class="token punctuation">;</span><span class="token keyword">do</span>        arr<span class="token punctuation">[</span><span class="token variable">$n</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$x</span>        n<span class="token operator">=</span>$<span class="token punctuation">[</span>n+1<span class="token punctuation">]</span>    <span class="token keyword">done</span>    <span class="token comment" spellcheck="true"># 拼裝命令</span>   comm<span class="token operator">=</span><span class="token string">"ssh <span class="token variable">${arr[2]}</span>@<span class="token variable">${arr[0]}</span> -p<span class="token variable">${arr[1]}</span>"</span>   <span class="token comment" spellcheck="true"># 执行ssh命令</span>   <span class="token variable">${comm}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 列出现有主机</span><span class="token keyword">function</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"共保存主机:"</span><span class="token variable">${#hosts[@]}</span>个    n<span class="token operator">=</span>1    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">${!hosts[@]}</span><span class="token punctuation">;</span><span class="token keyword">do</span>        <span class="token keyword">echo</span> <span class="token punctuation">[</span><span class="token variable">$n</span><span class="token punctuation">]</span><span class="token string">'=>'</span><span class="token variable">$i</span>        n<span class="token operator">=</span>$<span class="token punctuation">[</span>n+1<span class="token punctuation">]</span>    <span class="token keyword">done</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 列出现有主机</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"ls"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    list<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"-n"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    t<span class="token operator">=</span>1    <span class="token comment" spellcheck="true"># 主机名</span>    key<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">${!hosts[@]}</span><span class="token punctuation">;</span><span class="token keyword">do</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$2</span> -eq <span class="token variable">$t</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        key<span class="token operator">=</span><span class="token variable">$i</span>            <span class="token keyword">break</span>        <span class="token keyword">fi</span>        t<span class="token operator">=</span>$<span class="token punctuation">[</span>t+1<span class="token punctuation">]</span>    <span class="token keyword">done</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token variable">$key</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"主机名错误"</span>    <span class="token keyword">else</span>        login <span class="token variable">$key</span>    <span class="token keyword">fi</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"--help"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"Usage ssh.sh OPTION"</span>    <span class="token keyword">echo</span> <span class="token string">"ls        显示存储的远程主机"</span>    <span class="token keyword">echo</span> <span class="token string">"-n number 根据序号登录远程主机 "</span><span class="token keyword">else</span>    login <span class="token variable">$1</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redis知识点</title>
      <link href="/2018/10/06/reidis%E2%95%93%C2%AC%E2%95%A9%E2%95%A2%E2%95%A1%CF%80/"/>
      <url>/2018/10/06/reidis%E2%95%93%C2%AC%E2%95%A9%E2%95%A2%E2%95%A1%CF%80/</url>
      
        <content type="html"><![CDATA[<p>redis一些简单的知识点记录<br><a id="more"></a></p><h2 id="redis配置文件"><a href="#redis配置文件" class="headerlink" title="redis配置文件"></a>redis配置文件</h2><p><a href="https://redis.io/topics/config" target="_blank" rel="noopener">官方配置文档</a></p><pre class="line-numbers language-bash"><code class="language-bash">//启动server指定配置文件redis-server ./redis.conf//查看所有配置config get *//查看某一项配置config get <span class="token function">dir</span>//设置配置,并非素有配置都能动态设置,详细参考官方配置文档config <span class="token keyword">set</span> <span class="token function">dir</span> <span class="token punctuation">..</span>.//动态设置配置仅仅当前服务生效，如果要保存配置到配置文件,必须在启动server时候制定配置文件config rewrite<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><h3 id="密码授权"><a href="#密码授权" class="headerlink" title="密码授权"></a>密码授权</h3><pre class="line-numbers language-bash"><code class="language-bash">//设置密码config <span class="token keyword">set</span> requirepass password//授权auth password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="protected-mode"><a href="#protected-mode" class="headerlink" title="protected-mode"></a>protected-mode</h3><p>protected-mode是一种客户端连接保护措施,配置文件默认开启<code>protected-mode yes</code>,有以下两种条件者,仅127.0.0.1和::1能访问,其他客户端链接讲访问<code>error</code></p><ul><li>配置文件没有清楚的绑定能访问的客户端例如<code>bind 127.0.0.1</code></li><li>配置文件没有设置<code>requirepass</code></li></ul><p>关闭<code>protected-mode no</code></p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>golang tips</title>
      <link href="/2018/09/23/golang%20tips/"/>
      <url>/2018/09/23/golang%20tips/</url>
      
        <content type="html"><![CDATA[<p>golang一些简单的知识点记录<br><a id="more"></a></p><h2 id="make与new"><a href="#make与new" class="headerlink" title="make与new"></a>make与new</h2><ul><li>new类型分配变量零值，返回指针</li><li>make 只用于smc  slice map chan 三种类型</li></ul><h2 id="int与int64转string"><a href="#int与int64转string" class="headerlink" title="int与int64转string"></a>int与int64转string</h2><p>w</p><pre><code>strconv.FormatInt(int64, 10) stringstrconv.Itoa(int) string</code></pre><h2 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h2><ul><li>类型转化,v.(type) 需要转换的类型<pre class="line-numbers language-golang"><code class="language-golang"> type data map[string]interface{}  var sub  = data{     "zhangsan":"张三",     "lisi":"李四", }   var parent data parent["sub"] = sub for k, v := range parent["data"].(data) {     fmt.Printf("%s,%s", k, v) }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类型断言</p><pre class="line-numbers language-golang"><code class="language-golang">  //单一类型断言,断言变量类型一定要是接口类型，因此讲此变量赋值给一个空接口变量  type emptyInterface interface{}//空接口  var v emptyInterface  v = variable  if _,ok := v.(string);ok{      printf("variable is type of string")  }else {      printf("variable is not type of string")  }  //多类型断言  switch i := v.(type) {      case "int32":      case "float64":  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="字符串转整形"><a href="#字符串转整形" class="headerlink" title="字符串转整形"></a>字符串转整形</h2><blockquote><p>strconv.ParseInt(s string, base int, bitSize int) int64 error</p></blockquote><ul><li>s 要转换的的字符串</li><li>base 字符串类型，可选0 8 10 16,　其中8、10、16 代表字符串进制如果为0将通过string前缀自行判断，如0代表８进制，0x１６进制</li><li>bitSize 整形的位数，8 16 32 64,如果整数大于位数能代表最大数字，如(“128”,10,8)将返回bitSize所能代表的最大数字127</li></ul><h2 id="生成范围内随机整数"><a href="#生成范围内随机整数" class="headerlink" title="生成范围内随机整数"></a>生成范围内随机整数</h2><pre class="line-numbers language-golang"><code class="language-golang">func randInt(start, end int) (i int) {    r := rand.New(rand.NewSource(time.Now().UnixNano()))    if start > end {        return end    }    i = r.Intn(end-start) + start    return}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取程序传入参数"><a href="#获取程序传入参数" class="headerlink" title="获取程序传入参数"></a>获取程序传入参数</h2><blockquote><p>func Int(name string, value int, usage string) *int </p></blockquote><blockquote><p>func String(name string, value string, usage string) *string </p></blockquote><pre class="line-numbers language-golang"><code class="language-golang">total := flag.Int("total", 100000, "how many log want to create")filePath := flag.String("filePath", "/home/jianglong/log/nginx/dig2", "log file path")flag.Parse()fmt.Println(*total, *filePath)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><h4 id="追加写入"><a href="#追加写入" class="headerlink" title="追加写入"></a>追加写入</h4><blockquote><p>func (f *File) Write(b []byte) (n int, err error)</p></blockquote><pre class="line-numbers language-golang"><code class="language-golang">file, err := os.OpenFile(*filePath, os.O_RDWR|os.O_APPEND|os.O_CREATE, 0644)if err != nil {    fmt.Println(err)}defer file.Close()logStr := "我是追加的方式写入的内容,如果不存在就创建文件"_,err := file.Write([]byte(logStr))if err != nil {    fmt.Println(err)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="覆盖文件"><a href="#覆盖文件" class="headerlink" title="覆盖文件"></a>覆盖文件</h4><blockquote><p>func WriteFile(filename string, data []byte, perm os.FileMode) error </p></blockquote><pre class="line-numbers language-golang"><code class="language-golang">err := ioutil.WriteFile(file_path,[]byte("我是覆盖写入的内容"),0644)if err != nil {    fmt.Println(err)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h2><pre class="line-numbers language-golang"><code class="language-golang">hasher := md5.New()hasher.Write([]byte("i am the content))md5str := hex.EncodeToString(hasher.Sum(nil))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="变长参数"><a href="#变长参数" class="headerlink" title="变长参数"></a>变长参数</h2><p><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN/blob/master/eBook/06.3.md" target="_blank" rel="noopener">内容参照</a></p><pre class="line-numbers language-golang"><code class="language-golang">package mainimport "fmt"func main() {    x := min(1, 3, 2, 0)    fmt.Printf("The minimum is: %d\n", x)    slice := []int{7,9,3,5,1}    x = min(slice...)    fmt.Printf("The minimum in the slice is: %d", x)}func min(s ...int) int {    if len(s)==0 {        return 0    }    min := s[0]    for _, v := range s {        if v < min {            min = v         }    }    return min}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="时间相相关"><a href="#时间相相关" class="headerlink" title="时间相相关"></a>时间相相关</h2><h3 id="格式化时间"><a href="#格式化时间" class="headerlink" title="格式化时间"></a>格式化时间</h3><pre class="line-numbers language-golang"><code class="language-golang">time.Now().Format("2006-01-02 15:04:05")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="时间转时间戳"><a href="#时间转时间戳" class="headerlink" title="时间转时间戳"></a>时间转时间戳</h3><pre class="line-numbers language-golang"><code class="language-golang">loc, _ := time.LoadLocation("Local")theTime, _ := time.ParseInLocation("2006-01-02 15:04:05", ts, loc)theTime.Unix()`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修剪字符串"><a href="#修剪字符串" class="headerlink" title="修剪字符串"></a>修剪字符串</h2><pre class="line-numbers language-golang"><code class="language-golang">strings.Trim("hello","h") stringstrings.TrimLeft("hello","h") stringstrings.TrimRight("hello","o") string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="ioreader"><a href="#io-Reader" class="headerlink" title="io.Reader"></a>io.Reader</h2><h3 id="多次ioutilreadall"><a href="#多次ioutil-ReadAll" class="headerlink" title="多次ioutil.ReadAll"></a>多次ioutil.ReadAll</h3><pre class="line-numbers language-golang"><code class="language-golang">if body, err := ioutil.ReadAll(io.Reader); err == nil {    twice := bytes.NewReader(body)    twiceBody, err := ioutil.ReadAll(twice)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ioreader-to-string-or-byte"><a href="#io-Reader-to-string-or-byte" class="headerlink" title="io.Reader to string or []byte"></a>io.Reader to string or []byte</h3><pre class="line-numbers language-golang"><code class="language-golang">bytes,err := ioutil.ReadAll(io.Reader)string(bytes)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="获取变量类型"><a href="#获取变量类型" class="headerlink" title="获取变量类型"></a>获取变量类型</h2><pre class="line-numbers language-golang"><code class="language-golang">import (    "reflect"    "fmt")func main(){    data := [...]int{1,2,3} //array    fmt.Println("%v",reflect.TypeOf(data).Kind())  //获取data的变量类型   array    fmt.Println("%v",reflect.TypeOf(data).Elem().Kind()) //获取underlying type   int }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取执行时间"><a href="#获取执行时间" class="headerlink" title="获取执行时间"></a>获取执行时间</h2><pre class="line-numbers language-golang"><code class="language-golang">import (    "time")func main() {    t := time.Now()    //do something    println(time.Since(t))}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程并发锁"><a href="#线程并发锁" class="headerlink" title="线程并发锁"></a>线程并发锁</h2><p>###　当全局变量被对个线程同时访问的时候可能会造成未知错误，如下例子,一共自增20次，但结果不一定是20</p><pre class="line-numbers language-golang"><code class="language-golang">func main(){    number := 0    for i:=0; i<=10; i++{="" go="" func(){="" number++="" }="" for="" j:="0;" j<="10;" j++{="" time.sleep(1e9*10)="" fmt.println(number)="" <span="" aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></=10;></code></pre><h3 id="加锁这样就能正常同时一个保证为20了"><a href="#加锁-这样就能正常同时一个保证为20了" class="headerlink" title="加锁,这样就能正常同时一个保证为20了"></a>加锁,这样就能正常同时一个保证为20了</h3><pre class="line-numbers language-golang"><code class="language-golang">import "sync"type lockNumber struct {    mu  sync.Mutex    val int}func main(){    number := new(lockNumber)    for i:=0; i<=10; i++{="" go="" func(){="" number.mu.lock()="" number++="" number.mu.unlock()="" }="" for="" j:="0;" j<="10;" j++{="" time.sleep(1e9*10)="" fmt.println(number)="" <span="" aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></=10;></code></pre><h2 id="设置日志文件"><a href="#设置日志文件" class="headerlink" title="设置日志文件"></a>设置日志文件</h2><pre class="line-numbers language-golang"><code class="language-golang">logFile, err := os.OpenFile(file, os.O_RDWR|os.O_CREATE|os.O_APPEND, 0766)loger := log.New(logFile, "前缀", log.Ldate|log.Ltime|log.Lshortfile)loger.SetFlags(log.Ldate | log.Ltime | log.Lshortfile)loger.Printf("第%d行 内容:%s", 11, "我是错误k")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="数据库链接查询"><a href="#数据库链接查询" class="headerlink" title="数据库链接查询"></a>数据库链接查询</h3><pre class="line-numbers language-golang"><code class="language-golang">defer rows.Close()columns, err := rows.Columns()Logger.Printf("查询字段为:%+v\n", columns)if err != nil {    return}scanArgs := make([]interface{}, len(columns))values := make([]interface{}, len(columns))for i := range values {    scanArgs[i] = &values[i]}record := make(map[string]interface{})records := make([]interface{}, 0)for rows.Next() {    if err := rows.Scan(scanArgs...); err == nil {        for i, col := range values {            record[columns[i]] = col        }        records = append(records, record)    } else {        Logger.Printf("err:%+v\n", err)    }}Logger.Printf("查询结果%+v:\n", records)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mysql非固定字段查询"><a href="#mysql非固定字段查询" class="headerlink" title="mysql非固定字段查询"></a>mysql非固定字段查询</h3><pre class="line-numbers language-golang"><code class="language-golang">package mainimport (    "database/sql"    "fmt"    _ "github.com/go-sql-driver/mysql")func main() {    conn, err := sql.Open("mysql", "root:psw@tcp(localhost:3306)/test?charset=utf8")    if err != nil {        fmt.Println("mysql connect error")        return    }    defer conn.Close()    rows, err := conn.Query("select * from user")    if err != nil {        fmt.Println("mysql query error", err.Error())    }    defer rows.Close()    columns, err := rows.Columns()    values := make([]sql.RawBytes, len(columns))    scans := make([]interface{}, len(columns))    for i := range values {        scans[i] = &values[i]    }    var result []map[string]string    for rows.Next() {        _ = rows.Scan(scans...)         each := make(map[string]string)        for i, col := range values {            each[columns[i]] = string(col)        }        result = append(result, each)    }    fmt.Println(result)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><h3 id="保存图片base64编码到本地文件"><a href="#保存图片base64编码到本地文件" class="headerlink" title="保存图片base64编码到本地文件"></a>保存图片base64编码到本地文件</h3><pre class="line-numbers language-golang"><code class="language-golang">func (h *H) WriteBase64ToFile(data, saveDir string) (filePath string, err error) {    //fileType    slashIndex := strings.Index(data, "/")    semicolonIndex := strings.Index(data, ";")    if slashIndex == -1 || semicolonIndex == -1 {        return "", errors.New("base64头格式错误")    }    fileType := str.Substr(data, slashIndex+1, semicolonIndex-slashIndex-1)    ML.Printf("base64文件类型为%s", fileType)    //保存文件    commonIndex := strings.Index(data, ",")    if commonIndex == -1 {        return "", errors.New("base64内容格式错误")    }    filePath = saveDir + "/" + strconv.FormatInt(time.Now().UnixNano(), 10) + "." + fileType    dec := base64.NewDecoder(base64.StdEncoding, strings.NewReader(data[commonIndex+1:]))    bytes, _ := ioutil.ReadAll(dec)    err = ioutil.WriteFile(filePath, bytes, 0644)    if err == nil {        return filePath, nil    } else {        return "", err    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><h3 id="send-a-http-request"><a href="#send-a-http-request" class="headerlink" title="send a http request"></a>send a http request</h3><pre class="line-numbers language-golang"><code class="language-golang">client := http.Client{}request,err := http.NewRequest(method,url,body(io.Reader))#set headerrequest.Header.Add("Content-Type":"application/json")#sendresponse,err := client.Do(request)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>golang web middleware</title>
      <link href="/2018/09/18/golang%20%20web%20middleware/"/>
      <url>/2018/09/18/golang%20%20web%20middleware/</url>
      
        <content type="html"><![CDATA[<p>golang http中间件知识<br><a id="more"></a></p><hr><p>个人理解golang中http中间件为一个请求链中的一环,用来对真正的请求处理进行一些预处理、如权限验证,参数处理或者辅助<br>进行日志记录等操作,与真正的业务处理分离<br>实现一个demo中间件，验证请求来源ip,让某个ip无法访问网站</p><hr><h2 id="golang-http包接口分析"><a href="#golang-http包接口分析" class="headerlink" title="golang http包接口分析"></a>golang http包接口分析</h2><p><strong>http包代码</strong> </p><pre class="line-numbers language-golang"><code class="language-golang">package http type Handler Interface{   ServeHTTP(ResponseWriter, *Request)}type HandlerFunc func(ResponseWriter, *Request)func (f HandlerFunc) ServeHTTP(w ResponseWriter,r *Request) {    f(w, r)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong> </p><ul><li>以上为http库内置的http处理接口,其中Handler接口有一个ServeHttp接口函数，在处理请求的时候，会调用此函数<br>对接口进行处理。</li><li>任何实现了次接口的类型都可以作为http.ListenAndServe(string, Handler)中的第二个Handler类型参数进行<br>请求处理。</li><li>以上代码中HandlerFunc 就是包内置的默认的实现Handler接口的一种方式。也可以自定义。</li></ul><hr><h2 id="自定义实现handler不使用http包内的handlerfunc"><a href="#自定义实现Handler-不使用http包内的HandlerFunc" class="headerlink" title="自定义实现Handler,不使用http包内的HandlerFunc"></a>自定义实现Handler,不使用http包内的HandlerFunc</h2><p><strong>代码</strong></p><pre class="line-numbers language-golang"><code class="language-golang">type MyHandler struct {}func (mh *MyHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {    //do something    // return result    w.String(200, "hello world")}func main() {    http.ListenAndServe(":1234",&MyHandler{})}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong></p><ul><li>以上MyHandler实现了HTTP包中Handler接口(ServeHTTP方法)，定义了自己处理接口逻辑</li></ul><hr><h3 id="使用函数型"><a href="#使用函数型" class="headerlink" title="使用函数型"></a>使用函数型</h3><p><strong>代码</strong></p><pre class="line-numbers language-golang"><code class="language-golang">//handler Funcfunc MyHandlerFunc(h http.HandlerFunc) http.HandlerFunc {    return func(rw http.ResponseWriter, req *http.Request) {    //do something for example print verse        rw.Write([]byte("昨夜星辰昨夜风"))        h(rw, req)    }}func main() {    err := http.ListenAndServe(":12345", MyHandlerFunc(func(rw http.ResponseWriter, req *http.Request) {             w.Write([]byte("hell world 123456"))    }))    if err != nil{        log.Fatal(err)    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong></p><ul><li>以上没有实现自己的Handler,而是实现了与http.handlerFuc相同签名的函数，相当于使用了http包内实现的HandlerFunc<br>,http包会调用Handler的ServeHTTP方法，然后在ServeHTTP中调用HandlerFuc</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>http.ListenAndServe(“”,Handler),中的Handler可以传两类，第一类是实现http.Handler的ServeHTTP方法的任意类型，<br>第二类是与http.HandlerFuc具有相同签名的函数，以为http.HandlerFuc实现了http.Handler的ServeHTTP,不需要我们再去实现。</li><li>而所谓的http中间件,就是重新实现实现Handler接口或者定义将真正的业务处理部分函数HandlerFunc作为参数传递给中间件函数壳<br>在壳内进行附加操作后，如果满足需求或者其他，然后再调用处理部分函数。</li></ul>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> middleware </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>函数型接口</title>
      <link href="/2018/09/17/%E2%95%91%C2%BB%E2%95%A9%C2%B2%E2%95%A8%E2%95%90%E2%95%9C%E2%95%99%E2%94%90%E2%94%8C/"/>
      <url>/2018/09/17/%E2%95%91%C2%BB%E2%95%A9%C2%B2%E2%95%A8%E2%95%90%E2%95%9C%E2%95%99%E2%94%90%E2%94%8C/</url>
      
        <content type="html"><![CDATA[<p>golang中只要类型实现了接口包含的所有抽象方法。那么该类型便属于该接口的实现类</p><blockquote><p>函数型接口： 某个函数类型作为接收者实现了接口方法</p></blockquote><p>个人理解，函数形接口主要是类似于面向接口编程中，调用实现接口的方法而完成多态，但又不像传统面向接口编程那样显得臃肿，<br>需要先声明类继承接口然后在类中实现方法，golang中任何与接口方法签名相同的函数都可以作为被调用者。</p><hr><p><strong>demo为计算一个二位数组，每个子项数组的和，然后返回结果数组,例如[[1,2,3],[4,5,6],[7,8,9]] 返回[6,15,24]</strong></p><hr><h2 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h2><p><strong>首先实现传统的面向接口编程：</strong></p><ul><li>声明接口</li><li>声明一个类型，实现接口函数</li></ul><pre class="line-numbers language-golang"><code class="language-golang">// 计算接口type Sum interface {    Add(m map[int][]int) map[int]int}//声明类型用来实现接口type R stringfunc (r R) Add(m map[int][]int) (n map[int]int){    n = make(map[int]int)    if m != nil && len(m) > 0 {        for i,v := range m {            if v == nil || len(v) == 0 {                n[i] = 0            } else {                n[i] = 0                for _,v1 := range v {                    n[i] = n[i] + v1                }            }        }    }    return}// 调用func Call(m map[int][]int, sum Sum) map[int]int{    return sum.Add(m)}func main() {    m := make(map[int][]int)    m[0] = []int{1,2,3}    m[1] = []int{4,5,6}    m[2] = []int{7,8,9}    re := Call(m, R("demo"))    fmt.Printf("%v", re)}// 结果map[2:24 0:6 1:15]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上为典型的面向接口编程，Call函数依赖抽象接口类型Sum,R实现接口，作为参数传递给Call</p><p>但是这里R类型似乎是多余的，因为golang并没有所谓class关键字，必须要又一种类型来作为接受者来实现对应Sum接口的方法<br>而且类的实现有一些多余</p><h2 id="函数型接口"><a href="#函数型接口" class="headerlink" title="函数型接口"></a>函数型接口</h2><p><strong>声明函数类型</strong></p><pre class="line-numbers language-golang"><code class="language-golang">// 计算接口type Sum interface {    Add(m map[int][]int) map[int]int}// 声明函数type Handle func(map[int][]int) map[int]intfunc (h Handle) Add(m map[int][]int) map[int]int {    return h(m)}// 调用不变func Call(m map[int][]int, sum Sum) map[int]int{    return sum.Add(m)}// 我的方法进行处理func myHandle(m map[int][]int) map[int]int{    n := make(map[int]int)    if m != nil && len(m) > 0 {        for i,v := range m {            if v == nil || len(v) == 0 {                n[i] = 0            } else {                n[i] = 0                for _,v1 := range v {                    n[i] = n[i] + v1                }            }        }    }    return n}func main() {    m := make(map[int][]int)    m[0] = []int{1,2,3}    m[1] = []int{4,5,6}    m[2] = []int{7,8,9}    re := Call(m, Handle(myHandle))//讲myHandle转换为Handle类型，赋值给Sum类型变量    fmt.Printf("%v", re)}//结果map[0:6 1:15 2:24]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong></p><ul><li>以上没有多余的类型R,而且只要实现任意与Handle签名相同的函数,都可以将其转换为Handle类型，而Handle又实现了<br>接口Sum，</li><li>整个流程 Call() =&gt; Sum.Add() =&gt; myHandle()</li><li>我们就只需要在调用Call实现Handle签名函数，与Sum接口解耦</li></ul><h3 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h3><pre class="line-numbers language-golang"><code class="language-golang">type SumIn map[int][]inttype SumOut map[int]inttype Sum interface {    Add(SumIn) SumOut}//声明函数type Handle func(SumIn) SumOutfunc (h Handle) Add(m SumIn) SumOut {    return h(m)}// 调用func Call(m SumIn, sum Sum) SumOut {    return sum.Add(m)}//内部进行类型转换func CallFunc(m SumIn,f func(SumIn) SumOut) SumOut{    return Call(m,Handle(f)) }// 我的方法进行处理func myHandle(m SumIn) SumOut {    n := make(SumOut)    if m != nil && len(m) > 0 {        for i,v := range m {            if v == nil || len(v) == 0 {                n[i] = 0            } else {                n[i] = 0                for _,v1 := range v {                    n[i] = n[i] + v1                }            }        }    }    return n}func main() {    m := make(SumIn)    m[0] = []int{1,2,3}    m[1] = []int{4,5,6}    m[2] = []int{7,8,9}    re := CallFunc(m, myHandle)//内部进行转换    fmt.Printf("%v", re)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong></p><ul><li>主要对Call函数进行了封装将Handle签名相同的函数转换，换到了内部，不需要在调用进行转换和定义了类型别名</li><li>这种函数型接口相当于对接口的功能实现进行了热拔插，适用于只有一个方法的接口</li></ul>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>通过ngrok自己动手搭建内网穿透服务</title>
      <link href="/2018/04/16/linux%20ngrok%20%E2%94%A4%CE%B5%E2%95%9C%C2%BF/"/>
      <url>/2018/04/16/linux%20ngrok%20%E2%94%A4%CE%B5%E2%95%9C%C2%BF/</url>
      
        <content type="html"><![CDATA[<p>这几天一直在折腾ngrok，记录下整个过程</p><p>最先怕影响服务器，是在docker里进行安装的，实例跑的是ubuntu16.04</p><p><strong>大概流程图</strong></p><img src="/2018/04/16/linux%20ngrok%20┤ε╜¿/flow.png"><ul><li>访问服务器<code>(80|443)</code>端口 ，apache按规则对需要进行代理的请求发送给docker</li><li>docker是与服务<code>8080</code>端口进行了映射，而docker内的ngrok服务监听了<code>8080</code>端口</li><li>ngrok服务设置与ngrok客户端建立隧道的端口是<code>4443</code></li><li>ngrok将apache代理的请求按规则转发给ngrok客户端，客户端再与本地端口进行转发关联</li><li>最终将处理结果依次返回</li></ul><p><strong>用docker出现的问题</strong></p><p>由于ngrok需要根据域名的不同对代理进行转发，配置了hosts文件，例如<code>wx.ngrok.com</code> 到 <code>0.0.0.0:8080</code><br>。docker内开启ngrok服务后，客户端成功进行了连接，但当进行url请求的时候始终无法从ngrok服务端转发到ngrok客户端，<br>最先是用<code>80</code>端口报不是tsl/ssl握手，最后换做<code>443</code>报什么read message EOF之类，研究很久最终放弃</p><p><strong>最终环境</strong></p><p><code>ubuntu14.04 golang 1.7</code></p><ol><li>最先利用ubuntu <code>apt install golang</code> 安装的是1.5的go环境,报了一个错，经过搜索是golang版本问题，最后通过下载包的方式安装了<code>1.6</code>解决</li><li>按照教程进行了一系列操作<a href="https://blog.csdn.net/sdfgsdfg1444/article/details/72793313" target="_blank" rel="noopener">参考教程</a>,编译linux,windows客户端成功</li><li>当编译Mac客户端后运行报错什么什么runtime之类的，macos 10.13,又折腾半天不行，然后怀疑go语言版本低了，然后又下载了<code>1.7</code>进行了解压放在/usr/local目录下</li><li>配置go的环境变量GOROOT后，进行客户端编译，报错<code>C source files not allowed when not using cgo or SWIG</code>又是一顿搜索</li><li>最后解决方式为把<code>go1.7</code>解压到<code>/usr/lib</code>目录下配置好环境变量，编译成功，mac下载客户端运行成功 </li></ol><p><strong>没用docker的流程大概是这样</strong></p><p>由于是用apache规矩规则进行代理，只有一个公网域名的情况下，通过根目录子目录不同进行不同代理例如<code>wx.winneroad.cn/jl</code>代理到我的服务器,但是这样<br>会引发一些问题，例如再用tp5进行<code>url函数</code>进行url生成的时候<code>/</code>会直接把域名下的<code>jl</code>顶掉，最好再解析一个域名到原服务器</p><p><strong>一些配置截图</strong></p><p><strong>apache</strong></p><img src="/2018/04/16/linux%20ngrok%20┤ε╜¿/apache.png"><p><strong>ngrokd</strong></p><img src="/2018/04/16/linux%20ngrok%20┤ε╜¿/ngrokd.png"><p><strong>服务器hosts</strong></p><img src="/2018/04/16/linux%20ngrok%20┤ε╜¿/server_hosts.png"><p><strong>ngrok客户端连接</strong></p><img src="/2018/04/16/linux%20ngrok%20┤ε╜¿/ngrok.png">]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ngrok </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018学习计划</title>
      <link href="/2018/03/08/2018%E2%95%A4%C2%BA%E2%95%A7%E2%96%91%E2%95%9D%E2%95%9E%E2%95%97%C2%AB/"/>
      <url>/2018/03/08/2018%E2%95%A4%C2%BA%E2%95%A7%E2%96%91%E2%95%9D%E2%95%9E%E2%95%97%C2%AB/</url>
      
        <content type="html"><![CDATA[<p>2017工作一年多的时间，技术上有很多进步，对编程的思想上也有很多改变，学了一些东西，但是缺少学习计划，学得很杂很大一部分是根据兴趣学的，但是不够系统和扎实，所有制定一下2018的学习计划吧,毕竟purpose很重要</p><p><strong>准备的学习计划</strong></p><p>2018-02-24</p><ul><li>shell</li><li>python</li><li>canvas</li><li>design pattern</li><li>docker</li><li>提升对英文文档的阅读能力</li></ul><p>在2017中以上的各种技术都有接触但是接触不够多，对英文阅读能力的提升也是急需提升的，好在早就已经养成了不惧怕英文的习惯,每天对学习内容进行简单描述</p><hr><p>2018-03-08</p><p>最近由于装了黑苹果，一直在整理开发环境，最开初的时候是打算装虚拟机，但系统资源开销太大。后来准备用docker看文档折腾了几天构建了php5.6,php7.x和nginx镜像，以及一个mysql镜像，<br>利用挂载卷的方式进行数据永久化，但是docker在mac资源还是占用较多，最后用的mamp</p><p><strong>dockerFile:</strong></p><p>dockerFile分为4部分，基础镜像、维护者信息、镜像操作指令、容器启动命令</p><pre><code>#基础镜像From baseImage#维护人信息MAINTAINER name email#镜像操作执行令RUN instruct#容器启动指令CMD instruct   </code></pre><p><strong>docker打标签:</strong></p><pre><code>docker tag image username/repository:tagdocker push username/repository:tag</code></pre>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> plan </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>github 利用gpg对提交进行签名验证</title>
      <link href="/2018/03/05/github%20gpg/"/>
      <url>/2018/03/05/github%20gpg/</url>
      
        <content type="html"><![CDATA[<h4 id="gpggun-privacy-guard"><a href="#gpg-gun-privacy-guard" class="headerlink" title="gpg(gun privacy guard)"></a>gpg(gun privacy guard)</h4><p><strong>大概过程</strong></p><p>利用gpg生成钥匙对，用私钥对文件签名，github用公钥进行验证</p><hr><h4 id="具体步骤仅在linux或者mac"><a href="#具体步骤-仅在Linux或者mac" class="headerlink" title="具体步骤(仅在Linux或者mac)"></a>具体步骤(仅在Linux或者mac)</h4><p><strong>1.生成钥匙对</strong></p><p><code>gpg --gen-key</code></p><p><strong>2.导出公钥</strong></p><p><code>gpg -a --export ID &gt; pub.asc</code></p><p><strong>3.github配置gpg keys</strong></p><p>将步骤2中的pub.asc的内容复制到制定<br>sfd<br>asdfsd<br>sdfsdf<br><img src="/2018/03/05/github%20gpg/gpgKeys.png"></p><p><strong>4.配置git</strong></p><p><code>git config --global -e</code></p><img src="/2018/03/05/github%20gpg/gitGpgConf.png"><p>在仓库中 <code>gpg config commit.gpgsign = false</code></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li>gpg 查看keyid  <code>gpg -k --keyid-format short | long</code></li><li>gpg 导出私钥  <code>gpg -a --export-secret-key key-id &gt; secret.asc</code></li><li>gpg 删除钥匙对  <code>gpg --delete-secret-keys keys-id</code>  &amp;&amp;  <code>gpg --delete-keys keys-id</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>画图分析的重要性</title>
      <link href="/2018/02/24/%E2%95%97%C2%A1%E2%95%90%E2%95%9D%E2%95%96%E2%95%93%E2%95%AC%C3%B7/"/>
      <url>/2018/02/24/%E2%95%97%C2%A1%E2%95%90%E2%95%9D%E2%95%96%E2%95%93%E2%95%AC%C3%B7/</url>
      
        <content type="html"><![CDATA[<p>如题下:</p><p><strong>一群猴子排成一圈，按1,2,…,n依次编号。然后从第1只开始数，数到第m只,把它踢出圈，从它后面再开始数， 再数到第m只，在把它踢出去…，如此不停的进行下去， 直到最后只剩下一只猴子为止，那只猴子就叫做大王。要求输入m、n, 输出最后那个大王的编号</strong></p><p>在大学c++课程设计中做过类似的题，然后贫着不清晰的感觉用php进行了编程，结果是3个小时写出来是错误的，中间不停修修改改，很痛苦，总是脑袋里理不清然后又急于写代码妄想在调试过程中侥幸得出答案。</p><p>昨天回家的路上还是想了想应该先画图，先理清逻辑，然后今天早上画图花了半个小时，编程5分钟不到就修改成功了,图如下:</p><img src="/2018/02/24/╗¡═╝╖╓╬÷/monkey.png"><p>代码如下:</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Monkey</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$next</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//下一个指针</span>    <span class="token keyword">private</span> <span class="token variable">$number</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//编号</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">next</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setNext</span><span class="token punctuation">(</span><span class="token variable">$next</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">next</span> <span class="token operator">=</span> <span class="token variable">$next</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//原始编号</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">number</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setNum</span><span class="token punctuation">(</span><span class="token variable">$number</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">number</span> <span class="token operator">=</span> <span class="token variable">$number</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用类</span><span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token variable">$head</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//头节点</span>     <span class="token keyword">private</span> <span class="token variable">$m</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//猴子数量</span>     <span class="token keyword">private</span> <span class="token variable">$n</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//踢号</span>     <span class="token comment" spellcheck="true">/**      * Client constructor.      * @param $m int 猴子个数      * @param $n int 提出的数字      */</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">,</span> <span class="token variable">$n</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//初始化</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">n</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//初始化头节点</span>         <span class="token variable">$head</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Monkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$head</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setNum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">head</span> <span class="token operator">=</span> <span class="token variable">$head</span><span class="token punctuation">;</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">head</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token keyword">Null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//添加链表</span>         <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m</span><span class="token punctuation">;</span>         <span class="token variable">$current</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">head</span><span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$count</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token variable">$monkey</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Monkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token variable">$monkey</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token keyword">Null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//设置编号</span>             <span class="token variable">$newNum</span> <span class="token operator">=</span> <span class="token variable">$current</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>             <span class="token variable">$monkey</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setNum</span><span class="token punctuation">(</span><span class="token variable">$newNum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token variable">$current</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token variable">$monkey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token variable">$current</span> <span class="token operator">=</span> <span class="token variable">$current</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token variable">$count</span><span class="token operator">--</span><span class="token punctuation">;</span>         <span class="token keyword">endwhile</span><span class="token punctuation">;</span>         <span class="token variable">$current</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">head</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//便利节点</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">traverseNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">head</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//echo $tmp->getNum();</span>         <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token variable">$tmp</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true">//echo $tmp->getNum();</span>             <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token variable">$tmp</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">endwhile</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//进行剔除</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//头和当前指针</span>         <span class="token variable">$fronted</span> <span class="token operator">=</span> <span class="token variable">$current</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">head</span><span class="token punctuation">;</span>         <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token variable">$monkey_count</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m</span><span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$monkey_count</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$count</span> <span class="token operator">===</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">n</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                 <span class="token variable">$fronted</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token variable">$current</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token variable">$current</span> <span class="token operator">=</span> <span class="token variable">$current</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                 <span class="token variable">$monkey_count</span> <span class="token operator">--</span><span class="token punctuation">;</span>             <span class="token keyword">else</span><span class="token punctuation">:</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$monkey_count</span> <span class="token operator">!==</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                     <span class="token variable">$fronted</span> <span class="token operator">=</span> <span class="token variable">$current</span><span class="token punctuation">;</span>                 <span class="token keyword">endif</span><span class="token punctuation">;</span>                 <span class="token variable">$current</span> <span class="token operator">=</span> <span class="token variable">$current</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token variable">$count</span> <span class="token operator">++</span><span class="token punctuation">;</span>             <span class="token keyword">endif</span><span class="token punctuation">;</span>         <span class="token keyword">endwhile</span><span class="token punctuation">;</span>         <span class="token keyword">echo</span> <span class="token variable">$current</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token variable">$o_instance</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//$o_instance->traverseNode();</span> <span class="token variable">$o_instance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>通过对例子进行流程图分析的方式，即使脑子是混乱的但图是清晰的，通过分析图来分析逻辑的正确性，通过图来进行编码就变得很容易了，所有遇到脑子理不清的问题还是应该先画图,画图虽然花费一定时间，但相比在脑子里理不清的时候，其所带来的直观的逻辑展示往往会帮我们在整个编程节省大量的时间</strong></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> think </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux scws中文分词扩展安装</title>
      <link href="/2018/02/08/php%E2%95%93%E2%95%A8%E2%95%AC%E2%94%80%E2%95%96%E2%95%93%E2%94%A4%E2%95%A9/"/>
      <url>/2018/02/08/php%E2%95%93%E2%95%A8%E2%95%AC%E2%94%80%E2%95%96%E2%95%93%E2%94%A4%E2%95%A9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>SCWS 是 Simple Chinese Word Segmentation 的首字母缩写（即：简易中文分词系统）。</p></blockquote><p>这是一套基于词频词典的机械式中文分词引擎，它能将一整段的中文文本基本正确地切分成词。 词是中文的最小语素单位，但在书写时并不像英语会在词之间用空格分开， 所以如何准确并快速分词一直是中文分词的攻关难点。</p><p><strong>安装环境ubuntu16.04</strong></p><hr><h4 id="安装scws-123"><a href="#安装scws-1-2-3" class="headerlink" title="安装scws-1.2.3"></a>安装scws-1.2.3</h4><ul><li><code>wget -q -O - http://www.xunsearch.com/scws/down/scws-1.2.3.tar.bz2 | tar xjf -</code></li><li><code>cd scws-1.2.3</code></li><li><code>./configure --prefix=/usr/local/scws</code></li><li><code>make &amp;&amp; sudo make install</code></li><li><code>php -m | grep scws</code></li></ul><hr><h4 id="安装php扩展"><a href="#安装php扩展" class="headerlink" title="安装php扩展"></a>安装php扩展</h4><p><strong>检测phpize</strong></p><ul><li><code>which phpize &amp;&amp; sudo apt install php-dev</code></li><li><code>cd phpext &amp;&amp; phpize &amp;&amp; ./configure --with-scws=/usr/local &amp;&amp; make &amp;&amp; sudo make install</code></li><li>在php.ini添加扩展即可(extension = EXTENSION_PATH)</li></ul><p><a href="http://www.xunsearch.com/scws/" target="_blank" rel="noopener">scws官方网站</a></p><p><a href="https://www.jianshu.com/p/6bee26eed66c" target="_blank" rel="noopener">更多教程</a></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>结构设计模式之适配器模式</title>
      <link href="/2018/02/06/%E2%95%A9%E2%95%A9%E2%94%BC%CE%A3%E2%95%9E%E2%89%88%E2%94%80%C3%BA%E2%95%A9%E2%95%9C/"/>
      <url>/2018/02/06/%E2%95%A9%E2%95%A9%E2%94%BC%CE%A3%E2%95%9E%E2%89%88%E2%94%80%C3%BA%E2%95%A9%E2%95%9C/</url>
      
        <content type="html"><![CDATA[<p><strong>Wikipedia</strong></p><blockquote><p>In software engineering, structural design patterns are design patterns that ease the design by identifying a simple way to realize relationships between entities.</p></blockquote><p>结构设计模式关注对象之间的组合,也就是对象之间的相互使用</p><h4 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h4><p><strong>让已存在的不兼容对象，在不修改代码的情况下通过适配器的wrap让其能够兼容</strong></p><p>例如：一个猎人打猎，现在猎物存在狮子，但存在另一个野猪类，在不改动已存在的猎人接口和狮子与野猪接口的同时让猎人也能够猎野猪</p><p><strong>php代码</strong></p><pre class="line-numbers language-php"><code class="language-php">    <span class="token comment" spellcheck="true">//狮子接口</span>    <span class="token keyword">interface</span> <span class="token class-name">Lion</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//咆哮</span>        <span class="token keyword">function</span> <span class="token function">roar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>string<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//非洲狮</span>    <span class="token keyword">class</span> <span class="token class-name">AfricaLion</span> <span class="token keyword">implements</span>  <span class="token class-name">Lion</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">roar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>string <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"正在咆哮的非洲狮\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//美洲狮子</span>    <span class="token keyword">class</span> <span class="token class-name">AmericaLion</span> <span class="token keyword">implements</span> <span class="token class-name">Lion</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">roar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>string <span class="token punctuation">{</span>            <span class="token keyword">return</span>  <span class="token string">"正在咆哮的美洲狮\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//猎人</span>    <span class="token keyword">class</span> <span class="token class-name">Hunter</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//打猎</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">hunt</span><span class="token punctuation">(</span>Lion <span class="token variable">$lion</span><span class="token punctuation">)</span><span class="token punctuation">:</span>void<span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"猎人杀死了一头"</span><span class="token punctuation">.</span><span class="token variable">$lion</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">roar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//猎人实例化</span>    <span class="token variable">$o_hunter</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hunter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//非洲狮</span>    <span class="token variable">$o_africaLion</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AfricaLion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//美洲狮</span>    <span class="token variable">$o_americaLion</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AmericaLion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打猎行为</span>    <span class="token variable">$o_hunter</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">hunt</span><span class="token punctuation">(</span><span class="token variable">$o_africaLion</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$o_hunter</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">hunt</span><span class="token punctuation">(</span><span class="token variable">$o_americaLion</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//==============现存在野猪的打猎，且不修猎人,野猪接口,因为打猎方法的参数约束为Lion,但野猪并不是狮子，增加适配器进行适配</span>    <span class="token comment" spellcheck="true">//已存在野猪接口</span>    <span class="token keyword">interface</span> <span class="token class-name">WildPig</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//吃</span>        <span class="token keyword">function</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>string<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">ChinaWildPig</span> <span class="token keyword">implements</span> <span class="token class-name">WildPig</span><span class="token punctuation">{</span>        <span class="token keyword">function</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>string <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"正在吃草的中国野猪\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//野猪适配器对野猪进行适配</span>    <span class="token keyword">class</span> <span class="token class-name">WildPigAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Lion</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token variable">$o_wildPig</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//野猪</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>WildPig <span class="token variable">$o_wildPig</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">o_wildPig</span> <span class="token operator">=</span> <span class="token variable">$o_wildPig</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">roar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>string <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">o_wildPig</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//中国野猪</span>    <span class="token variable">$o_chinaWildPig</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChinaWildPig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$o_wildPigAd</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WildPigAdapter</span><span class="token punctuation">(</span><span class="token variable">$o_chinaWildPig</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$o_hunter</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">hunt</span><span class="token punctuation">(</span><span class="token variable">$o_wildPigAd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果为</strong></p><img src="/2018/02/06/╩╩┼Σ╞≈─ú╩╜/adapter.png"><p><strong>uml类图</strong></p><img src="/2018/02/06/╩╩┼Σ╞≈─ú╩╜/adapter_uml.png"><p><strong>结论</strong></p><p>作为结构化设计模式，适配器模式是在类已经存在的情况下，想要对其进行复用，但是由于接口不兼容而需要进行创建一个wrap，也就是创建一个壳(适配器)进行适配使其兼容现在接口,<br><strong>也就是说已存在才进行适配，如果不存而刻意进行适配，适得其反。例如上例中本类就不存在野猪接口，则不需要适配器</strong></p>]]></content>
      
      
      <categories>
          
          <category> design_pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> design_pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git利用rebase对多个commit进行压缩</title>
      <link href="/2018/01/24/git%20rebase/"/>
      <url>/2018/01/24/git%20rebase/</url>
      
        <content type="html"><![CDATA[<p>平常当进行<strong>commit</strong>的时候，可能对同一个问题进行了多次连续的commit,于是查看提交日志的时候出现一下情况</p><img src="/2018/01/24/git%20rebase/commit1.png"><p>此时就存在许多冗余的commit日志，单个任务的commit日志过于碎片化，不利于版本控制</p><h3 id="利用rebase对冗余commit进行压缩"><a href="#利用rebase对冗余commit进行压缩" class="headerlink" title="利用rebase对冗余commit进行压缩"></a>利用rebase对冗余commit进行压缩</h3><blockquote><p>git rebase -i commit_hash</p></blockquote><ul><li><strong>-i</strong>  interactive 交互</li><li><strong>commit_hash</strong> commit哈希值</li></ul><p>如上图，我需要将commit665ca79到HEAD指针(44c13f5)压缩为一个commit</p><ol><li><strong>git rebase -i 665ca79,进入vi交互界面<br></strong></li><li><strong>删除pick 44c13f5 update loading外的其它pick commit_hash commit_msg</strong></li><li><strong>修改pick 44c13f5 update loading为squash 44c13f5 update loading</strong></li><li><strong>保存退出,进入提交说明交互界面，修改新的提交说明,保存退出</strong></li><li><strong>如果成功，如下图，提交日志会变为如下</strong><br><img src="/2018/01/24/git%20rebase/commit2.png"></li><li><strong>如果失败，如出现冲突，可先解决冲突，然后执行命令git add * &amp;&amp; git rebase –continue</strong></li><li><strong>取消rebase,git rebase –abort</strong></li></ol><h3 id="分支rebase"><a href="#分支rebase" class="headerlink" title="分支rebase"></a>分支rebase</h3><img src="/2018/01/24/git%20rebase/rebase_branch.png"><p>如上图图1中，在commit B创建了一个新分支<strong>branch1</strong>,在此之后<strong>master</strong>分支提交了两次，<strong>C、E</strong>，<strong>branch1分支</strong>提交了两次<strong>D、F</strong><br></p><p>切换<strong>branch1</strong>分支，执行命令<strong>git rebase master</strong>，git会基于与<strong>master</strong>共同祖先也就<strong>B</strong>，开始对比差异，并且以<strong>master</strong>为基分支，将<strong>B</strong>后<strong>branch1</strong>所有提交压缩到一起作为一次提交<strong>于master E</strong>提交后，如图2</p><p>这样有一个好处是，当创建一个新分支<strong>branch1</strong>开发一些额外任务的时候,<strong>master</strong>分支也继续开发，当完成任务的时候<strong>branch1</strong>可能存在许多次提交。利用rebase <strong>master</strong>可以把<strong>branch1</strong>的所有与<strong>master</strong>基于共同提交点后(<strong>B</strong>)的提交压缩为一个，同时<strong>branch1</strong>分支看起来就像刚刚从<strong>master</strong>分支最新的<strong>HEAD(E)</strong>指针创建提交的，结构更加简洁</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用canvas进行截图</title>
      <link href="/2018/01/23/canvas%E2%95%9C%E2%95%AA%E2%95%90%E2%95%9D/"/>
      <url>/2018/01/23/canvas%E2%95%9C%E2%95%AA%E2%95%90%E2%95%9D/</url>
      
        <content type="html"><![CDATA[<h3 id="以下为利用html5的canvas进行图片截取功能的所有概述"><a href="#以下为利用html5的canvas进行图片截取功能的所有概述" class="headerlink" title="以下为利用html5的canvas进行图片截取功能的所有概述"></a>以下为利用html5的canvas进行图片截取功能的所有概述</h3><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>如果已经描绘了一些图形的轮廓但是没有进行stroke或者填充，即使擦除整个canvas，当下次进行描绘或填充的时候仍然会会对此次以往的所有未进行描绘或填充的图形进行操作<br><br><strong>所以当决定舍弃所有以前的图形，如果图形比较复杂，应该进行ctx.beginPath()</strong></li><li>canvas元素本身不支持按键事件，可以通过以下方式<br></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>600<span class="token punctuation">"</span></span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>canvas 绘制操作图像的方法</title>
      <link href="/2018/01/22/canvas%E2%96%93%E2%94%98%E2%95%AB%E2%89%88%E2%95%90%E2%95%9D%E2%95%A7%C2%B1%E2%95%96%E2%95%9C%E2%95%96%C2%BF/"/>
      <url>/2018/01/22/canvas%E2%96%93%E2%94%98%E2%95%AB%E2%89%88%E2%95%90%E2%95%9D%E2%95%A7%C2%B1%E2%95%96%E2%95%9C%E2%95%96%C2%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="1canvas提供四个绘制操作图像的方法"><a href="#1-canvas提供四个绘制操作图像的方法" class="headerlink" title="1.canvas提供四个绘制操作图像的方法"></a>1.canvas提供四个绘制操作图像的方法</h3><ul><li>drawImage()</li><li>getImageData()</li><li>putImageData()</li><li>createImageData()</li></ul><h3 id="2用法"><a href="#2-用法" class="headerlink" title="2.用法"></a>2.用法</h3><blockquote><p>ImageData getImageData(sx,sy,sw,sh)</p></blockquote><p><strong>该对象表示由以（sx，sy）开始且具有sw宽度和sh高度的矩形表示的画布区域的底层像素数据</strong></p><blockquote><p>ctx .putImageData（imagedata，dx，dy)<br>ctx .putImageData（imagedata，dx，dy，dirtyX，dirtyY，dirtyWidth，dirtyHeight）</p></blockquote><p><strong>putImageData()Canvas 2D API 的方法将来自给定ImageData对象的数据绘制到位图上。如果提供了一个脏矩形，则只会绘制该矩形的像素。此方法不受画布转换矩阵的影响。</strong></p><p><strong>参数</strong></p><ul><li>imagedata<br><br>一个ImageData包含的像素值的阵列对象。</li><li>dx,dy<br><br>imagedata放在目标图像的坐标</li><li>dirtyX,dirtyY<br><br>imagedata需要放在目标图像的起点图像坐标</li><li>dirtyWidth,dirtyHeight<br><br>imagedata需要放在目标图像的宽高</li></ul><p><strong>代码</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//将整个imagedata放在目标图像以0,0为起点坐标上</span><span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">putImageData</span><span class="token punctuation">(</span>imagedata<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将imagedata放在目标图像以0,0为起点的坐标上，并且只绘制以sx,sy开始宽高为width和height的部分图像</span><span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">putImageData</span><span class="token punctuation">(</span>imagedata<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sX<span class="token punctuation">,</span> sY<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>drawImage(image, dx, dy)<br>drawImage(image, dx, dy, dw, dh)<br>drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh)</p></blockquote><p><strong>将一副图像绘制在canvas中，绘制图像为源图像，s开头，绘制的地方为目标图像d开头</strong></p><p><strong>参数</strong></p><ul><li>image <br><br>image可以是HTMLImageElement类型的图像型，HTMLCanvasElement类型的canvas对象，或者HTMLVideoELement的视频对象</li><li>dx,dy <br><br>目标图像的x,y坐标</li><li>dw,dh<br><br>需要绘制到目标图像的宽高，默认整个目标图像的宽高，第一类用法</li><li>sx,sy<br><br>需要绘制源图像的x,y坐标</li><li>sw,sh <br><br>需要绘制的源图像的宽高,会根据目标图像的宽高进行缩放</li></ul><blockquote><p>ImageData createImageData(width,height)<br> ImageData createImageData(imagedata)</p></blockquote><p><strong>创建一个新的空白的，指定宽高的ImageData对象，对象内的像素为透明的黑色,如果参数为imageData，那么创建的对象宽高与此imageData宽高相同</strong></p>]]></content>
      
      
      <categories>
          
          <category> canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>php clone中浅复制与深复制</title>
      <link href="/2018/01/19/php%E2%95%9F%E2%94%82%E2%95%95%E2%94%A4%E2%95%93%E2%95%9E%E2%95%99%CE%B4%E2%95%94%CE%B5%E2%95%95%E2%94%A4%E2%95%93%E2%95%9E/"/>
      <url>/2018/01/19/php%E2%95%9F%E2%94%82%E2%95%95%E2%94%A4%E2%95%93%E2%95%9E%E2%95%99%CE%B4%E2%95%94%CE%B5%E2%95%95%E2%94%A4%E2%95%93%E2%95%9E/</url>
      
        <content type="html"><![CDATA[<ul><li>php中对象的传递方式为传引用的方式，通过赋值的方式只能创建同一对象的多个而引用，要创建新的对象需进行clone</li><li>如果对象属性存在对另一个对象的引用，clone该对象只能进行浅复制，即该对象的属性中为对象的属性指向不变</li><li>要深复制，需要手动对属性中为对象的属性进行clone操作，即需要额外对魔术方法__clone进行操作</li></ul><blockquote><p>浅复制</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//人</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$Hobby</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Hobby <span class="token variable">$Hobby</span><span class="token punctuation">,</span><span class="token keyword">array</span> <span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Hobby</span> <span class="token operator">=</span> <span class="token variable">$Hobby</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">arr</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//爱好</span><span class="token keyword">class</span> <span class="token class-name">Hobby</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$sport</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//运动</span>    <span class="token keyword">public</span> <span class="token variable">$song</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//歌曲</span>    <span class="token keyword">public</span> <span class="token variable">$food</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//食物</span>    <span class="token keyword">public</span> <span class="token variable">$game</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//游戏</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setSport</span><span class="token punctuation">(</span>string <span class="token variable">$sport</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>Hobby<span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sport</span> <span class="token operator">=</span> <span class="token variable">$sport</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setSong</span><span class="token punctuation">(</span>string <span class="token variable">$song</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>Hobby<span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">song</span> <span class="token operator">=</span> <span class="token variable">$song</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setFood</span><span class="token punctuation">(</span>string <span class="token variable">$food</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>Hobby<span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">food</span> <span class="token operator">=</span> <span class="token variable">$food</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setGame</span><span class="token punctuation">(</span>string <span class="token variable">$game</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>Hobby<span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">game</span> <span class="token operator">=</span> <span class="token variable">$game</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==========克隆对象并改变克隆对象属性观察原对象属性变化</span><span class="token comment" spellcheck="true">//爱好对象</span><span class="token variable">$o_hobby</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hobby</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o_hobby</span> <span class="token operator">=</span> <span class="token variable">$o_hobby</span> <span class="token operator">-</span><span class="token operator">></span><span class="token function">setSport</span><span class="token punctuation">(</span><span class="token string">"basketball"</span><span class="token punctuation">)</span>                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">setSong</span><span class="token punctuation">(</span><span class="token string">"we are the world"</span><span class="token punctuation">)</span>                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">setFood</span><span class="token punctuation">(</span><span class="token string">"beef"</span><span class="token punctuation">)</span>                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">setGame</span><span class="token punctuation">(</span><span class="token string">"lol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a_arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span>     <span class="token string">'name'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'lance'</span><span class="token punctuation">,</span>     <span class="token string">'sex'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'male'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$o_person</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token variable">$o_hobby</span><span class="token punctuation">,</span> <span class="token variable">$a_arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o_clone</span> <span class="token operator">=</span> clone <span class="token variable">$o_person</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//===========打印结果</span><span class="token comment" spellcheck="true">//原对象</span><span class="token keyword">echo</span> <span class="token string">"原对象属性&lt;br/>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;pre>"</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$o_person</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;/pre>"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//改变克隆对象属性</span><span class="token variable">$o_clone</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Hobby</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setFood</span><span class="token punctuation">(</span><span class="token string">"noodle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o_clone</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">arr</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"jianglong"</span><span class="token punctuation">;</span><span class="token variable">$o_clone</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//改变后的clone对象</span><span class="token keyword">echo</span> <span class="token string">"改变后的clone对象&lt;br/>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;pre>"</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$o_clone</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;/pre>"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//原对象</span><span class="token keyword">echo</span> <span class="token string">"改变clone对象后，原对象属性&lt;br/>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;pre>"</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$o_person</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;/pre>"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="有两个类一个是人一个是爱好人拥有三个属性一个对爱好对象的引用一个数组一个年龄-爱好是对人对某些方面爱好的设定"><a href="#有两个类，一个是人，一个是爱好，人拥有三个属性，一个对爱好对象的引用，一个数组，一个年龄。爱好是对人对某些方面爱好的设定" class="headerlink" title="有两个类，一个是人，一个是爱好，人拥有三个属性，一个对爱好对象的引用，一个数组，一个年龄。爱好是对人对某些方面爱好的设定"></a>有两个类，一个是人，一个是爱好，人拥有三个属性，一个对爱好对象的引用，一个数组，一个年龄。爱好是对人对某些方面爱好的设定</h4><ul><li>生成爱好对象，并设置各类爱好</li><li>实例化人对象，并设置人的爱好对象，以及包含额外信息数组</li><li>克隆人对象，并对克隆人对象的爱好，数组，以及年龄分别进行改变</li><li>分别打印，原始对象，改变克隆属性后的克隆对象，原始对象</li></ul><p>结果如下:</p><pre class="line-numbers language-php"><code class="language-php">原对象属性   <span class="token comment" spellcheck="true">//Person Object</span>   <span class="token punctuation">(</span>       <span class="token punctuation">[</span>Hobby<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> Hobby <span class="token function">Object</span>           <span class="token punctuation">(</span>               <span class="token punctuation">[</span>sport<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> basketball               <span class="token punctuation">[</span>song<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> we are the world               <span class="token punctuation">[</span>food<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> beef               <span class="token punctuation">[</span>game<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> lol           <span class="token punctuation">)</span>       <span class="token punctuation">[</span>arr<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">Array</span>           <span class="token punctuation">(</span>               <span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> lance               <span class="token punctuation">[</span>sex<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> male           <span class="token punctuation">)</span>       <span class="token punctuation">[</span>age<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">25</span>   <span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//改变后的clone对象</span>   Person <span class="token function">Object</span>   <span class="token punctuation">(</span>       <span class="token punctuation">[</span>Hobby<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> Hobby <span class="token function">Object</span>           <span class="token punctuation">(</span>               <span class="token punctuation">[</span>sport<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> basketball               <span class="token punctuation">[</span>song<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> we are the world               <span class="token punctuation">[</span>food<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> noodle               <span class="token punctuation">[</span>game<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> lol           <span class="token punctuation">)</span>       <span class="token punctuation">[</span>arr<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">Array</span>           <span class="token punctuation">(</span>               <span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> jianglong               <span class="token punctuation">[</span>sex<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> male           <span class="token punctuation">)</span>       <span class="token punctuation">[</span>age<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">30</span>   <span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//改变clone对象后，原对象属性</span>   Person <span class="token function">Object</span>   <span class="token punctuation">(</span>       <span class="token punctuation">[</span>Hobby<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> Hobby <span class="token function">Object</span>           <span class="token punctuation">(</span>               <span class="token punctuation">[</span>sport<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> basketball               <span class="token punctuation">[</span>song<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> we are the world               <span class="token punctuation">[</span>food<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> noodle               <span class="token punctuation">[</span>game<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> lol           <span class="token punctuation">)</span>       <span class="token punctuation">[</span>arr<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">Array</span>           <span class="token punctuation">(</span>               <span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> lance               <span class="token punctuation">[</span>sex<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> male           <span class="token punctuation">)</span>       <span class="token punctuation">[</span>age<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">25</span>   <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为对克隆对象的普通属性即年龄，对象属性爱好Hobby，额外属性数组进行改变后，原对象只有对象属性发生了变化可以看出:</p><ul><li>clone时，只有对象是浅复制，即传递引用的方式,克隆对象的属性对象与原对象的属性对象都指向同一个地址，无论克隆对象还是原对象对应属性发生变化，二者的属性对象都会受到影响</li></ul><blockquote><p>深复制</p></blockquote><p>深复制只需要在Person类中在魔术方法__clone中再次对对象属性进行一次clone</p><pre class="line-numbers language-php"><code class="language-php"> <span class="token comment" spellcheck="true">//人</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token variable">$Hobby</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Hobby <span class="token variable">$Hobby</span><span class="token punctuation">,</span><span class="token keyword">array</span> <span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Hobby</span> <span class="token operator">=</span> <span class="token variable">$Hobby</span><span class="token punctuation">;</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">arr</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Hobby</span> <span class="token operator">=</span> clone <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Hobby</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行的操作与赋值相同，结果如下:</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//原对象属性</span>Person <span class="token function">Object</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span>Hobby<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> Hobby <span class="token function">Object</span>        <span class="token punctuation">(</span>            <span class="token punctuation">[</span>sport<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> basketball            <span class="token punctuation">[</span>song<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> we are the world            <span class="token punctuation">[</span>food<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> beef            <span class="token punctuation">[</span>game<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> lol        <span class="token punctuation">)</span>    <span class="token punctuation">[</span>arr<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">Array</span>        <span class="token punctuation">(</span>            <span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> lance            <span class="token punctuation">[</span>sex<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> male        <span class="token punctuation">)</span>    <span class="token punctuation">[</span>age<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//改变后的clone对象</span>Person <span class="token function">Object</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span>Hobby<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> Hobby <span class="token function">Object</span>        <span class="token punctuation">(</span>            <span class="token punctuation">[</span>sport<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> basketball            <span class="token punctuation">[</span>song<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> we are the world            <span class="token punctuation">[</span>food<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> noodle            <span class="token punctuation">[</span>game<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> lol        <span class="token punctuation">)</span>    <span class="token punctuation">[</span>arr<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">Array</span>        <span class="token punctuation">(</span>            <span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> jianglong            <span class="token punctuation">[</span>sex<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> male        <span class="token punctuation">)</span>    <span class="token punctuation">[</span>age<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//改变clone对象后，原对象属性</span>Person <span class="token function">Object</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span>Hobby<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> Hobby <span class="token function">Object</span>        <span class="token punctuation">(</span>            <span class="token punctuation">[</span>sport<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> basketball            <span class="token punctuation">[</span>song<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> we are the world            <span class="token punctuation">[</span>food<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> beef            <span class="token punctuation">[</span>game<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> lol        <span class="token punctuation">)</span>    <span class="token punctuation">[</span>arr<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">Array</span>        <span class="token punctuation">(</span>            <span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> lance            <span class="token punctuation">[</span>sex<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> male        <span class="token punctuation">)</span>    <span class="token punctuation">[</span>age<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">25</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为原对象的属性对象Hobby并未发生变化，说明此次复制原对象的属性对象不再是引用的方式，而是clone一个新的对象</p><h4 id="clone的方式不需要重新再次实例化对象减少了资源消耗当对象的属性也是一个对象时需要注意浅度复制和利用魔术方法__clone进行深度复制"><a href="#clone的方式不需要重新再次实例化对象，减少了资源消耗-当对象的属性也是一个对象时需要注意浅度复制和利用魔术方法-clone进行深度复制" class="headerlink" title="clone的方式不需要重新再次实例化对象，减少了资源消耗,当对象的属性也是一个对象时需要注意浅度复制和利用魔术方法__clone进行深度复制"></a>clone的方式不需要重新再次实例化对象，减少了资源消耗,当对象的属性也是一个对象时需要注意浅度复制和利用魔术方法__clone进行深度复制</h4><h4 id="设计模式中原型模式即利用clone的方式"><a href="#设计模式中原型模式即利用clone的方式" class="headerlink" title="设计模式中原型模式即利用clone的方式"></a>设计模式中原型模式即利用clone的方式</h4>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>原型设计模式</title>
      <link href="/2018/01/19/%E2%95%98%C2%A1%E2%95%A8%E2%95%90%E2%94%80%C3%BA%E2%95%A9%E2%95%9C/"/>
      <url>/2018/01/19/%E2%95%98%C2%A1%E2%95%A8%E2%95%90%E2%94%80%C3%BA%E2%95%A9%E2%95%9C/</url>
      
        <content type="html"><![CDATA[<h4 id="原型设计模式是产生一个新对象通过clone的方式而不是进行new"><a href="#原型设计模式是产生一个新对象通过clone的方式而不是进行new" class="headerlink" title="原型设计模式是产生一个新对象通过clone的方式而不是进行new"></a>原型设计模式是产生一个新对象通过clone的方式而不是进行new</h4><p><strong>UML类图</strong></p><img src="/2018/01/19/╘¡╨═─ú╩╜/prototype.png"><p>如图，一共有两个类，人和爱好,人类属性中包含一个爱好对象，用来描述生成对象的各种爱好</p><ul><li>当需要生产多个同类对象时可以通过clone的方式而不是new这样可以减少创建新对象过程中的资源消耗</li><li>人对象中的爱好属性同为一个对象，对象的传递方式为传引用，克隆原对象后，新对象的爱好属性与原对象的爱好属性指向相同，即为浅复制</li><li>如何进行深复制？即原对象中为对象的属性在进行复制时候，也会创建新对象而不是传递引用</li></ul><h4 id="深度复制以php为例"><a href="#深度复制以php为例" class="headerlink" title="深度复制以php为例"></a>深度复制以php为例</h4><pre class="line-numbers language-php"><code class="language-php">  <span class="token comment" spellcheck="true">//人</span>  <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token variable">$Hobby</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Hobby <span class="token variable">$Hobby</span><span class="token punctuation">,</span><span class="token keyword">array</span> <span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Hobby</span> <span class="token operator">=</span> <span class="token variable">$Hobby</span><span class="token punctuation">;</span>          <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">arr</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Hobby</span> <span class="token operator">=</span> clone <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Hobby</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//爱好</span>  <span class="token keyword">class</span> <span class="token class-name">Hobby</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token variable">$sport</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//运动</span>      <span class="token keyword">public</span> <span class="token variable">$song</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//歌曲</span>      <span class="token keyword">public</span> <span class="token variable">$food</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//食物</span>      <span class="token keyword">public</span> <span class="token variable">$game</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//游戏</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setSport</span><span class="token punctuation">(</span>string <span class="token variable">$sport</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>Hobby<span class="token punctuation">{</span>          <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sport</span> <span class="token operator">=</span> <span class="token variable">$sport</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setSong</span><span class="token punctuation">(</span>string <span class="token variable">$song</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>Hobby<span class="token punctuation">{</span>          <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">song</span> <span class="token operator">=</span> <span class="token variable">$song</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setFood</span><span class="token punctuation">(</span>string <span class="token variable">$food</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>Hobby<span class="token punctuation">{</span>          <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">food</span> <span class="token operator">=</span> <span class="token variable">$food</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setGame</span><span class="token punctuation">(</span>string <span class="token variable">$game</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>Hobby<span class="token punctuation">{</span>          <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">game</span> <span class="token operator">=</span> <span class="token variable">$game</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//======深复制</span>  <span class="token comment" spellcheck="true">//爱好对象</span>  <span class="token variable">$o_hobby</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hobby</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$o_hobby</span> <span class="token operator">=</span> <span class="token variable">$o_hobby</span> <span class="token operator">-</span><span class="token operator">></span><span class="token function">setSport</span><span class="token punctuation">(</span><span class="token string">"basketball"</span><span class="token punctuation">)</span>                       <span class="token operator">-</span><span class="token operator">></span><span class="token function">setSong</span><span class="token punctuation">(</span><span class="token string">"we are the world"</span><span class="token punctuation">)</span>                       <span class="token operator">-</span><span class="token operator">></span><span class="token function">setFood</span><span class="token punctuation">(</span><span class="token string">"beef"</span><span class="token punctuation">)</span>                       <span class="token operator">-</span><span class="token operator">></span><span class="token function">setGame</span><span class="token punctuation">(</span><span class="token string">"lol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$a_arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span>       <span class="token string">'name'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'lance'</span><span class="token punctuation">,</span>       <span class="token string">'sex'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'male'</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token variable">$o_person</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token variable">$o_hobby</span><span class="token punctuation">,</span> <span class="token variable">$a_arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$o_clone</span> <span class="token operator">=</span> clone <span class="token variable">$o_person</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上为利用php进行深复制，更多php clone的信息查看<a href="/php/2018/01/19/04">php clone中浅复制与深复制</a></p>]]></content>
      
      
      <categories>
          
          <category> design_pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> design_pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>建造者模式</title>
      <link href="/2018/01/18/%E2%95%9C%C2%BF%E2%95%98%E2%88%9E%E2%95%92%E2%96%80%E2%94%80%C3%BA%E2%95%A9%E2%95%9C/"/>
      <url>/2018/01/18/%E2%95%9C%C2%BF%E2%95%98%E2%88%9E%E2%95%92%E2%96%80%E2%94%80%C3%BA%E2%95%A9%E2%95%9C/</url>
      
        <content type="html"><![CDATA[<h4 id="建造者模式将一个复杂对象的建造过程与表现分离使同样的建造过程可以建造不同表示"><a href="#建造者模式将一个复杂对象的建造过程与表现分离，使同样的建造过程可以建造不同表示" class="headerlink" title="建造者模式将一个复杂对象的建造过程与表现分离，使同样的建造过程可以建造不同表示"></a>建造者模式将一个复杂对象的建造过程与表现分离，使同样的建造过程可以建造不同表示</h4><p>UML类图</p><p><img src="!--￼0--" alt="builder"></p><p>例如:</p><ul><li>当建造一个产品(人偶)，这个过程包括构建头、手、身体、脚,过程固定，但高矮胖瘦在构建的过程中表现不同，这些为构建表现细节，过程是抽象的，即细节依赖抽象</li><li>我们对建造模型各过程进行抽象，让子类实现具体的构建表现细节</li><li>需要一个指挥者来指挥构建过程</li></ul><p>代码实例:</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//构建产品</span><span class="token keyword">class</span> <span class="token class-name">Product</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$A</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$B</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$C</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">addA</span><span class="token punctuation">(</span><span class="token variable">$something</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">A</span> <span class="token operator">=</span> <span class="token variable">$something</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">addB</span><span class="token punctuation">(</span><span class="token variable">$something</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">B</span> <span class="token operator">=</span> <span class="token variable">$something</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">addC</span><span class="token punctuation">(</span><span class="token variable">$something</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">C</span> <span class="token operator">=</span> <span class="token variable">$something</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//建造过程</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$Product</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Product <span class="token variable">$product</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Product</span> <span class="token operator">=</span> <span class="token variable">$product</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">abstract</span> <span class="token keyword">function</span> <span class="token function">createPartA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//建造过程A</span>    <span class="token keyword">abstract</span> <span class="token keyword">function</span> <span class="token function">createPartB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//过程B</span>    <span class="token keyword">abstract</span> <span class="token keyword">function</span> <span class="token function">createPartC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//过程C</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//获取建造对象</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Product</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//具体构建者</span><span class="token keyword">class</span> <span class="token class-name">Builder1</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">createPartA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Product</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addA</span><span class="token punctuation">(</span><span class="token string">'我创建了A1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">createPartB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Product</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addB</span><span class="token punctuation">(</span>'我创建了<span class="token constant">B1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">createPartC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Product</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addC</span><span class="token punctuation">(</span><span class="token string">'我创建了C1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//具体构建者</span><span class="token keyword">class</span> <span class="token class-name">Builder2</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">createPartA</span><span class="token punctuation">(</span><span class="token string">'我创建了A2'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Product</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">createPartB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Product</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addB</span><span class="token punctuation">(</span><span class="token string">'我创建了B2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">createPartC</span><span class="token punctuation">(</span>'我创建了<span class="token constant">C2</span>’<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Product</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//构建过程指挥家</span><span class="token keyword">class</span> <span class="token class-name">Composer</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$Builder</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//传入构建对象</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Builder <span class="token variable">$builder</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Builder</span> <span class="token operator">=</span> <span class="token variable">$builder</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//构建过程</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">startBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Builder</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createPartA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Builder</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createPartB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Builder</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createPartC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用过程</span><span class="token variable">$o_builder</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Builder1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o_composer</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composer</span><span class="token punctuation">(</span><span class="token variable">$o_builder</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开始构造</span><span class="token variable">$o_composer</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回构造对象</span><span class="token variable">$o_builder</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> design_pattern </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>工厂方法与抽象工厂模式</title>
      <link href="/2018/01/18/%E2%95%A3%C3%B1%E2%94%82%C2%BA%E2%95%96%E2%95%9C%E2%95%96%C2%BF%E2%95%99%CE%B4%E2%94%82%CE%98%E2%95%A7%E2%89%A4%E2%95%A3%C3%B1%E2%94%82%C2%BA%E2%94%80%C3%BA%E2%95%A9%E2%95%9C/"/>
      <url>/2018/01/18/%E2%95%A3%C3%B1%E2%94%82%C2%BA%E2%95%96%E2%95%9C%E2%95%96%C2%BF%E2%95%99%CE%B4%E2%94%82%CE%98%E2%95%A7%E2%89%A4%E2%95%A3%C3%B1%E2%94%82%C2%BA%E2%94%80%C3%BA%E2%95%A9%E2%95%9C/</url>
      
        <content type="html"><![CDATA[<h4 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h4><p><strong>uml类图</strong></p><img src="/2018/01/18/╣ñ│º╖╜╖¿╙δ│Θ╧≤╣ñ│º─ú╩╜/factory.png"><ul><li>工厂方法的工厂是用来生成对象,如UML图,该工厂生成水果对象,每个子类工厂分别生产香蕉,橘子,和苹果对象</li><li>与简单工厂比,工厂方法将生成对象的过程延迟到子类,这样在有新类型对象加入的时候,可以增加新的工厂子类,而不是修改原方法,符合<strong>开放封闭原则</strong></li></ul><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><p><strong>uml类图</strong></p><img src="/2018/01/18/╣ñ│º╖╜╖¿╙δ│Θ╧≤╣ñ│º─ú╩╜/abstract_fa.png"><ul><li>抽象工厂模式是用来生成一些列相关对象的集合,如UML图,每个子类工厂同时实现两个方法,分别生产水果和饮料对象</li><li>水果和饮料有不同分类，水果可以生成饮料，两者相互有联系，通过这种方式既集成对象的封装，又增强了对象交互</li></ul>]]></content>
      
      
      <categories>
          
          <category> design_pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> design_pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>canvas2d坐标系变换</title>
      <link href="/2018/01/18/canvas2d%E2%95%AB%C2%B0%E2%96%92%CE%A9%E2%95%A7%E2%95%A1%E2%96%92%CE%A3%E2%95%97%E2%95%97/"/>
      <url>/2018/01/18/canvas2d%E2%95%AB%C2%B0%E2%96%92%CE%A9%E2%95%A7%E2%95%A1%E2%96%92%CE%A3%E2%95%97%E2%95%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>canvas 2d坐标系有三类变换,平移,缩放,旋转。尽管三类变换提供了三个不同的函数分别进行处理,但也提供了额外简单的函数对所有变换一起处理</p></blockquote><h4 id="transform-与-settransform"><a href="#transform-与-setTransform" class="headerlink" title="transform 与 setTransform"></a>transform 与 setTransform</h4><p><strong>这两个函数参数是一致的,绘制坐标系的方式不同</strong></p><ul><li>transform 函数对当前坐标系的基础上进行变换</li><li>setTransform 对单位矩阵进行变换</li></ul><blockquote><p><strong>参数</strong><br><strong>transform(a,b,c,d,e,f)</strong></p></blockquote><p><strong>x1 = ax + cy + e;</strong></p><p><strong>y1 = bx + dy + f;</strong></p><blockquote><p>坐标系平移:(1,0,0,1,50,50)</p></blockquote><p>x1 = x + 50;</p><p>y1 = y + 50;</p><p>坐标系原点 x轴和y轴都平移50个像素</p><blockquote><p>坐标系缩放:(2,0,0,2,0,0)</p></blockquote><p>x1 = 2x;</p><p>y1 = 2y;</p><p>坐标系x,y同时放大两倍</p><blockquote><p>坐标系旋转:(Math.cos(50 <em> Math.PI / 180),Math.sin(50 </em> Math.PI / 180), - Math.sin(50 <em> Math.PI / 180),Math.cos(50 </em> Math.PI / 180),0,0)</p></blockquote><p>x1 =  Math.cos(50 <em> Math.PI / 180) </em> x - Math.sin(50 <em> Math.PI / 180) </em> y + e;</p><p>y1 =  Math.sin(50 <em> Math.PI / 180) </em> x + Math.cos(50 <em> Math.PI / 180) </em> y + f;</p><p>坐标系旋转50度</p>]]></content>
      
      
      <categories>
          
          <category> canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>canvas图像合成</title>
      <link href="/2018/01/17/canvas%E2%95%90%E2%95%9D%E2%95%A7%C2%B1%E2%95%91%E2%95%A7%E2%94%82%E2%95%94/"/>
      <url>/2018/01/17/canvas%E2%95%90%E2%95%9D%E2%95%A7%C2%B1%E2%95%91%E2%95%A7%E2%94%82%E2%95%94/</url>
      
        <content type="html"><![CDATA[<h3 id="canvas图像合成能绘制很棒的效果先介绍图像合成过程最后会给出一个利用图像合成制作聚光灯效果"><a href="#canvas图像合成能绘制很棒的效果-先介绍图像合成过程-最后会给出一个利用图像合成制作聚光灯效果" class="headerlink" title="canvas图像合成能绘制很棒的效果.先介绍图像合成过程,最后会给出一个利用图像合成制作聚光灯效果"></a>canvas图像合成能绘制很棒的效果.先介绍图像合成过程,最后会给出一个利用图像合成制作聚光灯效果</h3><h3 id="图像合成"><a href="#图像合成" class="headerlink" title="图像合成"></a>图像合成</h3><blockquote><p>globalCompositeOperation属性</p></blockquote><h4 id="以下红色为目标图像已经绘制蓝色为源图"><a href="#以下红色为目标图像-已经绘制-蓝色为源图" class="headerlink" title="以下红色为目标图像(已经绘制),蓝色为源图"></a>以下红色为目标图像(已经绘制),蓝色为源图</h4><h4 id="1ctxglobalcompositeoperation-source-atop仅绘制源图像在目标图像上的部分其他忽略"><a href="#1-ctx-globalCompositeOperation-”source-atop-”-仅绘制源图像在目标图像上的部分-其他忽略" class="headerlink" title="1.ctx.globalCompositeOperation = \”source-atop\”,仅绘制源图像在目标图像上的部分,其他忽略"></a>1.ctx.globalCompositeOperation = \”source-atop\”,仅绘制源图像在目标图像上的部分,其他忽略</h4><img src="/2018/01/17/canvas═╝╧±║╧│╔/composite.png"><img src="/2018/01/17/canvas═╝╧±║╧│╔/composite.png"><img src="/2018/01/17/canvas═╝╧±║╧│╔/source-atop.png"><h4 id="2ctxglobalcompositeoperation-source-out整个图像仅保留绘制源图像在目标图像外的部分"><a href="#2-ctx-globalCompositeOperation-”source-out-”-整个图像仅保留绘制源图像在目标图像外的部分" class="headerlink" title="2.ctx.globalCompositeOperation = \”source-out\”,整个图像仅保留绘制源图像在目标图像外的部分"></a>2.ctx.globalCompositeOperation = \”source-out\”,整个图像仅保留绘制源图像在目标图像外的部分</h4><img src="/2018/01/17/canvas═╝╧±║╧│╔/composite.png"><img src="/2018/01/17/canvas═╝╧±║╧│╔/source-out.png"><h4 id="3ctxglobalcompositeoperation-source-in整个图像仅保留绘制源图像在目标图像上的部分"><a href="#3-ctx-globalCompositeOperation-”source-in-”-整个图像仅保留绘制源图像在目标图像上的部分" class="headerlink" title="3.ctx.globalCompositeOperation = \”source-in\”,整个图像仅保留绘制源图像在目标图像上的部分"></a>3.ctx.globalCompositeOperation = \”source-in\”,整个图像仅保留绘制源图像在目标图像上的部分</h4><img src="/2018/01/17/canvas═╝╧±║╧│╔/composite.png"><img src="/2018/01/17/canvas═╝╧±║╧│╔/source-in.png"><h4 id="4ctxglobalcompositeoperation-source-over源图像绘制在目标图像之上覆盖默认合成方式"><a href="#4-ctx-globalCompositeOperation-”source-over-”-源图像绘制在目标图像之上覆盖-默认合成方式" class="headerlink" title="4.ctx.globalCompositeOperation = \”source-over\”,源图像绘制在目标图像之上覆盖,默认合成方式"></a>4.ctx.globalCompositeOperation = \”source-over\”,源图像绘制在目标图像之上覆盖,默认合成方式</h4><img src="/2018/01/17/canvas═╝╧±║╧│╔/composite.png"><img src="/2018/01/17/canvas═╝╧±║╧│╔/source-over.png"><h4 id="5ctxglobalcompositeoperation-destination-atop与source-atop相反保留源图像目标图像保留与源图像重叠部分并置顶"><a href="#5-ctx-globalCompositeOperation-”destination-atop-”-与source-atop相反-保留源图像-目标图像保留与源图像重叠部分-并置顶" class="headerlink" title="5.ctx.globalCompositeOperation = \”destination-atop\”,与source-atop相反,保留源图像,目标图像保留与源图像重叠部分,并置顶"></a>5.ctx.globalCompositeOperation = \”destination-atop\”,与source-atop相反,保留源图像,目标图像保留与源图像重叠部分,并置顶</h4><img src="/2018/01/17/canvas═╝╧±║╧│╔/composite.png"><img src="/2018/01/17/canvas═╝╧±║╧│╔/destination-atop.png"><p>j</p><h4 id="6ctxglobalcompositeoperation-destination-out与source-out整个图像保留目标图像目标图像与源图像重叠部分擦除"><a href="#6-ctx-globalCompositeOperation-”destination-out-”-与source-out-整个图像保留目标图像-目标图像与源图像重叠部分擦除" class="headerlink" title="6.ctx.globalCompositeOperation = \”destination-out\”,与source-out,整个图像保留目标图像,目标图像与源图像重叠部分擦除"></a>6.ctx.globalCompositeOperation = \”destination-out\”,与source-out,整个图像保留目标图像,目标图像与源图像重叠部分擦除</h4><img src="/2018/01/17/canvas═╝╧±║╧│╔/composite.png"><img src="/2018/01/17/canvas═╝╧±║╧│╔/destination-out.png"><h4 id="7ctxglobalcompositeoperation-destination-in与source-in整个图像仅保留目标图像在源图像上的部分"><a href="#7-ctx-globalCompositeOperation-”destination-in-”-与source-in-整个图像仅保留目标图像在源图像上的部分" class="headerlink" title="7.ctx.globalCompositeOperation = \”destination-in\”,与source-in,整个图像仅保留目标图像在源图像上的部分"></a>7.ctx.globalCompositeOperation = \”destination-in\”,与source-in,整个图像仅保留目标图像在源图像上的部分</h4><img src="/2018/01/17/canvas═╝╧±║╧│╔/composite.png"><img src="/2018/01/17/canvas═╝╧±║╧│╔/destination-in.png"><h4 id="8ctxglobalcompositeoperation-destination-over与source-over相反"><a href="#8-ctx-globalCompositeOperation-”destination-over-”-与source-over相反" class="headerlink" title="8.ctx.globalCompositeOperation = \”destination-over\”,与source-over相反"></a>8.ctx.globalCompositeOperation = \”destination-over\”,与source-over相反</h4><img src="/2018/01/17/canvas═╝╧±║╧│╔/composite.png"><img src="/2018/01/17/canvas═╝╧±║╧│╔/destination-over.png"><h4 id="9ctxglobalcompositeoperation-lighter源图像与目标图像重叠处进行颜色加色处理"><a href="#9-ctx-globalCompositeOperation-”lighter-”-源图像与目标图像重叠处进行颜色加色处理" class="headerlink" title="9.ctx.globalCompositeOperation = \”lighter\”,源图像与目标图像重叠处进行颜色加色处理"></a>9.ctx.globalCompositeOperation = \”lighter\”,源图像与目标图像重叠处进行颜色加色处理</h4><img src="/2018/01/17/canvas═╝╧±║╧│╔/composite.png"><img src="/2018/01/17/canvas═╝╧±║╧│╔/lighter.png"><h4 id="10ctxglobalcompositeoperation-copy源图像被保留其他部分擦除"><a href="#10-ctx-globalCompositeOperation-”copy-”-源图像被保留其他部分擦除" class="headerlink" title="10.ctx.globalCompositeOperation = \”copy\”,源图像被保留其他部分擦除"></a>10.ctx.globalCompositeOperation = \”copy\”,源图像被保留其他部分擦除</h4><img src="/2018/01/17/canvas═╝╧±║╧│╔/composite.png"><img src="/2018/01/17/canvas═╝╧±║╧│╔/copy.png"><h4 id="11ctxglobalcompositeoperation-xor源图像与目标图像重叠处进行擦除"><a href="#11-ctx-globalCompositeOperation-”xor-”-源图像与目标图像重叠处进行擦除" class="headerlink" title="11.ctx.globalCompositeOperation = \”xor\”,源图像与目标图像重叠处进行擦除"></a>11.ctx.globalCompositeOperation = \”xor\”,源图像与目标图像重叠处进行擦除</h4><img src="/2018/01/17/canvas═╝╧±║╧│╔/composite.png"><img src="/2018/01/17/canvas═╝╧±║╧│╔/xor.png"><h3 id="利用图像destination-atop制作聚光灯效果"><a href="#利用图像destination-atop制作聚光灯效果" class="headerlink" title="利用图像destination-atop制作聚光灯效果"></a>利用图像destination-atop制作聚光灯效果</h3><p>过程:首先将一张图片作为canvas容器的背景图片,然后在整张画布上画一层遮蔽色(目标图像),如黑色.然后当鼠标移动到画布上,以鼠标为中心画一定大小的圆形图像(源图像)进行图像合成</p><img src="/2018/01/17/canvas═╝╧±║╧│╔/composite.png"><img src="/2018/01/17/canvas═╝╧±║╧│╔/composite_zard.png"><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遮蔽色(在此为一张图片)</span><span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#hidePicture"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//画布</span>img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"/static/img/canvas_bg.jpg"</span><span class="token punctuation">;</span>img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//加载完图片</span>    <span class="token keyword">let</span> ctx <span class="token operator">=</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    canvas <span class="token operator">=</span> ctx<span class="token punctuation">.</span>canvas<span class="token punctuation">;</span>    t<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//设置canvas背景图片</span>        <span class="token string">"background"</span><span class="token punctuation">:</span> <span class="token string">"url(/static/img/zard.jpg)"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//canvas背景图片</span>        <span class="token string">"background-position"</span><span class="token punctuation">:</span><span class="token string">"-80px -100px "</span><span class="token punctuation">,</span>        <span class="token string">"background-repeat"</span><span class="token punctuation">:</span><span class="token string">"no-repeat"</span><span class="token punctuation">,</span>        <span class="token string">"width"</span><span class="token punctuation">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".col-sm-3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> pattern <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">createPattern</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">"repeat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> pattern<span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> Light <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ctx <span class="token operator">=</span> ctx<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>canvas <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>canvas<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>oldImage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">getImageData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//聚光灯</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//线性渐变</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>globalCompositeOperation <span class="token operator">=</span> <span class="token string">"destination-out"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//图像合成方式</span>            <span class="token keyword">let</span> ra <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">createRadialGradient</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            ra<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'rgba(255,255,255,1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ra<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token string">'rgba(255,255,255,1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ra<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'rgba(255,255,255,0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> ra<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//鼠标移入,进行图像合成</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                self<span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> self<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>                self<span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">putImageData</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>oldImage<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                self<span class="token punctuation">.</span>x <span class="token operator">=</span> e<span class="token punctuation">.</span>clientX <span class="token operator">-</span> <span class="token function">$</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>canvas<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left<span class="token punctuation">;</span>                self<span class="token punctuation">.</span>y <span class="token operator">=</span> e<span class="token punctuation">.</span>clientY <span class="token operator">-</span> <span class="token function">$</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>canvas<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                self<span class="token punctuation">.</span><span class="token function">light</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//鼠标移除清除画布,添加遮盖色</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>onmouseout <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                self<span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> self<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>                ctx<span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>                ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> pattern<span class="token punctuation">;</span>                ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> light <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Light</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    light<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用取地址操作符，对数组子元素进行归类</title>
      <link href="/2018/01/16/%E2%94%94%E2%88%9A%E2%95%99%E2%94%9C%E2%95%A1%E2%95%AA%E2%95%93%E2%95%96%E2%96%93%E2%94%98%E2%95%AB%E2%89%88%E2%95%96%E2%88%9A%E2%95%A2%E2%95%98%E2%95%A9%C2%B2%E2%95%AB%CE%98%E2%95%AB%E2%95%99%E2%95%98%C2%AC%E2%95%A6%E2%95%AA%E2%95%9C%C2%B0%E2%95%A8%E2%95%A8%E2%95%A3%CE%98%E2%94%94%CE%B1/"/>
      <url>/2018/01/16/%E2%94%94%E2%88%9A%E2%95%99%E2%94%9C%E2%95%A1%E2%95%AA%E2%95%93%E2%95%96%E2%96%93%E2%94%98%E2%95%AB%E2%89%88%E2%95%96%E2%88%9A%E2%95%A2%E2%95%98%E2%95%A9%C2%B2%E2%95%AB%CE%98%E2%95%AB%E2%95%99%E2%95%98%C2%AC%E2%95%A6%E2%95%AA%E2%95%9C%C2%B0%E2%95%A8%E2%95%A8%E2%95%A3%CE%98%E2%94%94%CE%B1/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$a_data</span> <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>        <span class="token string">'id'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">'pid'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token string">'data'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>        <span class="token string">'id'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">'pid'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">'data'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$a_newData</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$a_data</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">[</span><span class="token string">'pid'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token variable">$a_data</span><span class="token punctuation">[</span><span class="token variable">$v</span><span class="token punctuation">[</span><span class="token string">'pid'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'sub'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$a_data</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token variable">$a_newData</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$a_data</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">endif</span><span class="token punctuation">;</span><span class="token keyword">endforeach</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php pointer </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js图片上传预览</title>
      <link href="/2018/01/16/js%E2%95%90%E2%95%9D%E2%95%9E%C2%BC%E2%95%94%E2%95%A7%E2%94%A4%C2%BD%E2%95%98%C3%B1%E2%94%94%E2%94%94/"/>
      <url>/2018/01/16/js%E2%95%90%E2%95%9D%E2%95%9E%C2%BC%E2%95%94%E2%95%A7%E2%94%A4%C2%BD%E2%95%98%C3%B1%E2%94%94%E2%94%94/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-js"><code class="language-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'jquery'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//图片上传预览</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>imgPreview <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fileDom<span class="token punctuation">,</span> previewBox<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>FileReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"您的设备不支持图片预览功能，如需该功能请升级您的设备！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//获取文件</span>            <span class="token keyword">var</span> file <span class="token operator">=</span> fileDom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> imageType <span class="token operator">=</span> <span class="token regex">/^image\//</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//是否是图片</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>imageType<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请选择图片！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//读取完成</span>            reader<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取图片dom</span>                <span class="token keyword">var</span> img <span class="token operator">=</span> previewBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//图片路径设置为读取的图片</span>                img<span class="token punctuation">.</span>src <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//多图上传预览</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mulImgPreview <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fileDom<span class="token punctuation">,</span> preview<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//图片地址容器</span>            <span class="token keyword">var</span> imagesUrl <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//清空预览容器</span>            preview<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> files <span class="token operator">=</span> fileDom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>files<span class="token punctuation">,</span> objUrl<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> files<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                objUrl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getObjectURL</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>objUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    imagesUrl<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>objUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//将图片放置在容器中</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> imagesUrl<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                preview<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;img/>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> imagesUrl<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span>height<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&amp;nbsp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>getObjectURL <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//建立一個可存取到該file的url</span>            <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>createObjectURL <span class="token operator">!=</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// basic</span>                url <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>URL <span class="token operator">!=</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// mozilla(firefox)</span>                url <span class="token operator">=</span> window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>webkitURL <span class="token operator">!=</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// webkit or chrome</span>                url <span class="token operator">=</span> window<span class="token punctuation">.</span>webkitURL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> url<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>复制内容到剪切板</title>
      <link href="/2018/01/16/js%E2%95%95%E2%94%A4%E2%95%93%E2%95%9E%E2%94%80%E2%94%8C%E2%95%9A%E2%96%8C%E2%95%A1%E2%95%9C%E2%95%9D%E2%8C%A0%E2%95%9F%E2%95%A8%E2%96%91%CF%83/"/>
      <url>/2018/01/16/js%E2%95%95%E2%94%A4%E2%95%93%E2%95%9E%E2%94%80%E2%94%8C%E2%95%9A%E2%96%8C%E2%95%A1%E2%95%9C%E2%95%9D%E2%8C%A0%E2%95%9F%E2%95%A8%E2%96%91%CF%83/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> content<span class="token operator">=</span><span class="token string">"我是内容"</span><span class="token punctuation">;</span><span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;input type='text' value='"</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">"'/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>temp<span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>temp<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">'copy'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    layer<span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token string">'media_id已复制到剪切板！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    layer<span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token string">'复制到剪切板失败！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>temp<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js格式化手机号码格式</title>
      <link href="/2018/01/16/js%E2%95%95%C2%B1%E2%95%A9%E2%95%9C%E2%95%97%C2%BB%E2%95%A9%E2%95%93%E2%95%97%C2%B7%E2%95%91%E2%94%BC%E2%94%AC%CE%B4%E2%95%95%C2%B1%E2%95%A9%E2%95%9C/"/>
      <url>/2018/01/16/js%E2%95%95%C2%B1%E2%95%A9%E2%95%9C%E2%95%97%C2%BB%E2%95%A9%E2%95%93%E2%95%97%C2%B7%E2%95%91%E2%94%BC%E2%94%AC%CE%B4%E2%95%95%C2%B1%E2%95%A9%E2%95%9C/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> format_phone <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> no_space <span class="token operator">=</span> number<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s/g</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        length <span class="token operator">=</span> no_space<span class="token punctuation">.</span>length<span class="token punctuation">,</span>        sep <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分割符号</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> no_space<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> length <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> no_space<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> sep <span class="token operator">+</span> no_space<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> no_space<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> sep <span class="token operator">+</span> no_space<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> sep <span class="token operator">+</span> no_space<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>git tips</title>
      <link href="/2018/01/16/git%20tips/"/>
      <url>/2018/01/16/git%20tips/</url>
      
        <content type="html"><![CDATA[<h4 id="1删除分支"><a href="#1-删除分支" class="headerlink" title="1.删除分支"></a>1.删除分支</h4><ul><li>本地: git branch -d branch_name</li><li>远程: git branch -r -d origin/branch_name &amp;&amp; git push origin(此处有个空格) :branch_name<h4 id="2推送分支"><a href="#2-推送分支" class="headerlink" title="2.推送分支"></a>2.推送分支</h4></li><li>git push origin local_branch_name:remote_branch_name</li></ul><h4 id="3删除标签"><a href="#3-删除标签" class="headerlink" title="3.删除标签"></a>3.删除标签</h4><ul><li>本地: git tag -d tag_name</li><li>远程: git push origin :refs/tags/tag_name</li></ul><h4 id="4444暂存"><a href="#4444-暂存" class="headerlink" title="4444.暂存"></a>4444.暂存</h4><ul><li>保存未提交的数据: git stash save message</li><li>查看暂存: git stash list</li><li>从栈中恢复，并从栈中删除: git stash pop index</li><li>从栈中回复，不从栈中删除：git stash apply index</li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式6大基本原则</title>
      <link href="/2018/01/13/%E2%95%94%CE%A6%E2%95%9D%E2%95%9E%E2%94%80%C3%BA%E2%95%A9%E2%95%9C%E2%95%98%C2%A1%E2%95%98%E2%89%A5/"/>
      <url>/2018/01/13/%E2%95%94%CE%A6%E2%95%9D%E2%95%9E%E2%94%80%C3%BA%E2%95%A9%E2%95%9C%E2%95%98%C2%A1%E2%95%98%E2%89%A5/</url>
      
        <content type="html"><![CDATA[<h4 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h4><blockquote><p>应该有且只有一个原因引起类的变更</p></blockquote><h4 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h4><blockquote><p>程序对扩展是开放的，对更改是封闭的。</p></blockquote><h4 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h4><blockquote><p>高层模块不依赖低层模块，两者都依赖抽象。抽象不依赖细节，细节依赖抽象。</p></blockquote><h4 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h4><blockquote><p>子类型必须能替换掉他们的父类型。</p></blockquote><h4 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h4><blockquote><p>类间的依赖关系应该建立在最小的接口上</p></blockquote><h4 id="迪比特法则"><a href="#迪比特法则" class="headerlink" title="迪比特法则"></a>迪比特法则</h4><blockquote><p>一个类对自己依赖的类知道的越少越好,或一个类只与直接类通信(属性，方法参数，方法返回中存在的类对象，其他为间接)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> design_pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> design_pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx配置伪静态</title>
      <link href="/2018/01/11/nginx%E2%94%BC%CE%A3%E2%95%93%E2%94%9C%E2%95%AC%E2%96%92%E2%95%9B%E2%96%93%E2%95%A0%C2%BC/"/>
      <url>/2018/01/11/nginx%E2%94%BC%CE%A3%E2%95%93%E2%94%9C%E2%95%AC%E2%96%92%E2%95%9B%E2%96%93%E2%95%A0%C2%BC/</url>
      
        <content type="html"><![CDATA[<p>nginx-fastcgi转载自[<a href="https://segmentfault.com/a/1190000002667095]" target="_blank" rel="noopener">https://segmentfault.com/a/1190000002667095]</a></p><p>nginx变量转载自[<a href="http://www.nginx.cn/273.html]" target="_blank" rel="noopener">http://www.nginx.cn/273.html]</a></p><p>ci框架配置转载自[<a href="https://www.miaoyueyue.com/archives/95.html]" target="_blank" rel="noopener">https://www.miaoyueyue.com/archives/95.html]</a></p><p>正则表达式转载自[<a href="https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1700215?fr=aladdin]" target="_blank" rel="noopener">https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1700215?fr=aladdin]</a></p><p>location转载自[<a href="http://seanlook.com/2015/05/17/nginx-location-rewrite]" target="_blank" rel="noopener">http://seanlook.com/2015/05/17/nginx-location-rewrite]</a></p><p>try_files转载自[<a href="https://www.hi-linux.com/posts/53878.html]" target="_blank" rel="noopener">https://www.hi-linux.com/posts/53878.html]</a></p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>php错误类型</title>
      <link href="/2018/01/03/php%E2%94%A4%CF%86%E2%95%AC%E2%89%A4%E2%94%94%CE%B1%E2%95%A8%E2%95%90/"/>
      <url>/2018/01/03/php%E2%94%A4%CF%86%E2%95%AC%E2%89%A4%E2%94%94%CE%B1%E2%95%A8%E2%95%90/</url>
      
        <content type="html"><![CDATA[<h2 id="对php的错误类型一直很模糊在此进行总结"><a href="#对PHP的错误类型一直很模糊，在此进行总结。" class="headerlink" title="对PHP的错误类型一直很模糊，在此进行总结。"></a>对PHP的错误类型一直很模糊，在此进行总结。</h2><h3 id="常见的错误类型"><a href="#常见的错误类型" class="headerlink" title="常见的错误类型"></a>常见的错误类型</h3><ul><li>E_DEPRECATED</li><li>E_NOTICE</li><li>E_WARNING</li><li>E_ERROR</li><li>E_PARSE</li></ul><h3 id="e_deprecated-反对"><a href="#E-DEPRECATED-反对" class="headerlink" title="E_DEPRECATED 反对"></a>E_DEPRECATED 反对</h3><p>A run-time notice indicating that the code will not work in future versions of PHP</p><h4 id="情形"><a href="#情形" class="headerlink" title="情形:"></a>情形:</h4><ul><li>mysql函数库在7.0版本移除<h3 id="e_notice-提示错误"><a href="#E-NOTICE-提示错误" class="headerlink" title="E_NOTICE 提示错误"></a>E_NOTICE 提示错误</h3>A run-time notice indicating that the script encountered something that could possibly an error, although the situation could also occur when running a script normally。<h4 id="情形"><a href="#情形-1" class="headerlink" title="情形:"></a>情形:</h4><ul><li>使用未定义的变量<h3 id="e_warning-警告"><a href="#E-WARNING-警告" class="headerlink" title="E_WARNING 警告"></a>E_WARNING 警告</h3>A run-time warning. It is non-fatal and most errors tend to fall into this category. The execution of the script is not stopped.<h4 id="情形"><a href="#情形-2" class="headerlink" title="情形:"></a>情形:</h4></li></ul></li><li>include 不存在的文件<h3 id="e_error-致命错误"><a href="#E-ERROR-致命错误" class="headerlink" title="E_ERROR 致命错误"></a>E_ERROR 致命错误</h3>A fatal run-time error, that can’t be recovered from. The execution of the script is stopped immediately.<h4 id="情形"><a href="#情形-3" class="headerlink" title="情形:"></a>情形:</h4></li><li>require一个不存在的文件</li><li>使用一个未定义的函数、类、接口<h3 id="e_parse-解析错误"><a href="#E-PARSE-解析错误" class="headerlink" title="E_PARSE 解析错误"></a>E_PARSE 解析错误</h3>The compile-time parse error. Parse errors should only be generated by the parser.<h4 id="情形"><a href="#情形-4" class="headerlink" title="情形:"></a>情形:</h4></li><li>语法错误</li></ul><hr><h3 id="捕获错误类型"><a href="#捕获错误类型" class="headerlink" title="捕获错误类型"></a>捕获错误类型</h3><blockquote><p>set_error_handler(callback[,$error_type=E_ALL|E_STRICT)<br>The following error types <strong>cannot be handled</strong> with a user defined function: <strong>E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR, E_COMPILE_WARNING</strong>, and most of E_STRICT raised in the file where set_error_handler() is called</p></blockquote><h4 id="当用户自定了捕获异常函数程序会绕过php-标准错误处理程序除非在回调函数中返回falseerror_reporting函数也会被忽略"><a href="#当用户自定了捕获异常函数，程序会绕过PHP-标准错误处理程序-除非在回调函数中返回false-error-reporting-函数也会被忽略。" class="headerlink" title="当用户自定了捕获异常函数，程序会绕过PHP 标准错误处理程序,除非在回调函数中返回false,error_reporting()函数也会被忽略。"></a>当用户自定了捕获异常函数，程序会绕过PHP 标准错误处理程序,除非在回调函数中返回false,error_reporting()函数也会被忽略。</h4><pre class="line-numbers language-php"><code class="language-php">    <span class="token function">set_error_handler</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$errno</span><span class="token punctuation">,</span><span class="token variable">$errstr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">"错误码"</span><span class="token punctuation">.</span><span class="token variable">$errno</span><span class="token punctuation">;</span>         <span class="token keyword">echo</span> <span class="token string">"错误信息"</span><span class="token punctuation">.</span><span class="token variable">$errstr</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//return false;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//发出一个notice</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注册一个脚本结束时或者程序发生一个fatal-error执行的函数"><a href="#注册一个脚本结束时或者程序发生一个fatal-error执行的函数" class="headerlink" title="注册一个脚本结束时或者程序发生一个fatal error执行的函数"></a>注册一个脚本结束时或者程序发生一个fatal error执行的函数</h4><blockquote><p>void register_shutdown_function ( callable $callback [, mixed $parameter [, mixed $… ]] )<br>可以注册多个回调函数，函数将会被依次调用</p></blockquote><pre class="line-numbers language-php"><code class="language-php">   <span class="token keyword">function</span> <span class="token function">fatal_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token function">error_get_last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//dosomethin</span>            <span class="token variable">$errno</span>   <span class="token operator">=</span> <span class="token variable">$error</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$errfile</span> <span class="token operator">=</span> <span class="token variable">$error</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$errline</span> <span class="token operator">=</span> <span class="token variable">$error</span><span class="token punctuation">[</span><span class="token string">"line"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$errstr</span>  <span class="token operator">=</span> <span class="token variable">$error</span><span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token function">register_shutdown_function</span><span class="token punctuation">(</span><span class="token string">"fatal_error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="php7中一些fatal-error也能被捕获"><a href="#PHP7中一些fatal-error也能被捕获" class="headerlink" title="PHP7中一些fatal error也能被捕获"></a>PHP7中一些fatal error也能被捕获</h3><h4 id="例如用了一个未定义的函数"><a href="#例如-用了一个未定义的函数" class="headerlink" title="例如:用了一个未定义的函数"></a>例如:用了一个未定义的函数</h4><pre class="line-numbers language-php"><code class="language-php">   <span class="token keyword">try</span><span class="token punctuation">{</span>       <span class="token function">undefinded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Error <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//Call to undefined function undefinded()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>yield 和yield from</title>
      <link href="/2018/01/02/php%20yield/"/>
      <url>/2018/01/02/php%20yield/</url>
      
        <content type="html"><![CDATA[<blockquote><p>yield中文为生产,是作为php的生成器提供了一种更容易的方法来实现简单的对象迭代，相比较定义类实现 Iterator 接口的方式，性能开销和复杂性大大降低</p></blockquote><hr><h3 id="1yield-简单使用"><a href="#1-yield-简单使用" class="headerlink" title="1.yield 简单使用"></a>1.yield 简单使用</h3><pre class="line-numbers language-php"><code class="language-php">    <span class="token comment" spellcheck="true">//方式一 该函数功能迭代10次的时间戳保存到数组中</span>    <span class="token keyword">function</span> <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token variable">$time</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> <span class="token variable">$time</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token variable">$time</span> <span class="token operator">=</span> <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$time</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$time</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">echo</span> <span class="token variable">$value</span><span class="token punctuation">.</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>             <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token variable">$test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*结果:   1514886015   1514886015   1514886015   1514886015   1514886015   1514886015   1514886015   1514886015   1514886015   1514886015*/</span>   <span class="token comment" spellcheck="true">//方式二(yield)</span>   <span class="token keyword">function</span> <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">yield</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token variable">$time</span> <span class="token operator">=</span> <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$time</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$time</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">echo</span> <span class="token variable">$value</span><span class="token punctuation">.</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>             <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token variable">$test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*结果   1514944609   1514944610   1514944611   1514944612   1514944613*/</span>   <span class="token comment" spellcheck="true">/*    *方式一函数getTime迭代数量只有十次速度很快迭代完，所有时间戳都相同，尽管sleep但是已经一次性迭代完成了，时间戳都相同。    *方式二函数getTime生成一个generator对象。在每次时间戳依次递增1，这仿佛好像是执行迭代的操作入队列，但不进行真正的操作，当对generaotr对象进行遍历的时候依次出队进行操作，获取的是此时的时间戳。    */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2yield-from"><a href="#2-yield-from" class="headerlink" title="2.yield from"></a>2.yield from</h3><blockquote><p>PHP7中，通过生成器委托（yield from），可以将其他生成器、可迭代的对象、数组委托给外层生成器。外层的生成器会先顺序 yield 委托出来的值，然后继续 yield 本身中定义的值。</p></blockquote><pre class="line-numbers language-php"><code class="language-php">  <span class="token keyword">function</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">yield</span> <span class="token variable">$i</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">getNumber2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">yield</span> <span class="token variable">$i</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">getNumber3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">yield</span> from <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">yield</span> <span class="token variable">$i</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token keyword">function</span> <span class="token function">getNumber4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">yield</span> <span class="token variable">$i</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">yield</span> from <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token string">"一般生成器:"</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token function">getNumber2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$value</span><span class="token punctuation">.</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"委托给其他生成器:"</span><span class="token punctuation">;</span>     <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token function">getNumber3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$value</span><span class="token punctuation">.</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"委托给其他生成器:"</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token function">getNumber4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$value</span><span class="token punctuation">.</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     *一般生成器:6 7 8 9 10     * 委托给其他生成器:1 2 3 4 5 6 7 8 9 10     * 委托给其他生成器:6 7 8 9 10 1 2 3 4 5     */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3yield-与返回值"><a href="#3-yield-与返回值" class="headerlink" title="3.yield 与返回值"></a>3.yield 与返回值</h3><blockquote><p>如果生成器被迭代完成，或者运行到 return 关键字，是会给这个生成器返回值的</p></blockquote><pre class="line-numbers language-php"><code class="language-php">    <span class="token keyword">function</span> <span class="token function">yieldReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">yield</span> <span class="token variable">$i</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"生成器迭代完成了"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token function">yieldReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$value</span><span class="token punctuation">.</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*结果     * 1     * 2     * 3     * 4     * 5     * 生成器迭代完成了     */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>canvas渐变</title>
      <link href="/2017/12/10/canvas%E2%95%9C%C3%91%E2%96%92%CE%A3/"/>
      <url>/2017/12/10/canvas%E2%95%9C%C3%91%E2%96%92%CE%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="canvas渐变学习"><a href="#canvas渐变学习" class="headerlink" title="canvas渐变学习"></a>canvas渐变学习</h1><p>2017年12月10日 by jianglong1992</p><hr><h2 id="线性渐变lineargradient"><a href="#线性渐变linearGradient" class="headerlink" title="线性渐变linearGradient"></a>线性渐变linearGradient</h2><blockquote><p>放射性渐变县会用重点颜色填充画布以外的其他区域</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//占据画布的一条垂直渐变线,0,canvas.height 代表一条垂线</span>    linearGradient <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createLinearGradient</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    lineGradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lineGradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token string">'white'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lineGradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token string">'purple'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lineGradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0.75</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lineGradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> lineGradient<span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="!--￼0--" alt="下载.png"></p><pre><code>     //水平渐变线    linearGradient = context.createLinearGradient(0,0,canvas.width,0);    同上</code></pre><p><img src="!--￼1--" alt="下载 (1).png"></p><h2 id="放射性渐变线radiagradient"><a href="#放射性渐变线radiaGradient" class="headerlink" title="放射性渐变线radiaGradient"></a>放射性渐变线radiaGradient</h2><blockquote><p>放射性渐变线不会填充以外的空白区域</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> radialGradient <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createRadialGradient</span><span class="token punctuation">(</span>        canvas<span class="token punctuation">.</span>width<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">,</span>canvas<span class="token punctuation">.</span>height<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>        canvas<span class="token punctuation">.</span>width<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">90</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    radialGradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    radialGradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token string">'white'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    radialGradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token string">'purple'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    radialGradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0.75</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    radialGradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> radialGradient<span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="!--￼2--" alt="下载 (2).png"></p>]]></content>
      
      
      <categories>
          
          <category> canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux sed使用</title>
      <link href="/2017/12/06/linux%20sed%E2%95%A9%E2%95%A3%E2%95%99%E2%94%9C/"/>
      <url>/2017/12/06/linux%20sed%E2%95%A9%E2%95%A3%E2%95%99%E2%94%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="文本替换程序流替换工具sedstream-editor"><a href="#文本替换程序——流替换工具sed-stream-editor" class="headerlink" title="文本替换程序——流替换工具sed(stream editor)"></a>文本替换程序——流替换工具sed(stream editor)</h1><h3 id="1-替换第一个-所有-第n个"><a href="#1-替换第一个、所有、第N个" class="headerlink" title="1. 替换第一个、所有、第N个"></a>1. 替换第一个、所有、第N个</h3><pre class="line-numbers language-bash"><code class="language-bash">    text<span class="token operator">=</span><span class="token string">"wo shi zhangsan zhangsan zhangsan"</span>    <span class="token comment" spellcheck="true">#1.默认替换第一个 s/regular/replace</span>    <span class="token keyword">echo</span> <span class="token variable">$text</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/zhangsan/lisi/'</span>    <span class="token comment" spellcheck="true">#wo shi lisi zhangsan zhangsan</span>    <span class="token comment" spellcheck="true">#2.替换所有 g s/regular/replace/g</span>    <span class="token keyword">echo</span> <span class="token variable">$text</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/zhangsan/lisi/g'</span>    <span class="token comment" spellcheck="true">#wo shi lisi lisi lisi</span>    <span class="token comment" spellcheck="true">#3.替换某一个n s/regular/repalce/n</span>    <span class="token keyword">echo</span> <span class="token variable">$text</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/zhangsan/lisi/2'</span>    <span class="token comment" spellcheck="true">#wo shi zhangsan lisi zhangsan</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2打印替换指定行-n-p"><a href="#2-打印，替换指定行-n-p" class="headerlink" title="2.打印，替换指定行-n p"></a>2.打印，替换指定行-n p</h3><pre><code> text=&quot;wo shi zhangsan lisi\r       wo shi zhangsan lance\r       wo shi lisi     lance\r       wo shi zhangsan lisi wangwu&quot;</code></pre><p>   1.打印含有zhangsan的行</p><img src="/2017/12/06/linux%20sed╩╣╙├/4290442876.png"><p>   2.打印含有zhangsan或lisi的行</p><img src="/2017/12/06/linux%20sed╩╣╙├/2996910287.png"><p>   3.打印指定行</p><img src="/2017/12/06/linux%20sed╩╣╙├/783257003.png"><p>   4.替换某存在某个表达式，或不存在某个表达式的行</p><img src="/2017/12/06/linux%20sed╩╣╙├/2409106627.png"><p>   5.替换某几行</p><img src="/2017/12/06/linux%20sed╩╣╙├/2409106627.png"><p>   6.替换符合要求的几行(存在张三或李四)</p>   <img src="/2017/12/06/linux%20sed╩╣╙├/2347006550.png"><p>   7.多个正则选项命令e<br>    sed -e option1 -e option  file<br>   8.执行正则选项文件<br>    sed -f optionfile file<br>    optionfile<br>        option1<br>        option2<br>        …<br>   9.使用标准输入-,用于测试特别有用<br>    sed option -</p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
