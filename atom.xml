<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>远方</title>
  
  <subtitle>远方在比远方更远的地方</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jl.js.org/"/>
  <updated>2020-04-06T08:28:11.495Z</updated>
  <id>http://jl.js.org/</id>
  
  <author>
    <name>crusj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis笔记</title>
    <link href="http://jl.js.org/2020/04/06/redis%E7%AC%94%E8%AE%B0/"/>
    <id>http://jl.js.org/2020/04/06/redis笔记/</id>
    <published>2020-04-06T07:53:38.000Z</published>
    <updated>2020-04-06T08:28:11.495Z</updated>
    
    <content type="html"><![CDATA[<p>redis常见知识点整理<br><a id="more"></a></p><h3 id="redis基本数据类型"><a href="#redis基本数据类型" class="headerlink" title="redis基本数据类型"></a>redis基本数据类型</h3><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><ul><li><code>set key value</code>、set will replace the exists key、max value 512M，<code>set key value nx</code>,设置key,且key不存在,<code>set key value xx</code>设置key,且key存在</li><li><code>get key</code> </li><li>自增<code>incr key</code>,自增定义步长<code>incrby key  step</code></li><li>自减<code>decr key</code>,自减定义步长<code>decrby key  step</code></li><li>INCR is atomic， never race condition</li><li>设置多个值<code>mset key1 value key2 value</code></li><li>获取多个值<code>mget key1 key2</code></li><li>判断值是否存在<code>exists key</code>，return 1|0</li><li>删除值<code>del key</code></li><li>值类型<code>type key</code></li><li>设置过期时间 <code>set key value ex second</code>、<code>expire key second</code></li><li>查看剩余存活时间<code>ttl key</code></li></ul><h4 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h4><ul><li>设置单个值<code>hset key field value</code></li><li>设置多个值<code>hmset key field value field value</code></li><li>获取单个值<code>hget key field</code></li><li>获取多个值 <code>hmget key field1 field2</code></li><li>field是否存在<code>hexists key field</code></li><li>获取所有 <code>hgetall key</code></li><li>获取所有field<code>hkeys key</code></li><li>获取field数量<code>hlen key</code></li><li>删除值<code>hdel key field1 [field2]</code></li><li>自增<code>hincrby key field step</code></li></ul><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><blockquote><p> Redis lists are implemented via Linked Lists</p></blockquote><ul><li>左边插入<code>lpush key value</code>,多值插入<code>lpush key value1 value2</code></li><li>右边插入<code>rpush key value</code>,多值插入<code>rpush key value1 value2</code></li><li>根据index获取值 <code>lindex key index</code></li><li>范围查找<code>lrange start end</code> start从0开始,end为-1代表最后一个元素，-2代表倒数第二个元素</li><li>pop element <code>lpop key</code> 、<code>rpop key</code></li><li>列表长度<code>llen key</code></li><li>根据index设置值<code>lset key index value</code></li><li>可以通过lpush的方式来保存一些最新的信息，提高访问速度</li><li>修剪长度<code>ltrim key start end</code></li><li>pop阻塞<code>brpop key timeout</code>、<code>blpop key timeout</code>， use 0 as timeout is forever</li><li>删除列表 <code>del key</code></li></ul><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><blockquote><p>集合其实就是一个value为null的hash表</p></blockquote><ul><li>设置集合<code>sadd key value [value...]</code></li><li>查看集合<code>smember key</code></li><li>是否集合成员<code>sismember key value</code></li><li>获取集合成员数<code>scard key</code></li><li>集合差集<code>sdiff key1 key2</code></li><li>集合交集<code>sinter key1 key2</code></li><li>返回多个集合的并集<code>sunion key1 [key2]</code></li><li>移除集合中的一个随机成员<code>spop key</code></li><li>获取集合中一个或多个集合成员<code>srandmember key [count]</code></li><li>移除集合中一个或多个成员<code>srem key member1 [member2]</code></li></ul><h4 id="sort-set"><a href="#sort-set" class="headerlink" title="sort set"></a>sort set</h4><ul><li>相比集合多了一个score,指向集合的值</li></ul><h3 id="redis-server"><a href="#redis-server" class="headerlink" title="redis-server"></a>redis-server</h3><ul><li>启动指定配置配件<code>redis-server ./redis.conf&amp;</code></li></ul><h3 id="redis-cli操作"><a href="#redis-cli操作" class="headerlink" title="redis-cli操作"></a>redis-cli操作</h3><ul><li>查看配置信息<code>config get [pattern]</code>,例如查看dir目录<code>config get dir</code>、查看所有配置<code>config get *</code></li><li>查看某个key<code>keys [pattren]</code>,查看所有keys<code>keys *</code></li><li>保存数据到磁盘,<code>bgsave</code>会fork一个子进程后台保存数据到磁盘、<code>save</code>直接保存</li><li>查看主从信息,<code>info replication</code></li></ul><h3 id="redis主从"><a href="#redis主从" class="headerlink" title="redis主从"></a>redis主从</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>每次slave发送sync命令到master,master运行bgsave保存数据到文件,并记录这段时间的命令，然后把文件和命令发送给slave,slave抛弃以前数据进行恢复,这是slave只能读</p><h4 id="主服务器"><a href="#主服务器" class="headerlink" title="主服务器"></a>主服务器</h4><p>设置权限验证<code>masterauth 123456</code></p><h4 id="从服务器"><a href="#从服务器" class="headerlink" title="从服务器"></a>从服务器</h4><ul><li>redis slave <code>slaveof ip port</code>,</li><li>如果master设置了权限<code>masterauth 123456</code></li></ul><h3 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h3><h4 id="aof"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>将每条命令写到文件，redis启动时执行这些命令,默认关闭,如果开启redis会优先加载aof文件</p><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><pre><code>appendonly yesappendfsync always|eversec|no</code></pre><p>always,每个命令立即保存<br>eversec,每秒保存<br>no,操作系统自己控制</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>文件臃肿,恢复效率慢</p><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p>数据持久化更安全</p><h4 id="rdb快照"><a href="#RDB快照" class="headerlink" title="RDB快照"></a>RDB快照</h4><h5 id="简介"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h5><p>保存某个时间节点的快早</p><h5 id="配置"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h5><pre><code>save &lt;second&gt; &lt;changes&gt;</code></pre><p>每过多少秒至少有多少个改动则保存快照</p><h5 id="缺点"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><p>一段时间内丢失</p><h5 id="优点"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><p>数据精简，恢复快</p><h3 id="redis数据淘汰机制"><a href="#redis数据淘汰机制" class="headerlink" title="redis数据淘汰机制"></a>redis数据淘汰机制</h3><h4 id="内存设置"><a href="#内存设置" class="headerlink" title="内存设置"></a>内存设置</h4><p><code>maxmemory 100mb</code></p><h4 id="淘汰策略"><a href="#淘汰策略" class="headerlink" title="淘汰策略"></a>淘汰策略</h4><p><code>maxmemory-policy noeviction</code></p><ul><li>noeviction:默认策略，不淘汰，如果内存已满，添加数据是报错。 </li><li>allkeys-lru:在所有键中，选取最近最少使用的数据抛弃。 </li><li>volatile-lru:在设置了过期时间的所有键中，选取最近最少使用的数据抛弃。 </li><li>allkeys-random: 在所有键中，随机抛弃。 </li><li>volatile-random: 在设置了过期时间的所有键，随机抛弃。 </li><li>volatile-ttl:在设置了过期时间的所有键，抛弃存活时间最短的数据。</li></ul><h3 id="一些场景"><a href="#一些场景" class="headerlink" title="一些场景"></a>一些场景</h3><h4 id="redis实现锁"><a href="#redis实现锁" class="headerlink" title="redis实现锁"></a>redis实现锁</h4><p>1）SETNX命令（SET if Not eXists）</p><p>语法：SETNX key value</p><p>功能：当且仅当 key 不存在，将 key 的值设为 value ，并返回1；若给定的 key 已经存在，则 SETNX 不做任何动作，并返回0。</p><p>2）expire命令</p><p>语法：expire KEY seconds </p><p>功能：设置key的过期时间。如果key已过期，将会被自动删除。</p><p>3）DEL命令</p><p>语法：DEL key [KEY …]</p><p>功能：删除给定的一个或多个 key ,不存在的 key 会被忽略</p><h4 id="利用set查重"><a href="#利用set查重" class="headerlink" title="利用set查重"></a>利用set查重</h4><h4 id="利用list实现队列"><a href="#利用list实现队列" class="headerlink" title="利用list实现队列"></a>利用list实现队列</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;redis常见知识点整理&lt;br&gt;
    
    </summary>
    
      <category term="redis笔记" scheme="http://jl.js.org/categories/redis%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="redis 面试" scheme="http://jl.js.org/tags/redis-%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>三角形最小路径和</title>
    <link href="http://jl.js.org/2020/04/06/%E4%B8%89%E8%A7%92%E5%BD%A2%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/"/>
    <id>http://jl.js.org/2020/04/06/三角形最小路径和/</id>
    <published>2020-04-06T04:15:43.000Z</published>
    <updated>2020-04-06T04:20:03.514Z</updated>
    
    <content type="html"><![CDATA[<p>经典动态规划：三角形最小路径和<br><a id="more"></a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。</p><p>例如，给定三角形：</p><pre><code>[     [2],    [3,4],   [6,5,7],  [4,1,8,3]]</code></pre><p>自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><strong>最优子结构</strong><br>从上至下每个点的最小路径和为当前点+min(相邻行左点最小路径和,相邻行右点的最小路径和)</p><p><strong>状态变化</strong><br>行数n的变化,以及当前行点索引的变化</p><p><strong>状态转移方程</strong><br> dp(n,index) = a[n-1][index] + min(dp(n+1,index), dp(n+1,index+1))</p><p><strong>base问题</strong><br>n = 层数，最小值为当前行索引值</p><p><strong>重叠子问题</strong><br>某行某个点的最小路径和</p><h3 id="php版本"><a href="#php版本" class="headerlink" title="php版本"></a>php版本</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$table</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$floor</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @param Integer[][] $triangle     * @return Integer     */</span>    <span class="token keyword">function</span> <span class="token function">minimumTotal</span><span class="token punctuation">(</span><span class="token variable">$triangle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">floor</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$triangle</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从第一层,索引为0开始</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">minimumTotal2</span><span class="token punctuation">(</span><span class="token variable">$triangle</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * n层数，index层索引     **/</span>    <span class="token keyword">function</span> <span class="token function">minimumTotal2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$triangle</span><span class="token punctuation">,</span><span class="token variable">$n</span><span class="token punctuation">,</span><span class="token variable">$index</span><span class="token punctuation">)</span><span class="token punctuation">:</span> int<span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">==</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">floor</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$triangle</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$index</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//重叠子问题</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$index</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$index</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">minimumTotal2</span><span class="token punctuation">(</span><span class="token variable">$triangle</span><span class="token punctuation">,</span><span class="token variable">$n</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$index</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$index</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$index</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$index</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">minimumTotal2</span><span class="token punctuation">(</span><span class="token variable">$triangle</span><span class="token punctuation">,</span><span class="token variable">$n</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$index</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$index</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$min</span> <span class="token operator">=</span> <span class="token variable">$a</span> <span class="token operator">></span> <span class="token variable">$b</span> <span class="token operator">?</span> <span class="token variable">$b</span><span class="token punctuation">:</span> <span class="token variable">$a</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//当前行点加上最小值</span>        <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token variable">$triangle</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$index</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token variable">$min</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$ret</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//最优子结构</span><span class="token comment" spellcheck="true">//从上至下每个点的最小路径和为当前点+min(相邻行左点最小路径和,相邻行右点的最小路径和)</span><span class="token comment" spellcheck="true">//状态变化</span><span class="token comment" spellcheck="true">//行数n的变化,以及当前行点索引的变化</span><span class="token comment" spellcheck="true">//状态转移方程</span><span class="token comment" spellcheck="true">// dp(n,index) = a[n-1][index] + min(dp(n+1,index), dp(n+1,index+1))</span><span class="token comment" spellcheck="true">//base问题</span><span class="token comment" spellcheck="true">//n = 层数，最小值为当前行索引值</span><span class="token comment" spellcheck="true">//重叠子问题</span><span class="token comment" spellcheck="true">//某行某个点的最小路径和</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="golang版本"><a href="#golang版本" class="headerlink" title="golang版本"></a>golang版本</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">minimumTotal</span><span class="token punctuation">(</span>triangle <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>     dp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>triangle<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">for</span> i<span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token keyword">range</span> triangle <span class="token punctuation">{</span>         dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>triangle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>     triangleIndex <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>triangle<span class="token punctuation">)</span><span class="token punctuation">)</span>     triangleIndexLen <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>triangle<span class="token punctuation">)</span>     <span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token operator">:=</span> <span class="token keyword">range</span> triangle <span class="token punctuation">{</span>         triangleIndex<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">Step</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> triangle<span class="token punctuation">,</span>triangleIndex<span class="token punctuation">,</span><span class="token operator">&amp;</span>triangleIndexLen<span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Step</span><span class="token punctuation">(</span>row <span class="token builtin">int</span><span class="token punctuation">,</span> col <span class="token builtin">int</span><span class="token punctuation">,</span> triangle <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span>triangleIndex <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span>triangleIndexLen <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">,</span> dp <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token operator">*</span>triangleIndexLen <span class="token operator">==</span> row <span class="token operator">||</span> triangleIndex<span class="token punctuation">[</span>row<span class="token punctuation">]</span> <span class="token operator">==</span> col <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span>  dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    a <span class="token operator">:=</span> <span class="token function">Step</span><span class="token punctuation">(</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> col<span class="token punctuation">,</span> triangle<span class="token punctuation">,</span>triangleIndex<span class="token punctuation">,</span>triangleIndexLen<span class="token punctuation">,</span>dp<span class="token punctuation">)</span>    b <span class="token operator">:=</span> <span class="token function">Step</span><span class="token punctuation">(</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> col<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> triangle<span class="token punctuation">,</span>triangleIndex<span class="token punctuation">,</span>triangleIndexLen<span class="token punctuation">,</span> dp<span class="token punctuation">)</span>    <span class="token keyword">if</span> a <span class="token operator">></span> b <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> b <span class="token operator">+</span> triangle<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> a <span class="token operator">+</span> triangle<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经典动态规划：三角形最小路径和&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://jl.js.org/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="动态规划" scheme="http://jl.js.org/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>打家劫舍</title>
    <link href="http://jl.js.org/2020/04/06/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/"/>
    <id>http://jl.js.org/2020/04/06/打家劫舍/</id>
    <published>2020-04-06T02:51:38.000Z</published>
    <updated>2020-04-06T03:22:08.573Z</updated>
    
    <content type="html"><![CDATA[<p>经典动态规划：打家劫舍<br><a id="more"></a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p><p>示例 1:</p><p>输入: [1,2,3,1]<br>输出: 4<br>解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。<br>     偷窃到的最高金额 = 1 + 3 = 4 。<br>示例 2:</p><p>输入: [2,7,9,3,1]<br>输出: 12<br>解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。<br>     偷窃到的最高金额 = 2 + 9 + 1 = 12 </p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>第n间房子要么偷，要么不偷<br>如果偷第n间房子，最大金额=第n间房子金额+第n-2间房子以前所有房子的最大金额<br>如果不偷第n间房子，最大金额=n-1间房子以前能偷房子的最大金额</p><p><strong>最优子结构：</strong> 非相邻房子金额的最大值<br><strong>状态变化：</strong> 房子的数量<br><strong>状态转移方程：</strong> dp(n) = max(a[n-1] + dp(n-2), dp(n-1)) n&gt;=0<br><strong>base条件：</strong> n=0为0，n=1为a[0]<br><strong>重叠子问题：</strong> 需要前n间房能偷得最大金额表</p><h3 id="php版本"><a href="#php版本" class="headerlink" title="php版本"></a>php版本</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$table</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * @param Integer[] $nums     * @return Integer     */</span>    <span class="token keyword">function</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token variable">$nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">steal</span><span class="token punctuation">(</span><span class="token variable">$nums</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$nums</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">steal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$nums</span><span class="token punctuation">,</span><span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">:</span> int<span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$nums</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//重叠子问题</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$max</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$max</span> <span class="token operator">=</span> <span class="token variable">$nums</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">steal</span><span class="token punctuation">(</span><span class="token variable">$nums</span><span class="token punctuation">,</span><span class="token variable">$n</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$max</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$max2</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$max2</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">steal</span><span class="token punctuation">(</span><span class="token variable">$nums</span><span class="token punctuation">,</span> <span class="token variable">$n</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$max2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$max</span> <span class="token operator">></span> <span class="token variable">$max2</span> <span class="token operator">?</span> <span class="token variable">$max</span><span class="token punctuation">:</span> <span class="token variable">$max2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="golang版本"><a href="#golang版本" class="headerlink" title="golang版本"></a>golang版本</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> table <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">func</span> <span class="token function">rob</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    table <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">steal</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">steal</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> max1<span class="token punctuation">,</span>max2 <span class="token builtin">int</span>    <span class="token keyword">if</span> v<span class="token punctuation">,</span>exist <span class="token operator">:=</span> table<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>exist <span class="token punctuation">{</span>        max1 <span class="token operator">=</span> v    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        max1 <span class="token operator">=</span> nums<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">steal</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>n<span class="token number">-2</span><span class="token punctuation">)</span>        table<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> max1    <span class="token punctuation">}</span>    <span class="token keyword">if</span> v<span class="token punctuation">,</span>exist <span class="token operator">:=</span> table<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>exist <span class="token punctuation">{</span>        max2 <span class="token operator">=</span> v    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        max2 <span class="token operator">=</span> <span class="token function">steal</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">)</span>        table<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> max2    <span class="token punctuation">}</span>    <span class="token keyword">if</span> max1 <span class="token operator">&lt;</span> max2 <span class="token punctuation">{</span>        <span class="token keyword">return</span> max2    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> max1    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经典动态规划：打家劫舍&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://jl.js.org/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="动态规划" scheme="http://jl.js.org/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>golang函数参数传值，传指针以及传引用</title>
    <link href="http://jl.js.org/2020/04/05/golang%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E5%80%BC%EF%BC%8C%E4%BC%A0%E6%8C%87%E9%92%88%E4%BB%A5%E5%8F%8A%E4%BC%A0%E5%BC%95%E7%94%A8/"/>
    <id>http://jl.js.org/2020/04/05/golang函数参数传值，传指针以及传引用/</id>
    <published>2020-04-05T05:23:32.000Z</published>
    <updated>2020-04-05T05:27:43.148Z</updated>
    
    <content type="html"><![CDATA[<p>golang函数参数传值，传指针以及传引用区别<br><a id="more"></a></p><h3 id="三种参数传递方式的区别"><a href="#三种参数传递方式的区别" class="headerlink" title="三种参数传递方式的区别"></a>三种参数传递方式的区别</h3><h4 id="传值"><a href="#传值" class="headerlink" title="传值"></a>传值</h4><p>函数参数传值，会栈中创建传递变量的副本，对此副本的任何操作都不会影响被传递变量本身</p><h4 id="传指针"><a href="#传指针" class="headerlink" title="传指针"></a>传指针</h4><p>指针是一种特殊变量,指针变量存的值是指向变量的地址,对指针的操作都会影响到被传递指针变量指向的值,改变指针指向(值),并不影响原指向</p><h4 id="传引用"><a href="#传引用" class="headerlink" title="传引用"></a>传引用</h4><p>引用与指针不同,指针的值为指向变量地址,c++中传引用相当于符号表中的别名,因此对应用变量的操作会直接作用于被传递变量</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="传值"><a href="#传值-1" class="headerlink" title="传值"></a>传值</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> <span class="token number">1</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"变量a的值为%v\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"变量a的地址为:%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span>    <span class="token function">increment</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"传参后变量a的值为%v\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">increment</span><span class="token punctuation">(</span>b <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"函数内变量b的地址为:%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span>    b <span class="token operator">++</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//结果,参数b变量的地址是与a变量不同,为a变量的副本</span>变量a的值为<span class="token number">1</span>变量a的地址为<span class="token punctuation">:</span><span class="token number">0xc0000160a8</span>函数内变量b的地址为<span class="token punctuation">:</span><span class="token number">0xc0000160c8</span>传参后变量a的值为<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="传指针"><a href="#传指针-1" class="headerlink" title="传指针"></a>传指针</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> <span class="token number">1</span>    b <span class="token operator">:=</span> <span class="token operator">&amp;</span>a     fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"变量a的值为%v\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"变量a的地址为%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"指针b指向地址为:%v\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"指针b地址为:%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span>    <span class="token function">increment</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"传参后变量a的值为%v\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"传参后指针b的值为%p\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">increment</span><span class="token punctuation">(</span>b <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"函数内指针b的指向为:%p\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"函数内指针b的地址为:%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span>    <span class="token operator">*</span>b <span class="token operator">++</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"函数内*b的地址为:%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//结果,在函数中指针b的地址与传入指针b的地址不同，但都指向变量a的地址，表示函数传指针会在栈中对参数指针创建一个指向相同地址的副本,所以在最后把b指向nil后，原传入的指针依旧不变</span>变量a的值为<span class="token number">1</span>变量a的地址为<span class="token number">0xc00008e010</span>指针b指向地址为<span class="token punctuation">:</span><span class="token number">0xc00008e010</span>指针b地址为<span class="token punctuation">:</span><span class="token number">0xc000098018</span>函数内指针b的指向为<span class="token punctuation">:</span><span class="token number">0xc00008e010</span>函数内指针b的地址为<span class="token punctuation">:</span><span class="token number">0xc000098028</span>函数内<span class="token operator">*</span>b的地址为<span class="token punctuation">:</span><span class="token number">0xc00008e010</span>传参后变量a的值为<span class="token number">2</span>传参后指针b的值为<span class="token number">0xc00008e010</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="传引用"><a href="#传引用-1" class="headerlink" title="传引用"></a>传引用</h4><p>golang不存在传引用,php存在,但php的引用不同于c++是符号表别名,php引用是多个名字指向同一个变量</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$a</span> <span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">"变量a值为"</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"传引用变量a值为"</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"函数内删除变量a,a值为"</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果,php函数内unset($a),只是切断了对变量a的绑定,所以被传参$a仍旧存在</span>变量a值为<span class="token number">1</span>传引用变量a值为<span class="token number">2</span>函数内删除变量a<span class="token punctuation">,</span>a值为<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>golang函数参数不存在传引用，函数参数传值和传指针都会在函数体内创建,对应变量或指针变量的副本,对函数内传递指针变量而言，只会修改其指向变量的值，如果改变指针变量指向，并不会影响被传入指针的指向</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;golang函数参数传值，传指针以及传引用区别&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://jl.js.org/categories/golang/"/>
    
    
      <category term="golang" scheme="http://jl.js.org/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>php文件锁或redis实现高并发秒杀</title>
    <link href="http://jl.js.org/2020/04/05/php%E6%96%87%E4%BB%B6%E9%94%81%E6%88%96redis%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80/"/>
    <id>http://jl.js.org/2020/04/05/php文件锁或redis实现高并发秒杀/</id>
    <published>2020-04-05T05:14:45.000Z</published>
    <updated>2020-04-05T05:24:05.455Z</updated>
    
    <content type="html"><![CDATA[<p>php文件锁或redis实现高并发秒杀<br><a id="more"></a></p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul><li>redis,redis-cli</li><li>php7以及redis扩展,swoole扩展</li><li>并发测试工具ab(ApacheBench)</li></ul><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>某型号笔记本电脑限卖10台,进行秒杀</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="php文件锁实现"><a href="#php文件锁实现" class="headerlink" title="php文件锁实现"></a>php文件锁实现</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$http</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">swoole_http_server</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$max</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token variable">$http</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>swoole_http_request <span class="token variable">$request</span><span class="token punctuation">,</span> swoole_http_response <span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//随机数模拟用户ID</span>   <span class="token variable">$userId</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span><span class="token punctuation">.</span><span class="token string">'/lock'</span><span class="token punctuation">,</span><span class="token string">'w+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">flock</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">,</span><span class="token constant">LOCK_EX</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//排它锁</span>       <span class="token variable">$redisInstance</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">llen</span><span class="token punctuation">(</span><span class="token string">'usersId'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">echo</span> <span class="token string">"秒杀已结束\n"</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>           <span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">'usersId'</span><span class="token punctuation">,</span><span class="token variable">$userId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token function">flock</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">,</span><span class="token constant">LOCK_UN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//解锁</span>       <span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$http</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h4><img src="/2020/04/05/php文件锁或redis实现高并发秒杀/flock-ab.png"><img src="/2020/04/05/php文件锁或redis实现高并发秒杀/flock-redis.png"><p>截图中,列表usersId长度为10与秒杀限卖数量相同</p><h3 id="redis实现"><a href="#redis实现" class="headerlink" title="redis实现"></a>redis实现</h3><p>利用redis操作的原子性也可以达到同样的效果,本例中使用自减的方式,也可以使用自增或者预先存放秒杀数量的list,然后进行lpop的方式</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$http</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">swoole_http_server</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$redisInstance</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token string">'6379'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'max'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//秒杀最大数量</span><span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$http</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>swoole_http_request <span class="token variable">$request</span><span class="token punctuation">,</span> swoole_http_response <span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token variable">$redisInstance</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token string">'6379'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//随机数模拟用户ID</span>   <span class="token variable">$userId</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$remain</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">decr</span><span class="token punctuation">(</span><span class="token string">'max'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自减</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$remain</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">'usersId'</span><span class="token punctuation">,</span><span class="token variable">$userId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>       <span class="token keyword">echo</span> <span class="token string">"秒杀已结束\n"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$http</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="截图"><a href="#截图-1" class="headerlink" title="截图"></a>截图</h4><img src="/2020/04/05/php文件锁或redis实现高并发秒杀/redis-ab.png"><img src="/2020/04/05/php文件锁或redis实现高并发秒杀/redis-redis.png"><p>截图中,列表usersId长度为10与秒杀限卖数量相同,max自减为-47430,一个发送了47440个请求,只有10个请求有效</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p><strong>进行秒杀数量判断的时候,条件必须是经过redis操作后改变的值,否则并发下判断条件无法正确判断,如下</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$http</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">swoole_http_server</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$redisInstance</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token string">'6379'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'max'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//秒杀最大数量</span><span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$http</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>swoole_http_request <span class="token variable">$request</span><span class="token punctuation">,</span> swoole_http_response <span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token variable">$redisInstance</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token string">'6379'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//随机数模拟用户ID</span>   <span class="token variable">$userId</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$remain</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'max'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$remain</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//不能使用这种方式,并发情况下$remain在完成lpush并进行decr以前,存在同时满足条件的情况</span>       <span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">'usersId'</span><span class="token punctuation">,</span><span class="token variable">$userId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>       <span class="token keyword">echo</span> <span class="token string">"秒杀已结束\n"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">decr</span><span class="token punctuation">(</span><span class="token string">'max'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$redisInstance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$http</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;php文件锁或redis实现高并发秒杀&lt;br&gt;
    
    </summary>
    
      <category term="php" scheme="http://jl.js.org/categories/php/"/>
    
    
      <category term="php" scheme="http://jl.js.org/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>买卖股票最佳时机</title>
    <link href="http://jl.js.org/2020/04/05/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/"/>
    <id>http://jl.js.org/2020/04/05/买卖股票最佳时机/</id>
    <published>2020-04-05T04:36:28.000Z</published>
    <updated>2020-04-05T05:03:33.953Z</updated>
    
    <content type="html"><![CDATA[<p>买卖股票的最佳时机<br><a id="more"></a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p><p>如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。</p><p>注意：你不能在买入股票前卖出股票。</p><p>示例 1:</p><p>输入: [7,1,5,3,6,4]<br>输出: 5<br>解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。<br>     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。<br>示例 2:</p><p>输入: [7,6,4,3,1]<br>输出: 0<br>解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>数组有N个数,那么一种可能为第N个数与前面N-1个数中最小值的差值，当N为N-1时，另一种可能为第N-1个数与前面N-2个数中最小的差值<br>依次类推，穷举从N到第一个数分别于他们前面数组中最小值得差值，然后找出所有差值中的最大值，如果最大值小于则不买入股票利润为0</p><p><strong>最优子结构为,第N个数与前N-1个数最小值的差值</strong><br><strong>状态变化为N</strong><br><strong>方程为 dp(n) = max(a[n] - min(m),dp(n-1)) m∈[1,n-1]</strong><br><strong>base条件:数组长度小于等于1返回0</strong><br>问题：当数组过大，内存问题php无法使用函数计算前N-1个数的最小值，预先只需要通过遍历比较当前位数的值与前N个数中的最小值，存储一个前n位数的最小值的hash表</p><h3 id="php版本"><a href="#php版本" class="headerlink" title="php版本"></a>php版本</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$minHash</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$isMinHash</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @param Integer[] $prices     * @return Integer     */</span>    <span class="token keyword">function</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$prices</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">isMinHash</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMinHash</span><span class="token punctuation">(</span><span class="token variable">$prices</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">faker</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$prices</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$prices</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">faker</span><span class="token punctuation">(</span><span class="token variable">$len</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token variable">$prices</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$len</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">max</span><span class="token punctuation">(</span><span class="token variable">$prices</span><span class="token punctuation">[</span><span class="token variable">$len</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">minHash</span><span class="token punctuation">[</span><span class="token variable">$len</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">faker</span><span class="token punctuation">(</span><span class="token variable">$len</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$prices</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$max</span> <span class="token operator">=</span> <span class="token variable">$a</span> <span class="token operator">></span> <span class="token variable">$b</span> <span class="token operator">?</span> <span class="token variable">$a</span> <span class="token punctuation">:</span> <span class="token variable">$b</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$max</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token variable">$max</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">setMinHash</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$prices</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">minHash</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$prices</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$prices</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$prices</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token markup">&lt; $this-></span>minHash<span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">minHash</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$prices</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">minHash</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">minHash</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">isMinHash</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="golang版本"><a href="#golang版本" class="headerlink" title="golang版本"></a>golang版本</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> minMap <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">func</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>prices <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token function">setMinMap</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">faker</span><span class="token punctuation">(</span>prices<span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">faker</span><span class="token punctuation">(</span>prices <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> digo <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> digo <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> digo <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span>        max <span class="token operator">:=</span> prices<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> max <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>            max <span class="token operator">=</span> <span class="token number">0</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max    <span class="token punctuation">}</span>    max <span class="token operator">:=</span>  prices<span class="token punctuation">[</span>digo <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> minMap<span class="token punctuation">[</span>digo <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span>    tmp <span class="token operator">:=</span> <span class="token function">faker</span><span class="token punctuation">(</span>prices<span class="token punctuation">,</span> digo <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> max <span class="token operator">&lt;</span> tmp <span class="token punctuation">{</span>        max <span class="token operator">=</span> tmp    <span class="token punctuation">}</span>    <span class="token keyword">if</span> max <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>        max <span class="token operator">=</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> max<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">setMinMap</span><span class="token punctuation">(</span>prices <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    minMap <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    minMap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> minMap<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>            minMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> minMap<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            minMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;买卖股票的最佳时机&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://jl.js.org/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="动态规划" scheme="http://jl.js.org/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>linux大文件分割与恢复</title>
    <link href="http://jl.js.org/2019/04/24/linux%E5%A4%A7%E6%96%87%E4%BB%B6%E5%88%86%E5%89%B2/"/>
    <id>http://jl.js.org/2019/04/24/linux大文件分割/</id>
    <published>2019-04-24T08:51:51.000Z</published>
    <updated>2019-04-24T09:04:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>linux利用split命令进行大文件分割为有序后缀的小文件,利用cat命令进行文件恢复<br><a id="more"></a></p><h4 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h4><p>假如存在大文件100G move.avi,执行如下命令</p><pre class="line-numbers language-shell"><code class="language-shell">    split -b 50G -d -a 3 move.avi move.avi.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会生成move.avi.000 move.avi.001两个每个文件大小为50G</p><p><strong>-b</strong> 分割文件大小<br><strong>-d</strong> 指定分割文件后缀为数字，从开始<br><strong>-a 3</strong> 指定分割文件后缀数字长度,为3代表后缀从000</p><h4 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h4><p>分割文件move.avi.000 move.avi.001</p><pre class="line-numbers language-shell"><code class="language-shell">   cat move.avi.* > move.avi <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;linux利用split命令进行大文件分割为有序后缀的小文件,利用cat命令进行文件恢复&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://jl.js.org/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>phpstorm+docker+php+xdebug</title>
    <link href="http://jl.js.org/2019/03/31/phpstorm-docker-php-xdebug/"/>
    <id>http://jl.js.org/2019/03/31/phpstorm-docker-php-xdebug/</id>
    <published>2019-03-31T07:35:23.000Z</published>
    <updated>2019-03-31T08:20:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>phpstorm配合docker中xdebug插件进行php代码调试</p><a id="more"></a><h4 id="xdebug插件及配置"><a href="#xdebug插件及配置" class="headerlink" title="xdebug插件及配置"></a>xdebug插件及配置</h4><pre><code>zend_extension=xdebug.soxdebug.remote_enable=onxdebug.remote_port=9003# docker宿主机ipxdebug.remote_host=172.17.0.1xdebug.idekey=PHPSTORM</code></pre><h4 id="配置server"><a href="#配置server" class="headerlink" title="配置server"></a>配置server</h4><ul><li><p>File | Settings | Languages &amp; Frameworks | PHP | Servers</p></li><li><p>add, Host:127.0.0.1 Port:9999(ports 9999:80)</p></li><li><p>path mapping  dir1  dir2   (volumes dir1:dir2)       </p></li></ul><h4 id="配置debug"><a href="#配置Debug" class="headerlink" title="配置Debug"></a>配置Debug</h4><ul><li><p>File | Settings | Languages &amp; Frameworks | PHP | Debug</p></li><li><p>xdebug debug port:9003(与xdebug.remote_port一致)</p></li></ul><h4 id="配置run-configure"><a href="#配置Run-configure" class="headerlink" title="配置Run configure"></a>配置Run configure</h4><ul><li><p>Run | Edit configurations</p></li><li><p>add, PHP Remote Debug</p></li><li><p>enable Filter Debug Connection by IDE key</p></li><li><p>choose server and write xdebug.idekey</p></li></ul><h4 id="validate"><a href="#validate" class="headerlink" title="validate"></a>validate</h4><h4 id="run-debug"><a href="#Run-Debug" class="headerlink" title="Run | Debug"></a>Run | Debug</h4><h4 id="browser-安装-xdebug-helper"><a href="#Browser-安装-xdebug-helper" class="headerlink" title="Browser 安装 xdebug helper"></a>Browser 安装 xdebug helper</h4><ul><li>options phpstorm  and config key (xdebug.idekey)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;phpstorm配合docker中xdebug插件进行php代码调试&lt;/p&gt;
    
    </summary>
    
      <category term="php" scheme="http://jl.js.org/categories/php/"/>
    
    
      <category term="github" scheme="http://jl.js.org/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>mysql相关</title>
    <link href="http://jl.js.org/2018/11/30/mysql%E2%95%A7%CE%B1%E2%95%A3%E2%95%AA/"/>
    <id>http://jl.js.org/2018/11/30/mysql╧α╣╪/</id>
    <published>2018-11-30T10:49:29.000Z</published>
    <updated>2019-03-05T05:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>mysql开发过程中遇见的问题</p><a id="more"></a><h2 id="查询表中去重查询id最大的记录"><a href="#查询表中去重查询-id最大的记录" class="headerlink" title="查询表中去重查询,id最大的记录"></a>查询表中去重查询,id最大的记录</h2><pre><code>SELECT MAX(id),field FROM TABLE GROUP BY field;</code></pre><h2 id="thread_stack"><a href="#thread-stack" class="headerlink" title="thread_stack"></a>thread_stack</h2><blockquote><p>The stack size for each thread. The default of 192KB (256KB for 64-bit systems) is large enough for normal operation. If the thread stack size is too small, it limits the complexity of the SQL statements that the server can handle, the recursion depth of stored procedures, and other memory-consuming actions.</p></blockquote><ul><li><code>show variables like &quot;thread_stack&quot;</code></li><li>修改配置文件mysql_stack=512k</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql开发过程中遇见的问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="http://jl.js.org/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="http://jl.js.org/2018/11/25/%E2%94%BC%E2%94%BC%E2%95%A8%E2%89%A5%E2%95%A6%CF%80%E2%95%96%C2%BF/"/>
    <id>http://jl.js.org/2018/11/25/┼┼╨≥╦π╖¿/</id>
    <published>2018-11-25T10:24:03.000Z</published>
    <updated>2019-03-05T05:26:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多其他算法都是对排序后的数据进行处理,如二分查找,排序算法分析与代码实现<br><a id="more"></a></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>冒泡排序通过多次遍历数据,对相邻的两个数进行比较,进行值交换找到此次遍历最大或者最小的数犹如冒泡</li><li>遍历的次数为数据数量减1</li><li>每次遍历需要操作的数减1</li><li>冒泡排序的时间复杂度为O(n^2)</li></ul><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><img src="/2018/11/25/┼┼╨≥╦π╖¿/bubble.png"><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="分析"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>快速排序</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多其他算法都是对排序后的数据进行处理,如二分查找,排序算法分析与代码实现&lt;br&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://jl.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>golang中mysql链接数设置</title>
    <link href="http://jl.js.org/2018/11/13/golang%E2%95%93%E2%95%A8mysql%E2%94%B4%E2%94%A4%E2%95%9C%E2%95%99%E2%95%A9%C2%B2%E2%95%94%CE%A6%E2%95%93%E2%94%9C/"/>
    <id>http://jl.js.org/2018/11/13/golang╓╨mysql┴┤╜╙╩²╔Φ╓├/</id>
    <published>2018-11-13T03:22:30.000Z</published>
    <updated>2019-03-05T05:26:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>golang中设置mysql的最大连接数与最大闲置连接数,以及mysql最大连接数配置与连接状态查看</p><a id="more"></a><h2 id="golang连接数设置"><a href="#golang连接数设置" class="headerlink" title="golang连接数设置"></a>golang连接数设置</h2><h3 id="max-open-connections"><a href="#max-open-connections" class="headerlink" title="max open connections"></a>max open connections</h3><p>与mysql服务器最大连接数</p><h3 id="max-idle-connections"><a href="#max-idle-connections" class="headerlink" title="max idle connections"></a>max idle connections</h3><ul><li>当没有数据库请求需要处理，与mysql保持的最大闲置连接数，为下次数据库处理做好准备</li><li>数量小于等于 max open connections</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-golang"><code class="language-golang">    dsn := ""    db,_ := sql.Open("mysql",dsn)    //最大连接数    db.SetMaxOpenConns(300)    //闲置连接数    db.SetMaxIdleConns(200)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mysql最大连接数查看与设置"><a href="#mysql最大连接数查看与设置" class="headerlink" title="mysql最大连接数查看与设置"></a>mysql最大连接数查看与设置</h2><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p><code>show variables like &quot;max_connections&quot;;</code></p><img src="/2018/11/13/golang╓╨mysql┴┤╜╙╩²╔Φ╓├/mysql_show_max_connections.png"><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p><code>set global max_connections=400;</code></p><img src="/2018/11/13/golang╓╨mysql┴┤╜╙╩²╔Φ╓├/mysql_set_max_connections.png"><h3 id="查看连接状态"><a href="#查看连接状态" class="headerlink" title="查看连接状态"></a>查看连接状态</h3><p><code>show status</code></p><h4 id="仅当前客户端连接到服务器threads_connected为1"><a href="#仅当前客户端连接到服务器-Threads-connected为1" class="headerlink" title="仅当前客户端连接到服务器,Threads_connected为1"></a>仅当前客户端连接到服务器,<strong>Threads_connected</strong>为1</h4><img src="/2018/11/13/golang╓╨mysql┴┤╜╙╩²╔Φ╓├/mysql_show_threads_connected.png"><h4 id="golang死循环开启与mysql连接设置最大链接数300"><a href="#golang死循环开启与mysql连接-设置最大链接数300" class="headerlink" title="golang死循环开启与mysql连接,设置最大链接数300"></a>golang死循环开启与mysql连接,设置最大链接数300</h4><pre class="line-numbers language-golang"><code class="language-golang">sqlTest := "SELECT id FROM yc_posts_posts where id > 10 limit 1"for {    db.Query(sqlTest)}time.Sleep(1e9 * 1000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="加上客户端一共301"><a href="#加上客户端一共301" class="headerlink" title="加上客户端一共301"></a>加上客户端一共301</h4><img src="/2018/11/13/golang╓╨mysql┴┤╜╙╩²╔Φ╓├/mysql_show_threads_connected2.png"><h4 id="也可以使用show-processlist查看连接的具体信息"><a href="#也可以使用show-processlist查看连接的具体信息" class="headerlink" title="也可以使用show processlist查看连接的具体信息"></a>也可以使用<code>show processlist</code>查看连接的具体信息</h4><img src="/2018/11/13/golang╓╨mysql┴┤╜╙╩²╔Φ╓├/mysql_show_processlist.png">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;golang中设置mysql的最大连接数与最大闲置连接数,以及mysql最大连接数配置与连接状态查看&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://jl.js.org/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>goquery_tips</title>
    <link href="http://jl.js.org/2018/11/12/goquery-tips/"/>
    <id>http://jl.js.org/2018/11/12/goquery-tips/</id>
    <published>2018-11-12T04:01:14.000Z</published>
    <updated>2019-03-05T05:26:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>goquery一些零碎的知识点<br><a id="more"></a></p><h2 id="删除一个子元素"><a href="#删除一个子元素" class="headerlink" title="删除一个子元素"></a>删除一个子元素</h2><pre class="line-numbers language-golang"><code class="language-golang">//doc selectorselector.Find(".remove").Remove()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="获取dom-子html"><a href="#获取dom-子html" class="headerlink" title="获取dom 子html"></a>获取dom 子html</h2><pre class="line-numbers language-golang"><code class="language-golang">ht,err := selector.Html()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="获取当前dom-html"><a href="#获取当前dom-html" class="headerlink" title="获取当前dom html"></a>获取当前dom html</h2><pre class="line-numbers language-golang"><code class="language-golang">ht,err := goquery.OuterHtml(selector)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;goquery一些零碎的知识点&lt;br&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://jl.js.org/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>God is dead</title>
    <link href="http://jl.js.org/2018/10/24/god-is-dead/"/>
    <id>http://jl.js.org/2018/10/24/god-is-dead/</id>
    <published>2018-10-24T02:24:49.000Z</published>
    <updated>2019-03-05T05:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<h4 style="font: italic 1.5em Georgia, serif;" id="god-is-dead-god-remains-dead-and-we-have-killed-him">God is dead. God remains dead. And we have killed him</h4><a id="more"></a><p><img src="http://ph2zdsc2r.bkt.clouddn.com/God-is-Dead.jpg" style="margin-top:0px;margin-bottom:25px;margin-left:0"></p><h4 style="font: italic 1.5em Georgia, serif;" id="god-is-dead-god-remains-deadand-we-have-killed-himhow-shall-we-comfort-ourselves-the-murderers-of-all-murdererswhat-was-holiest-and-mightiest-of-all-that-the-world-has-yet-owned-has-bled-to-death-under-our-knives-who-will-wipe-this-blood-off-uswhat-water-is-there-for-us-to-clean-ourselveswhat-festivals-of-atonement-what-sacred-games-shall-we-have-to-inventis-not-the-greatness-of-this-deed-too-great-for-usmust-we-ourselves-not-become-gods-simply-to-appear-worthy-of-it-nietzsche"><br>God is dead. God remains dead<br>And we have killed him<br><br>How shall we comfort ourselves, the murderers of all murderers?<br><br>What was holiest and mightiest of all that the world has yet owned has bled to death under our knives: who will wipe this blood off us?<br>What water is there for us to clean ourselves?<br>What festivals of atonement, what sacred games shall we have to invent?<br><br>Is not the greatness of this deed too great for us?<br>Must we ourselves not become gods simply to appear worthy of it?<br><br>— Nietzsche<br></h4>]]></content>
    
    <summary type="html">
    
      &lt;h4 style=&quot;font: italic 1.5em Georgia, serif;&quot;&gt;God is dead. God remains dead. And we have killed him&lt;/h4&gt;
    
    </summary>
    
      <category term="others" scheme="http://jl.js.org/categories/others/"/>
    
    
      <category term="Nietzsche" scheme="http://jl.js.org/tags/Nietzsche/"/>
    
  </entry>
  
  <entry>
    <title>word代码语法高亮</title>
    <link href="http://jl.js.org/2018/10/22/word%E2%94%A4%C2%B7%E2%94%AC%CE%B4%E2%95%99%E2%88%A9%E2%95%96%C2%BF%E2%95%95%E2%96%80%E2%94%B4%E2%94%B4/"/>
    <id>http://jl.js.org/2018/10/22/word┤·┬δ╙∩╖¿╕▀┴┴/</id>
    <published>2018-10-22T01:56:40.000Z</published>
    <updated>2019-03-05T05:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>syntax highlight code for word documents<br><a id="more"></a></p><h2 id="语法支持"><a href="#语法支持" class="headerlink" title="语法支持"></a>语法支持</h2><p>目前支持:</p><ul><li>c c++</li><li>c#</li><li>css</li><li>delphi pascal</li><li>xml</li><li>java</li><li>javascript</li><li>php</li><li>python</li><li>ruby</li><li>sql </li><li>vb</li><li>html</li></ul><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><img src="/2018/10/22/word┤·┬δ╙∩╖¿╕▀┴┴/code.png"><h2 id="在线地址"><a href="#在线地址" class="headerlink" title="在线地址"></a>在线地址</h2><p><a href="http://planetb.ca/projects/syntaxHighlighter/" target="_blank" rel="noopener">planetb.ca</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;syntax highlight code for word documents&lt;br&gt;
    
    </summary>
    
      <category term="others" scheme="http://jl.js.org/categories/others/"/>
    
    
      <category term="word" scheme="http://jl.js.org/tags/word/"/>
    
  </entry>
  
  <entry>
    <title>php操作excel</title>
    <link href="http://jl.js.org/2018/10/22/php%E2%96%93%E2%94%98%E2%95%AB%E2%89%88excel/"/>
    <id>http://jl.js.org/2018/10/22/php▓┘╫≈excel/</id>
    <published>2018-10-22T01:38:36.000Z</published>
    <updated>2019-04-24T08:29:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>PHP操作excel的工具很多，在此使用php一个工具<strong>phpSpreadsheet</strong>,不仅能操作excel还包括一些其他格式如csv,pdf,sylk等<br><a id="more"></a></p><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><blockquote><p>PhpSpreadsheet is a library written in pure PHP and providing a set of classes that allow you to read from and to write to different spreadsheet file formats, like Excel and LibreOffice Calc.</p></blockquote><ul><li><a href="https://phpspreadsheet.readthedocs.io" target="_blank" rel="noopener">官方地址</a></li><li>composer拉取<code>composer require phpoffice/phpspreadsheet</code></li></ul><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><pre class="line-numbers language-php"><code class="language-php">   <span class="token variable">$o_spreadsheet</span> <span class="token operator">=</span> PhpOffice\<span class="token package">PhpSpreadsheet<span class="token punctuation">\</span>IOFactory</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token variable">$s_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$a_sheetData</span> <span class="token operator">=</span> <span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getActiveSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\</span>PhpSpreadsheet<span class="token punctuation">\</span>Cell<span class="token punctuation">\</span>DataType</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\</span>PhpSpreadsheet<span class="token punctuation">\</span>Spreadsheet</span><span class="token punctuation">;</span><span class="token variable">$o_spreadsheet</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Spreadsheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setActiveSheetIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'A1'</span><span class="token punctuation">,</span> <span class="token string">'姓名'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'B1'</span><span class="token punctuation">,</span> <span class="token string">'身份证号'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'C1'</span><span class="token punctuation">,</span> <span class="token string">'手机号'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a_templateData</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'乔峰'</span><span class="token punctuation">,</span> <span class="token string">'51132119941020365X'</span><span class="token punctuation">,</span> <span class="token string">'18180549051'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'需组'</span><span class="token punctuation">,</span> <span class="token string">'51132119941020300x'</span><span class="token punctuation">,</span> <span class="token string">'18180549051'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'短语'</span><span class="token punctuation">,</span> <span class="token string">'511321199410203654'</span><span class="token punctuation">,</span> <span class="token string">'18180549051'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a_templateData</span> <span class="token keyword">as</span> <span class="token variable">$i_key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$a_value</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setActiveSheetIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$i_key</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$a_value</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValueExplicit</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$i_key</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$a_value</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>DataType<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">TYPE_STRING</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValueExplicit</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$i_key</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$a_value</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>DataType<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">TYPE_STRING</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endforeach</span><span class="token punctuation">;</span><span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getActiveSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"导入抽奖人员模板"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Redirect output to a client’s web browser (Xls)</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type: application/vnd.ms-excel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Disposition: attachment;filename="导入抽奖人员模板.xls"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: max-age=0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// If you're serving to IE 9, then the following may be needed</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: max-age=1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// If you're serving to IE over SSL, then the following may be needed</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Expires: Mon, 26 Jul 1997 05:00:00 GMT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Date in the past</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Last-Modified: '</span> <span class="token punctuation">.</span> <span class="token function">gmdate</span><span class="token punctuation">(</span><span class="token string">'D, d M Y H:i:s'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">' GMT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// always modified</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: cache, must-revalidate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HTTP/1.1</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Pragma: public'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HTTP/1.0</span><span class="token variable">$writer</span> <span class="token operator">=</span> IOFactory<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">createWriter</span><span class="token punctuation">(</span><span class="token variable">$o_spreadsheet</span><span class="token punctuation">,</span> <span class="token string">'Xls'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$writer</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//output');</span>exit<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建并下载文件"><a href="#创建并下载文件" class="headerlink" title="创建并下载文件"></a>创建并下载文件</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\</span>PhpSpreadsheet<span class="token punctuation">\</span>Cell<span class="token punctuation">\</span>DataType</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\</span>PhpSpreadsheet<span class="token punctuation">\</span>Spreadsheet</span><span class="token punctuation">;</span><span class="token variable">$o_spreadsheet</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Spreadsheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setActiveSheetIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'A1'</span><span class="token punctuation">,</span> <span class="token string">'姓名'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'B1'</span><span class="token punctuation">,</span> <span class="token string">'身份证号'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'C1'</span><span class="token punctuation">,</span> <span class="token string">'手机号'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a_templateData</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'乔峰'</span><span class="token punctuation">,</span> <span class="token string">'51132119941020365X'</span><span class="token punctuation">,</span> <span class="token string">'18180549051'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'需组'</span><span class="token punctuation">,</span> <span class="token string">'51132119941020300x'</span><span class="token punctuation">,</span> <span class="token string">'18180549051'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'短语'</span><span class="token punctuation">,</span> <span class="token string">'511321199410203654'</span><span class="token punctuation">,</span> <span class="token string">'18180549051'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a_templateData</span> <span class="token keyword">as</span> <span class="token variable">$i_key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$a_value</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setActiveSheetIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$i_key</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$a_value</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValueExplicit</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$i_key</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$a_value</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>DataType<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">TYPE_STRING</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValueExplicit</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$i_key</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$a_value</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>DataType<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">TYPE_STRING</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endforeach</span><span class="token punctuation">;</span><span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getActiveSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"导入抽奖人员模板"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Redirect output to a client’s web browser (Xls)</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type: application/vnd.ms-excel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Disposition: attachment;filename="导入抽奖人员模板.xls"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: max-age=0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// If you're serving to IE 9, then the following may be needed</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: max-age=1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// If you're serving to IE over SSL, then the following may be needed</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Expires: Mon, 26 Jul 1997 05:00:00 GMT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Date in the past</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Last-Modified: '</span> <span class="token punctuation">.</span> <span class="token function">gmdate</span><span class="token punctuation">(</span><span class="token string">'D, d M Y H:i:s'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">' GMT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// always modified</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: cache, must-revalidate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HTTP/1.1</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Pragma: public'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HTTP/1.0</span><span class="token variable">$writer</span> <span class="token operator">=</span> IOFactory<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">createWriter</span><span class="token punctuation">(</span><span class="token variable">$o_spreadsheet</span><span class="token punctuation">,</span> <span class="token string">'Xls'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$writer</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//output');</span>exit<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">/** * 模板下载 * * @param array $a_header 模板头 * @param array $a_data 模板数据 * @param string $s_title 标题 * @param array $width 宽度 */</span><span class="token keyword">function</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$a_header</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$a_data</span><span class="token punctuation">,</span> string <span class="token variable">$s_title</span> <span class="token operator">=</span> <span class="token string">"模板"</span><span class="token punctuation">,</span><span class="token variable">$width</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$o_spreadsheet</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Spreadsheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$o_t</span> <span class="token operator">=</span> <span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setActiveSheetIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$i_char</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a_header</span> <span class="token keyword">as</span> <span class="token variable">$s_name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$o_t</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i_char</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token variable">$s_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i_char</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a_data</span> <span class="token keyword">as</span> <span class="token variable">$i_key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$a_value</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token variable">$o_t</span> <span class="token operator">=</span> <span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setActiveSheetIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$i_char</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a_value</span> <span class="token keyword">as</span> <span class="token variable">$i_key2</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$s_value</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token variable">$o_t</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValueExplicit</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i_char</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token variable">$i_key</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$s_value</span><span class="token punctuation">,</span> DataType<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">TYPE_STRING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$i_char</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">endforeach</span><span class="token punctuation">;</span>    <span class="token keyword">endforeach</span><span class="token punctuation">;</span>    <span class="token variable">$index</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$width</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a_header</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getActiveSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getColumnDimension</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$index</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token variable">$width</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$index</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getActiveSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token variable">$s_title</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Redirect output to a client’s web browser (Xls)</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type: application/vnd.ms-excel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Disposition: attachment;filename="'</span> <span class="token punctuation">.</span> <span class="token variable">$s_title</span> <span class="token punctuation">.</span> <span class="token string">'.xlsx"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: max-age=0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// If you're serving to IE 9, then the following may be needed</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: max-age=1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// If you're serving to IE over SSL, then the following may be needed</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Expires: Mon, 26 Jul 1997 05:00:00 GMT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Date in the past</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Last-Modified: '</span> <span class="token punctuation">.</span> <span class="token function">gmdate</span><span class="token punctuation">(</span><span class="token string">'D, d M Y H:i:s'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">' GMT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// always modified</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: cache, must-revalidate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HTTP/1.1</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Pragma: public'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HTTP/1.0</span>    <span class="token variable">$writer</span> <span class="token operator">=</span> IOFactory<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">createWriter</span><span class="token punctuation">(</span><span class="token variable">$o_spreadsheet</span><span class="token punctuation">,</span> <span class="token string">'Xlsx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$writer</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//output');</span>    exit<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PHP操作excel的工具很多，在此使用php一个工具&lt;strong&gt;phpSpreadsheet&lt;/strong&gt;,不仅能操作excel还包括一些其他格式如csv,pdf,sylk等&lt;br&gt;
    
    </summary>
    
      <category term="php" scheme="http://jl.js.org/categories/php/"/>
    
    
      <category term="php" scheme="http://jl.js.org/tags/php/"/>
    
      <category term="excel" scheme="http://jl.js.org/tags/excel/"/>
    
  </entry>
  
  <entry>
    <title>抽奖算法</title>
    <link href="http://jl.js.org/2018/10/20/%E2%94%82%CE%98%E2%95%9C%E2%96%92%E2%95%A6%CF%80%E2%95%96%C2%BF/"/>
    <id>http://jl.js.org/2018/10/20/│Θ╜▒╦π╖¿/</id>
    <published>2018-10-20T06:29:29.000Z</published>
    <updated>2019-03-05T05:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过程序进行抽奖比较常见，算法可能比较多的实现，以下通过一种比较简单取随机数的方法进行抽奖算法的实现<br><a id="more"></a></p><h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><p>该代码可以实现任意权重的抽奖(包含权重为小数),如果权重为小数,对所有权重以10其最小权重的小数位数的幂次方放大,例如0.1所有权重放大10倍</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ul><li>1.计算所有奖项的权重和</li><li>2.将奖项按照权重的大小降序排序</li><li>3.取１到权重和的随机数</li><li>4.迭代奖项将随机数与每个迭代项的权重进行比较，如果小于该迭代项的权重则返回该奖项，权重和减去该迭代项</li></ul><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Lottery</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//奖项=>权重</span>    <span class="token keyword">private</span> <span class="token variable">$a_sets</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化，奖项对应的各项权重</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token operator">&amp;</span><span class="token variable">$a_sets</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果中奖权重中有小数，则找出其中最小的数，对所有中奖权重进行基于其进行10倍数进行放大使所有权重都为整数</span>        <span class="token comment" spellcheck="true">//找出最小的数</span>        <span class="token variable">$a_weights</span> <span class="token operator">=</span> <span class="token function">array_values</span><span class="token punctuation">(</span><span class="token variable">$a_sets</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$i_min</span> <span class="token operator">=</span> <span class="token variable">$a_weights</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//找出最小数</span>        <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">use</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$a_weights</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token variable">$i_min</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$a_weights</span> <span class="token keyword">as</span> <span class="token variable">$i_item</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i_item</span> <span class="token operator">&lt;</span> <span class="token variable">$i_min</span><span class="token punctuation">)</span> <span class="token variable">$i_min</span> <span class="token operator">=</span> <span class="token variable">$i_item</span><span class="token punctuation">;</span>            <span class="token keyword">endforeach</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断小数位数</span>        <span class="token variable">$a_tmp</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token variable">$i_min</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$i_size</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$a_tmp</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$a_tmp</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//放大所有权重为整数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i_size</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token function">array_walk</span><span class="token punctuation">(</span><span class="token variable">$a_sets</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$i_item</span><span class="token punctuation">)</span><span class="token keyword">use</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$i_size</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$i_item</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$i_item</span> <span class="token operator">*</span>  <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token variable">$i_size</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">endif</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//按照权重降序排序</span>        <span class="token function">krsort</span><span class="token punctuation">(</span><span class="token variable">$a_sets</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a_sets</span> <span class="token operator">=</span> <span class="token variable">$a_sets</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//抽奖</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//总的权重</span>        <span class="token variable">$i_totalWeight</span> <span class="token operator">=</span> <span class="token function">array_sum</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a_sets</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a_sets</span> <span class="token keyword">as</span> <span class="token variable">$prize</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$i_weight</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token variable">$i_rand</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$i_totalWeight</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i_rand</span> <span class="token operator">&lt;=</span> <span class="token variable">$i_weight</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token variable">$prize</span><span class="token punctuation">;</span>            <span class="token keyword">endif</span><span class="token punctuation">;</span>            <span class="token variable">$i_totalWeight</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token variable">$i_weight</span><span class="token punctuation">;</span>        <span class="token keyword">endforeach</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a_testSets</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">4</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">101</span><span class="token punctuation">,</span>    <span class="token number">3</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">70</span><span class="token punctuation">,</span>    <span class="token number">2</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">,</span>    <span class="token number">1</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0.1</span>   <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$o_lottery</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lottery</span><span class="token punctuation">(</span><span class="token variable">$a_testSets</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i_prize</span> <span class="token operator">=</span> <span class="token variable">$o_lottery</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抽奖</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过程序进行抽奖比较常见，算法可能比较多的实现，以下通过一种比较简单取随机数的方法进行抽奖算法的实现&lt;br&gt;
    
    </summary>
    
      <category term="php" scheme="http://jl.js.org/categories/php/"/>
    
    
      <category term="php 抽奖" scheme="http://jl.js.org/tags/php-%E6%8A%BD%E5%A5%96/"/>
    
  </entry>
  
  <entry>
    <title>linux下SSH免密登录</title>
    <link href="http://jl.js.org/2018/10/18/linuxssh%E2%94%9C%CE%93%E2%94%9C%E2%96%84%E2%95%A1%E2%95%9F%E2%94%AC%E2%95%9D/"/>
    <id>http://jl.js.org/2018/10/18/linuxssh├Γ├▄╡╟┬╝/</id>
    <published>2018-10-17T16:00:00.000Z</published>
    <updated>2019-03-05T05:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>ssh每次远程登录输入内容比较繁琐，可以自己简单配置远程主机登录授权<br><a id="more"></a></p><h2 id="本机生成ssh钥匙对"><a href="#本机生成ssh钥匙对" class="headerlink" title="本机生成ssh钥匙对"></a>本机生成ssh钥匙对</h2><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -b 4096<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="将公钥添加到远程主机授权keys中即sshauthorized_keys中"><a href="#将公钥添加到远程主机授权keys中，即-ssh-authorized-keys中" class="headerlink" title="将公钥添加到远程主机授权keys中，即.ssh/authorized_keys中"></a>将公钥添加到远程主机授权keys中，即<code>.ssh/authorized_keys</code>中</h2><pre class="line-numbers language-bash"><code class="language-bash">ssh-copy-id -i ~/.ssh/id_rsa.pub -p24 root@120.26.79.188<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> -p24 root@120.26.79.188<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="远程主机登录脚本"><a href="#远程主机登录脚本" class="headerlink" title="远程主机登录脚本"></a>远程主机登录脚本</h2><ul><li>保存为sh脚本, chmod +x </li><li>command –help,获取用法</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token comment" spellcheck="true"># 远程主机数组</span><span class="token keyword">declare</span> -A hosts<span class="token comment" spellcheck="true"># ip 端口 用户名</span>hosts<span class="token punctuation">[</span><span class="token string">"winneroad188"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'120.26.79.188 24 root'</span>hosts<span class="token punctuation">[</span><span class="token string">"winneroad158"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'192.168.1.58 24 winneroad'</span><span class="token comment" spellcheck="true"># 登录函数</span><span class="token keyword">function</span> login<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    is<span class="token operator">=</span>0    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">${!hosts[@]}</span><span class="token punctuation">;</span><span class="token keyword">do</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"<span class="token variable">$i</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>            is<span class="token operator">=</span>1            <span class="token keyword">break</span>        <span class="token keyword">fi</span>    <span class="token keyword">done</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$is</span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"主机名[<span class="token variable">$1</span>]不存在"</span>        <span class="token keyword">return</span>    <span class="token keyword">fi</span>    n<span class="token operator">=</span>0    <span class="token keyword">declare</span> -A arr    <span class="token comment" spellcheck="true"># 将字符串转换为数组</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token variable">${hosts[$1]}</span><span class="token punctuation">;</span><span class="token keyword">do</span>        arr<span class="token punctuation">[</span><span class="token variable">$n</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$x</span>        n<span class="token operator">=</span>$<span class="token punctuation">[</span>n+1<span class="token punctuation">]</span>    <span class="token keyword">done</span>    <span class="token comment" spellcheck="true"># 拼裝命令</span>   comm<span class="token operator">=</span><span class="token string">"ssh <span class="token variable">${arr[2]}</span>@<span class="token variable">${arr[0]}</span> -p<span class="token variable">${arr[1]}</span>"</span>   <span class="token comment" spellcheck="true"># 执行ssh命令</span>   <span class="token variable">${comm}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 列出现有主机</span><span class="token keyword">function</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"共保存主机:"</span><span class="token variable">${#hosts[@]}</span>个    n<span class="token operator">=</span>1    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">${!hosts[@]}</span><span class="token punctuation">;</span><span class="token keyword">do</span>        <span class="token keyword">echo</span> <span class="token punctuation">[</span><span class="token variable">$n</span><span class="token punctuation">]</span><span class="token string">'=>'</span><span class="token variable">$i</span>        n<span class="token operator">=</span>$<span class="token punctuation">[</span>n+1<span class="token punctuation">]</span>    <span class="token keyword">done</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 列出现有主机</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"ls"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    list<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"-n"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    t<span class="token operator">=</span>1    <span class="token comment" spellcheck="true"># 主机名</span>    key<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">${!hosts[@]}</span><span class="token punctuation">;</span><span class="token keyword">do</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$2</span> -eq <span class="token variable">$t</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        key<span class="token operator">=</span><span class="token variable">$i</span>            <span class="token keyword">break</span>        <span class="token keyword">fi</span>        t<span class="token operator">=</span>$<span class="token punctuation">[</span>t+1<span class="token punctuation">]</span>    <span class="token keyword">done</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token variable">$key</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"主机名错误"</span>    <span class="token keyword">else</span>        login <span class="token variable">$key</span>    <span class="token keyword">fi</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"--help"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"Usage ssh.sh OPTION"</span>    <span class="token keyword">echo</span> <span class="token string">"ls        显示存储的远程主机"</span>    <span class="token keyword">echo</span> <span class="token string">"-n number 根据序号登录远程主机 "</span><span class="token keyword">else</span>    login <span class="token variable">$1</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ssh每次远程登录输入内容比较繁琐，可以自己简单配置远程主机登录授权&lt;br&gt;
    
    </summary>
    
      <category term="shell" scheme="http://jl.js.org/categories/shell/"/>
    
    
      <category term="ssh" scheme="http://jl.js.org/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>redis知识点</title>
    <link href="http://jl.js.org/2018/10/06/reidis%E2%95%93%C2%AC%E2%95%A9%E2%95%A2%E2%95%A1%CF%80/"/>
    <id>http://jl.js.org/2018/10/06/reidis╓¬╩╢╡π/</id>
    <published>2018-10-05T16:00:00.000Z</published>
    <updated>2019-03-05T05:26:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>redis一些简单的知识点记录<br><a id="more"></a></p><h2 id="redis配置文件"><a href="#redis配置文件" class="headerlink" title="redis配置文件"></a>redis配置文件</h2><p><a href="https://redis.io/topics/config" target="_blank" rel="noopener">官方配置文档</a></p><pre class="line-numbers language-bash"><code class="language-bash">//启动server指定配置文件redis-server ./redis.conf//查看所有配置config get *//查看某一项配置config get <span class="token function">dir</span>//设置配置,并非素有配置都能动态设置,详细参考官方配置文档config <span class="token keyword">set</span> <span class="token function">dir</span> <span class="token punctuation">..</span>.//动态设置配置仅仅当前服务生效，如果要保存配置到配置文件,必须在启动server时候制定配置文件config rewrite<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><h3 id="密码授权"><a href="#密码授权" class="headerlink" title="密码授权"></a>密码授权</h3><pre class="line-numbers language-bash"><code class="language-bash">//设置密码config <span class="token keyword">set</span> requirepass password//授权auth password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="protected-mode"><a href="#protected-mode" class="headerlink" title="protected-mode"></a>protected-mode</h3><p>protected-mode是一种客户端连接保护措施,配置文件默认开启<code>protected-mode yes</code>,有以下两种条件者,仅127.0.0.1和::1能访问,其他客户端链接讲访问<code>error</code></p><ul><li>配置文件没有清楚的绑定能访问的客户端例如<code>bind 127.0.0.1</code></li><li>配置文件没有设置<code>requirepass</code></li></ul><p>关闭<code>protected-mode no</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;redis一些简单的知识点记录&lt;br&gt;
    
    </summary>
    
      <category term="others" scheme="http://jl.js.org/categories/others/"/>
    
    
  </entry>
  
  <entry>
    <title>golang tips</title>
    <link href="http://jl.js.org/2018/09/23/golang%20tips/"/>
    <id>http://jl.js.org/2018/09/23/golang tips/</id>
    <published>2018-09-22T16:00:00.000Z</published>
    <updated>2019-03-05T05:26:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>golang一些简单的知识点记录<br><a id="more"></a></p><h2 id="make与new"><a href="#make与new" class="headerlink" title="make与new"></a>make与new</h2><ul><li>new类型分配变量零值，返回指针</li><li>make 只用于smc  slice map chan 三种类型</li></ul><h2 id="int与int64转string"><a href="#int与int64转string" class="headerlink" title="int与int64转string"></a>int与int64转string</h2><p>w</p><pre><code>strconv.FormatInt(int64, 10) stringstrconv.Itoa(int) string</code></pre><h2 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h2><ul><li>类型转化,v.(type) 需要转换的类型<pre class="line-numbers language-golang"><code class="language-golang"> type data map[string]interface{}  var sub  = data{     "zhangsan":"张三",     "lisi":"李四", }   var parent data parent["sub"] = sub for k, v := range parent["data"].(data) {     fmt.Printf("%s,%s", k, v) }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类型断言</p><pre class="line-numbers language-golang"><code class="language-golang">  //单一类型断言,断言变量类型一定要是接口类型，因此讲此变量赋值给一个空接口变量  type emptyInterface interface{}//空接口  var v emptyInterface  v = variable  if _,ok := v.(string);ok{      printf("variable is type of string")  }else {      printf("variable is not type of string")  }  //多类型断言  switch i := v.(type) {      case "int32":      case "float64":  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="字符串转整形"><a href="#字符串转整形" class="headerlink" title="字符串转整形"></a>字符串转整形</h2><blockquote><p>strconv.ParseInt(s string, base int, bitSize int) int64 error</p></blockquote><ul><li>s 要转换的的字符串</li><li>base 字符串类型，可选0 8 10 16,　其中8、10、16 代表字符串进制如果为0将通过string前缀自行判断，如0代表８进制，0x１６进制</li><li>bitSize 整形的位数，8 16 32 64,如果整数大于位数能代表最大数字，如(“128”,10,8)将返回bitSize所能代表的最大数字127</li></ul><h2 id="生成范围内随机整数"><a href="#生成范围内随机整数" class="headerlink" title="生成范围内随机整数"></a>生成范围内随机整数</h2><pre class="line-numbers language-golang"><code class="language-golang">func randInt(start, end int) (i int) {    r := rand.New(rand.NewSource(time.Now().UnixNano()))    if start > end {        return end    }    i = r.Intn(end-start) + start    return}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取程序传入参数"><a href="#获取程序传入参数" class="headerlink" title="获取程序传入参数"></a>获取程序传入参数</h2><blockquote><p>func Int(name string, value int, usage string) *int </p></blockquote><blockquote><p>func String(name string, value string, usage string) *string </p></blockquote><pre class="line-numbers language-golang"><code class="language-golang">total := flag.Int("total", 100000, "how many log want to create")filePath := flag.String("filePath", "/home/jianglong/log/nginx/dig2", "log file path")flag.Parse()fmt.Println(*total, *filePath)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><h4 id="追加写入"><a href="#追加写入" class="headerlink" title="追加写入"></a>追加写入</h4><blockquote><p>func (f *File) Write(b []byte) (n int, err error)</p></blockquote><pre class="line-numbers language-golang"><code class="language-golang">file, err := os.OpenFile(*filePath, os.O_RDWR|os.O_APPEND|os.O_CREATE, 0644)if err != nil {    fmt.Println(err)}defer file.Close()logStr := "我是追加的方式写入的内容,如果不存在就创建文件"_,err := file.Write([]byte(logStr))if err != nil {    fmt.Println(err)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="覆盖文件"><a href="#覆盖文件" class="headerlink" title="覆盖文件"></a>覆盖文件</h4><blockquote><p>func WriteFile(filename string, data []byte, perm os.FileMode) error </p></blockquote><pre class="line-numbers language-golang"><code class="language-golang">err := ioutil.WriteFile(file_path,[]byte("我是覆盖写入的内容"),0644)if err != nil {    fmt.Println(err)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h2><pre class="line-numbers language-golang"><code class="language-golang">hasher := md5.New()hasher.Write([]byte("i am the content))md5str := hex.EncodeToString(hasher.Sum(nil))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="变长参数"><a href="#变长参数" class="headerlink" title="变长参数"></a>变长参数</h2><p><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN/blob/master/eBook/06.3.md" target="_blank" rel="noopener">内容参照</a></p><pre class="line-numbers language-golang"><code class="language-golang">package mainimport "fmt"func main() {    x := min(1, 3, 2, 0)    fmt.Printf("The minimum is: %d\n", x)    slice := []int{7,9,3,5,1}    x = min(slice...)    fmt.Printf("The minimum in the slice is: %d", x)}func min(s ...int) int {    if len(s)==0 {        return 0    }    min := s[0]    for _, v := range s {        if v < min {            min = v         }    }    return min}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="时间相相关"><a href="#时间相相关" class="headerlink" title="时间相相关"></a>时间相相关</h2><h3 id="格式化时间"><a href="#格式化时间" class="headerlink" title="格式化时间"></a>格式化时间</h3><pre class="line-numbers language-golang"><code class="language-golang">time.Now().Format("2006-01-02 15:04:05")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="时间转时间戳"><a href="#时间转时间戳" class="headerlink" title="时间转时间戳"></a>时间转时间戳</h3><pre class="line-numbers language-golang"><code class="language-golang">loc, _ := time.LoadLocation("Local")theTime, _ := time.ParseInLocation("2006-01-02 15:04:05", ts, loc)theTime.Unix()`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修剪字符串"><a href="#修剪字符串" class="headerlink" title="修剪字符串"></a>修剪字符串</h2><pre class="line-numbers language-golang"><code class="language-golang">strings.Trim("hello","h") stringstrings.TrimLeft("hello","h") stringstrings.TrimRight("hello","o") string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="ioreader"><a href="#io-Reader" class="headerlink" title="io.Reader"></a>io.Reader</h2><h3 id="多次ioutilreadall"><a href="#多次ioutil-ReadAll" class="headerlink" title="多次ioutil.ReadAll"></a>多次ioutil.ReadAll</h3><pre class="line-numbers language-golang"><code class="language-golang">if body, err := ioutil.ReadAll(io.Reader); err == nil {    twice := bytes.NewReader(body)    twiceBody, err := ioutil.ReadAll(twice)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ioreader-to-string-or-byte"><a href="#io-Reader-to-string-or-byte" class="headerlink" title="io.Reader to string or []byte"></a>io.Reader to string or []byte</h3><pre class="line-numbers language-golang"><code class="language-golang">bytes,err := ioutil.ReadAll(io.Reader)string(bytes)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="获取变量类型"><a href="#获取变量类型" class="headerlink" title="获取变量类型"></a>获取变量类型</h2><pre class="line-numbers language-golang"><code class="language-golang">import (    "reflect"    "fmt")func main(){    data := [...]int{1,2,3} //array    fmt.Println("%v",reflect.TypeOf(data).Kind())  //获取data的变量类型   array    fmt.Println("%v",reflect.TypeOf(data).Elem().Kind()) //获取underlying type   int }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取执行时间"><a href="#获取执行时间" class="headerlink" title="获取执行时间"></a>获取执行时间</h2><pre class="line-numbers language-golang"><code class="language-golang">import (    "time")func main() {    t := time.Now()    //do something    println(time.Since(t))}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程并发锁"><a href="#线程并发锁" class="headerlink" title="线程并发锁"></a>线程并发锁</h2><p>###　当全局变量被对个线程同时访问的时候可能会造成未知错误，如下例子,一共自增20次，但结果不一定是20</p><pre class="line-numbers language-golang"><code class="language-golang">func main(){    number := 0    for i:=0; i<=10; i++{="" go="" func(){="" number++="" }="" for="" j:="0;" j<="10;" j++{="" time.sleep(1e9*10)="" fmt.println(number)="" <span="" aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></=10;></code></pre><h3 id="加锁这样就能正常同时一个保证为20了"><a href="#加锁-这样就能正常同时一个保证为20了" class="headerlink" title="加锁,这样就能正常同时一个保证为20了"></a>加锁,这样就能正常同时一个保证为20了</h3><pre class="line-numbers language-golang"><code class="language-golang">import "sync"type lockNumber struct {    mu  sync.Mutex    val int}func main(){    number := new(lockNumber)    for i:=0; i<=10; i++{="" go="" func(){="" number.mu.lock()="" number++="" number.mu.unlock()="" }="" for="" j:="0;" j<="10;" j++{="" time.sleep(1e9*10)="" fmt.println(number)="" <span="" aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></=10;></code></pre><h2 id="设置日志文件"><a href="#设置日志文件" class="headerlink" title="设置日志文件"></a>设置日志文件</h2><pre class="line-numbers language-golang"><code class="language-golang">logFile, err := os.OpenFile(file, os.O_RDWR|os.O_CREATE|os.O_APPEND, 0766)loger := log.New(logFile, "前缀", log.Ldate|log.Ltime|log.Lshortfile)loger.SetFlags(log.Ldate | log.Ltime | log.Lshortfile)loger.Printf("第%d行 内容:%s", 11, "我是错误k")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="数据库链接查询"><a href="#数据库链接查询" class="headerlink" title="数据库链接查询"></a>数据库链接查询</h3><pre class="line-numbers language-golang"><code class="language-golang">defer rows.Close()columns, err := rows.Columns()Logger.Printf("查询字段为:%+v\n", columns)if err != nil {    return}scanArgs := make([]interface{}, len(columns))values := make([]interface{}, len(columns))for i := range values {    scanArgs[i] = &values[i]}record := make(map[string]interface{})records := make([]interface{}, 0)for rows.Next() {    if err := rows.Scan(scanArgs...); err == nil {        for i, col := range values {            record[columns[i]] = col        }        records = append(records, record)    } else {        Logger.Printf("err:%+v\n", err)    }}Logger.Printf("查询结果%+v:\n", records)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mysql非固定字段查询"><a href="#mysql非固定字段查询" class="headerlink" title="mysql非固定字段查询"></a>mysql非固定字段查询</h3><pre class="line-numbers language-golang"><code class="language-golang">package mainimport (    "database/sql"    "fmt"    _ "github.com/go-sql-driver/mysql")func main() {    conn, err := sql.Open("mysql", "root:psw@tcp(localhost:3306)/test?charset=utf8")    if err != nil {        fmt.Println("mysql connect error")        return    }    defer conn.Close()    rows, err := conn.Query("select * from user")    if err != nil {        fmt.Println("mysql query error", err.Error())    }    defer rows.Close()    columns, err := rows.Columns()    values := make([]sql.RawBytes, len(columns))    scans := make([]interface{}, len(columns))    for i := range values {        scans[i] = &values[i]    }    var result []map[string]string    for rows.Next() {        _ = rows.Scan(scans...)         each := make(map[string]string)        for i, col := range values {            each[columns[i]] = string(col)        }        result = append(result, each)    }    fmt.Println(result)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><h3 id="保存图片base64编码到本地文件"><a href="#保存图片base64编码到本地文件" class="headerlink" title="保存图片base64编码到本地文件"></a>保存图片base64编码到本地文件</h3><pre class="line-numbers language-golang"><code class="language-golang">func (h *H) WriteBase64ToFile(data, saveDir string) (filePath string, err error) {    //fileType    slashIndex := strings.Index(data, "/")    semicolonIndex := strings.Index(data, ";")    if slashIndex == -1 || semicolonIndex == -1 {        return "", errors.New("base64头格式错误")    }    fileType := str.Substr(data, slashIndex+1, semicolonIndex-slashIndex-1)    ML.Printf("base64文件类型为%s", fileType)    //保存文件    commonIndex := strings.Index(data, ",")    if commonIndex == -1 {        return "", errors.New("base64内容格式错误")    }    filePath = saveDir + "/" + strconv.FormatInt(time.Now().UnixNano(), 10) + "." + fileType    dec := base64.NewDecoder(base64.StdEncoding, strings.NewReader(data[commonIndex+1:]))    bytes, _ := ioutil.ReadAll(dec)    err = ioutil.WriteFile(filePath, bytes, 0644)    if err == nil {        return filePath, nil    } else {        return "", err    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><h3 id="send-a-http-request"><a href="#send-a-http-request" class="headerlink" title="send a http request"></a>send a http request</h3><pre class="line-numbers language-golang"><code class="language-golang">client := http.Client{}request,err := http.NewRequest(method,url,body(io.Reader))#set headerrequest.Header.Add("Content-Type":"application/json")#sendresponse,err := client.Do(request)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;golang一些简单的知识点记录&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://jl.js.org/categories/golang/"/>
    
    
      <category term="tips" scheme="http://jl.js.org/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>golang web middleware</title>
    <link href="http://jl.js.org/2018/09/18/golang%20%20web%20middleware/"/>
    <id>http://jl.js.org/2018/09/18/golang  web middleware/</id>
    <published>2018-09-17T16:00:00.000Z</published>
    <updated>2019-03-05T05:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>golang http中间件知识<br><a id="more"></a></p><hr><p>个人理解golang中http中间件为一个请求链中的一环,用来对真正的请求处理进行一些预处理、如权限验证,参数处理或者辅助<br>进行日志记录等操作,与真正的业务处理分离<br>实现一个demo中间件，验证请求来源ip,让某个ip无法访问网站</p><hr><h2 id="golang-http包接口分析"><a href="#golang-http包接口分析" class="headerlink" title="golang http包接口分析"></a>golang http包接口分析</h2><p><strong>http包代码</strong> </p><pre class="line-numbers language-golang"><code class="language-golang">package http type Handler Interface{   ServeHTTP(ResponseWriter, *Request)}type HandlerFunc func(ResponseWriter, *Request)func (f HandlerFunc) ServeHTTP(w ResponseWriter,r *Request) {    f(w, r)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong> </p><ul><li>以上为http库内置的http处理接口,其中Handler接口有一个ServeHttp接口函数，在处理请求的时候，会调用此函数<br>对接口进行处理。</li><li>任何实现了次接口的类型都可以作为http.ListenAndServe(string, Handler)中的第二个Handler类型参数进行<br>请求处理。</li><li>以上代码中HandlerFunc 就是包内置的默认的实现Handler接口的一种方式。也可以自定义。</li></ul><hr><h2 id="自定义实现handler不使用http包内的handlerfunc"><a href="#自定义实现Handler-不使用http包内的HandlerFunc" class="headerlink" title="自定义实现Handler,不使用http包内的HandlerFunc"></a>自定义实现Handler,不使用http包内的HandlerFunc</h2><p><strong>代码</strong></p><pre class="line-numbers language-golang"><code class="language-golang">type MyHandler struct {}func (mh *MyHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {    //do something    // return result    w.String(200, "hello world")}func main() {    http.ListenAndServe(":1234",&MyHandler{})}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong></p><ul><li>以上MyHandler实现了HTTP包中Handler接口(ServeHTTP方法)，定义了自己处理接口逻辑</li></ul><hr><h3 id="使用函数型"><a href="#使用函数型" class="headerlink" title="使用函数型"></a>使用函数型</h3><p><strong>代码</strong></p><pre class="line-numbers language-golang"><code class="language-golang">//handler Funcfunc MyHandlerFunc(h http.HandlerFunc) http.HandlerFunc {    return func(rw http.ResponseWriter, req *http.Request) {    //do something for example print verse        rw.Write([]byte("昨夜星辰昨夜风"))        h(rw, req)    }}func main() {    err := http.ListenAndServe(":12345", MyHandlerFunc(func(rw http.ResponseWriter, req *http.Request) {             w.Write([]byte("hell world 123456"))    }))    if err != nil{        log.Fatal(err)    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong></p><ul><li>以上没有实现自己的Handler,而是实现了与http.handlerFuc相同签名的函数，相当于使用了http包内实现的HandlerFunc<br>,http包会调用Handler的ServeHTTP方法，然后在ServeHTTP中调用HandlerFuc</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>http.ListenAndServe(“”,Handler),中的Handler可以传两类，第一类是实现http.Handler的ServeHTTP方法的任意类型，<br>第二类是与http.HandlerFuc具有相同签名的函数，以为http.HandlerFuc实现了http.Handler的ServeHTTP,不需要我们再去实现。</li><li>而所谓的http中间件,就是重新实现实现Handler接口或者定义将真正的业务处理部分函数HandlerFunc作为参数传递给中间件函数壳<br>在壳内进行附加操作后，如果满足需求或者其他，然后再调用处理部分函数。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;golang http中间件知识&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://jl.js.org/categories/golang/"/>
    
    
      <category term="middleware" scheme="http://jl.js.org/tags/middleware/"/>
    
  </entry>
  
</feed>
