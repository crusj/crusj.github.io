<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>远方</title>
  
  <subtitle>远方在比远方更远的地方</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jl.js.org/"/>
  <updated>2019-04-24T09:04:05.448Z</updated>
  <id>http://jl.js.org/</id>
  
  <author>
    <name>crusj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux大文件分割与恢复</title>
    <link href="http://jl.js.org/2019/04/24/linux%E5%A4%A7%E6%96%87%E4%BB%B6%E5%88%86%E5%89%B2/"/>
    <id>http://jl.js.org/2019/04/24/linux大文件分割/</id>
    <published>2019-04-24T08:51:51.000Z</published>
    <updated>2019-04-24T09:04:05.448Z</updated>
    
    <content type="html"><![CDATA[<p>linux利用split命令进行大文件分割为有序后缀的小文件,利用cat命令进行文件恢复<br><a id="more"></a></p><h4 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h4><p>假如存在大文件100G move.avi,执行如下命令</p><pre class="line-numbers language-shell"><code class="language-shell">    split -b 50G -d -a 3 move.avi move.avi.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会生成move.avi.000 move.avi.001两个每个文件大小为50G</p><p><strong>-b</strong> 分割文件大小<br><strong>-d</strong> 指定分割文件后缀为数字，从开始<br><strong>-a 3</strong> 指定分割文件后缀数字长度,为3代表后缀从000</p><h4 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h4><p>分割文件move.avi.000 move.avi.001</p><pre class="line-numbers language-shell"><code class="language-shell">   cat move.avi.* > move.avi <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;linux利用split命令进行大文件分割为有序后缀的小文件,利用cat命令进行文件恢复&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://jl.js.org/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>phpstorm+docker+php+xdebug</title>
    <link href="http://jl.js.org/2019/03/31/phpstorm-docker-php-xdebug/"/>
    <id>http://jl.js.org/2019/03/31/phpstorm-docker-php-xdebug/</id>
    <published>2019-03-31T07:35:23.000Z</published>
    <updated>2019-03-31T08:20:24.279Z</updated>
    
    <content type="html"><![CDATA[<p>phpstorm配合docker中xdebug插件进行php代码调试</p><a id="more"></a><h4 id="xdebug插件及配置"><a href="#xdebug插件及配置" class="headerlink" title="xdebug插件及配置"></a>xdebug插件及配置</h4><pre><code>zend_extension=xdebug.soxdebug.remote_enable=onxdebug.remote_port=9003# docker宿主机ipxdebug.remote_host=172.17.0.1xdebug.idekey=PHPSTORM</code></pre><h4 id="配置server"><a href="#配置server" class="headerlink" title="配置server"></a>配置server</h4><ul><li><p>File | Settings | Languages &amp; Frameworks | PHP | Servers</p></li><li><p>add, Host:127.0.0.1 Port:9999(ports 9999:80)</p></li><li><p>path mapping  dir1  dir2   (volumes dir1:dir2)       </p></li></ul><h4 id="配置debug"><a href="#配置Debug" class="headerlink" title="配置Debug"></a>配置Debug</h4><ul><li><p>File | Settings | Languages &amp; Frameworks | PHP | Debug</p></li><li><p>xdebug debug port:9003(与xdebug.remote_port一致)</p></li></ul><h4 id="配置run-configure"><a href="#配置Run-configure" class="headerlink" title="配置Run configure"></a>配置Run configure</h4><ul><li><p>Run | Edit configurations</p></li><li><p>add, PHP Remote Debug</p></li><li><p>enable Filter Debug Connection by IDE key</p></li><li><p>choose server and write xdebug.idekey</p></li></ul><h4 id="validate"><a href="#validate" class="headerlink" title="validate"></a>validate</h4><h4 id="run-debug"><a href="#Run-Debug" class="headerlink" title="Run | Debug"></a>Run | Debug</h4><h4 id="browser-安装-xdebug-helper"><a href="#Browser-安装-xdebug-helper" class="headerlink" title="Browser 安装 xdebug helper"></a>Browser 安装 xdebug helper</h4><ul><li>options phpstorm  and config key (xdebug.idekey)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;phpstorm配合docker中xdebug插件进行php代码调试&lt;/p&gt;
    
    </summary>
    
      <category term="php" scheme="http://jl.js.org/categories/php/"/>
    
    
      <category term="github" scheme="http://jl.js.org/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>mysql相关</title>
    <link href="http://jl.js.org/2018/11/30/mysql%E2%95%A7%CE%B1%E2%95%A3%E2%95%AA/"/>
    <id>http://jl.js.org/2018/11/30/mysql╧α╣╪/</id>
    <published>2018-11-30T10:49:29.000Z</published>
    <updated>2019-03-05T05:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>mysql开发过程中遇见的问题</p><a id="more"></a><h2 id="查询表中去重查询id最大的记录"><a href="#查询表中去重查询-id最大的记录" class="headerlink" title="查询表中去重查询,id最大的记录"></a>查询表中去重查询,id最大的记录</h2><pre><code>SELECT MAX(id),field FROM TABLE GROUP BY field;</code></pre><h2 id="thread_stack"><a href="#thread-stack" class="headerlink" title="thread_stack"></a>thread_stack</h2><blockquote><p>The stack size for each thread. The default of 192KB (256KB for 64-bit systems) is large enough for normal operation. If the thread stack size is too small, it limits the complexity of the SQL statements that the server can handle, the recursion depth of stored procedures, and other memory-consuming actions.</p></blockquote><ul><li><code>show variables like &quot;thread_stack&quot;</code></li><li>修改配置文件mysql_stack=512k</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql开发过程中遇见的问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="http://jl.js.org/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="http://jl.js.org/2018/11/25/%E2%94%BC%E2%94%BC%E2%95%A8%E2%89%A5%E2%95%A6%CF%80%E2%95%96%C2%BF/"/>
    <id>http://jl.js.org/2018/11/25/┼┼╨≥╦π╖¿/</id>
    <published>2018-11-25T10:24:03.000Z</published>
    <updated>2019-03-05T05:26:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多其他算法都是对排序后的数据进行处理,如二分查找,排序算法分析与代码实现<br><a id="more"></a></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>冒泡排序通过多次遍历数据,对相邻的两个数进行比较,进行值交换找到此次遍历最大或者最小的数犹如冒泡</li><li>遍历的次数为数据数量减1</li><li>每次遍历需要操作的数减1</li><li>冒泡排序的时间复杂度为O(n^2)</li></ul><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><img src="/2018/11/25/┼┼╨≥╦π╖¿/bubble.png"><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="分析"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>快速排序</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多其他算法都是对排序后的数据进行处理,如二分查找,排序算法分析与代码实现&lt;br&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://jl.js.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>golang中mysql链接数设置</title>
    <link href="http://jl.js.org/2018/11/13/golang%E2%95%93%E2%95%A8mysql%E2%94%B4%E2%94%A4%E2%95%9C%E2%95%99%E2%95%A9%C2%B2%E2%95%94%CE%A6%E2%95%93%E2%94%9C/"/>
    <id>http://jl.js.org/2018/11/13/golang╓╨mysql┴┤╜╙╩²╔Φ╓├/</id>
    <published>2018-11-13T03:22:30.000Z</published>
    <updated>2019-03-05T05:26:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>golang中设置mysql的最大连接数与最大闲置连接数,以及mysql最大连接数配置与连接状态查看</p><a id="more"></a><h2 id="golang连接数设置"><a href="#golang连接数设置" class="headerlink" title="golang连接数设置"></a>golang连接数设置</h2><h3 id="max-open-connections"><a href="#max-open-connections" class="headerlink" title="max open connections"></a>max open connections</h3><p>与mysql服务器最大连接数</p><h3 id="max-idle-connections"><a href="#max-idle-connections" class="headerlink" title="max idle connections"></a>max idle connections</h3><ul><li>当没有数据库请求需要处理，与mysql保持的最大闲置连接数，为下次数据库处理做好准备</li><li>数量小于等于 max open connections</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-golang"><code class="language-golang">    dsn := ""    db,_ := sql.Open("mysql",dsn)    //最大连接数    db.SetMaxOpenConns(300)    //闲置连接数    db.SetMaxIdleConns(200)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mysql最大连接数查看与设置"><a href="#mysql最大连接数查看与设置" class="headerlink" title="mysql最大连接数查看与设置"></a>mysql最大连接数查看与设置</h2><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p><code>show variables like &quot;max_connections&quot;;</code></p><img src="/2018/11/13/golang╓╨mysql┴┤╜╙╩²╔Φ╓├/mysql_show_max_connections.png"><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p><code>set global max_connections=400;</code></p><img src="/2018/11/13/golang╓╨mysql┴┤╜╙╩²╔Φ╓├/mysql_set_max_connections.png"><h3 id="查看连接状态"><a href="#查看连接状态" class="headerlink" title="查看连接状态"></a>查看连接状态</h3><p><code>show status</code></p><h4 id="仅当前客户端连接到服务器threads_connected为1"><a href="#仅当前客户端连接到服务器-Threads-connected为1" class="headerlink" title="仅当前客户端连接到服务器,Threads_connected为1"></a>仅当前客户端连接到服务器,<strong>Threads_connected</strong>为1</h4><img src="/2018/11/13/golang╓╨mysql┴┤╜╙╩²╔Φ╓├/mysql_show_threads_connected.png"><h4 id="golang死循环开启与mysql连接设置最大链接数300"><a href="#golang死循环开启与mysql连接-设置最大链接数300" class="headerlink" title="golang死循环开启与mysql连接,设置最大链接数300"></a>golang死循环开启与mysql连接,设置最大链接数300</h4><pre class="line-numbers language-golang"><code class="language-golang">sqlTest := "SELECT id FROM yc_posts_posts where id > 10 limit 1"for {    db.Query(sqlTest)}time.Sleep(1e9 * 1000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="加上客户端一共301"><a href="#加上客户端一共301" class="headerlink" title="加上客户端一共301"></a>加上客户端一共301</h4><img src="/2018/11/13/golang╓╨mysql┴┤╜╙╩²╔Φ╓├/mysql_show_threads_connected2.png"><h4 id="也可以使用show-processlist查看连接的具体信息"><a href="#也可以使用show-processlist查看连接的具体信息" class="headerlink" title="也可以使用show processlist查看连接的具体信息"></a>也可以使用<code>show processlist</code>查看连接的具体信息</h4><img src="/2018/11/13/golang╓╨mysql┴┤╜╙╩²╔Φ╓├/mysql_show_processlist.png">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;golang中设置mysql的最大连接数与最大闲置连接数,以及mysql最大连接数配置与连接状态查看&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://jl.js.org/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>goquery_tips</title>
    <link href="http://jl.js.org/2018/11/12/goquery-tips/"/>
    <id>http://jl.js.org/2018/11/12/goquery-tips/</id>
    <published>2018-11-12T04:01:14.000Z</published>
    <updated>2019-03-05T05:26:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>goquery一些零碎的知识点<br><a id="more"></a></p><h2 id="删除一个子元素"><a href="#删除一个子元素" class="headerlink" title="删除一个子元素"></a>删除一个子元素</h2><pre class="line-numbers language-golang"><code class="language-golang">//doc selectorselector.Find(".remove").Remove()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="获取dom-子html"><a href="#获取dom-子html" class="headerlink" title="获取dom 子html"></a>获取dom 子html</h2><pre class="line-numbers language-golang"><code class="language-golang">ht,err := selector.Html()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="获取当前dom-html"><a href="#获取当前dom-html" class="headerlink" title="获取当前dom html"></a>获取当前dom html</h2><pre class="line-numbers language-golang"><code class="language-golang">ht,err := goquery.OuterHtml(selector)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;goquery一些零碎的知识点&lt;br&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://jl.js.org/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>God is dead</title>
    <link href="http://jl.js.org/2018/10/24/god-is-dead/"/>
    <id>http://jl.js.org/2018/10/24/god-is-dead/</id>
    <published>2018-10-24T02:24:49.000Z</published>
    <updated>2019-03-05T05:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<h4 style="font: italic 1.5em Georgia, serif;" id="god-is-dead-god-remains-dead-and-we-have-killed-him">God is dead. God remains dead. And we have killed him</h4><a id="more"></a><p><img src="http://ph2zdsc2r.bkt.clouddn.com/God-is-Dead.jpg" style="margin-top:0px;margin-bottom:25px;margin-left:0"></p><h4 style="font: italic 1.5em Georgia, serif;" id="god-is-dead-god-remains-deadand-we-have-killed-himhow-shall-we-comfort-ourselves-the-murderers-of-all-murdererswhat-was-holiest-and-mightiest-of-all-that-the-world-has-yet-owned-has-bled-to-death-under-our-knives-who-will-wipe-this-blood-off-uswhat-water-is-there-for-us-to-clean-ourselveswhat-festivals-of-atonement-what-sacred-games-shall-we-have-to-inventis-not-the-greatness-of-this-deed-too-great-for-usmust-we-ourselves-not-become-gods-simply-to-appear-worthy-of-it-nietzsche"><br>God is dead. God remains dead<br>And we have killed him<br><br>How shall we comfort ourselves, the murderers of all murderers?<br><br>What was holiest and mightiest of all that the world has yet owned has bled to death under our knives: who will wipe this blood off us?<br>What water is there for us to clean ourselves?<br>What festivals of atonement, what sacred games shall we have to invent?<br><br>Is not the greatness of this deed too great for us?<br>Must we ourselves not become gods simply to appear worthy of it?<br><br>— Nietzsche<br></h4>]]></content>
    
    <summary type="html">
    
      &lt;h4 style=&quot;font: italic 1.5em Georgia, serif;&quot;&gt;God is dead. God remains dead. And we have killed him&lt;/h4&gt;
    
    </summary>
    
      <category term="others" scheme="http://jl.js.org/categories/others/"/>
    
    
      <category term="Nietzsche" scheme="http://jl.js.org/tags/Nietzsche/"/>
    
  </entry>
  
  <entry>
    <title>word代码语法高亮</title>
    <link href="http://jl.js.org/2018/10/22/word%E2%94%A4%C2%B7%E2%94%AC%CE%B4%E2%95%99%E2%88%A9%E2%95%96%C2%BF%E2%95%95%E2%96%80%E2%94%B4%E2%94%B4/"/>
    <id>http://jl.js.org/2018/10/22/word┤·┬δ╙∩╖¿╕▀┴┴/</id>
    <published>2018-10-22T01:56:40.000Z</published>
    <updated>2019-03-05T05:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>syntax highlight code for word documents<br><a id="more"></a></p><h2 id="语法支持"><a href="#语法支持" class="headerlink" title="语法支持"></a>语法支持</h2><p>目前支持:</p><ul><li>c c++</li><li>c#</li><li>css</li><li>delphi pascal</li><li>xml</li><li>java</li><li>javascript</li><li>php</li><li>python</li><li>ruby</li><li>sql </li><li>vb</li><li>html</li></ul><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><img src="/2018/10/22/word┤·┬δ╙∩╖¿╕▀┴┴/code.png"><h2 id="在线地址"><a href="#在线地址" class="headerlink" title="在线地址"></a>在线地址</h2><p><a href="http://planetb.ca/projects/syntaxHighlighter/" target="_blank" rel="noopener">planetb.ca</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;syntax highlight code for word documents&lt;br&gt;
    
    </summary>
    
      <category term="others" scheme="http://jl.js.org/categories/others/"/>
    
    
      <category term="word" scheme="http://jl.js.org/tags/word/"/>
    
  </entry>
  
  <entry>
    <title>php操作excel</title>
    <link href="http://jl.js.org/2018/10/22/php%E2%96%93%E2%94%98%E2%95%AB%E2%89%88excel/"/>
    <id>http://jl.js.org/2018/10/22/php▓┘╫≈excel/</id>
    <published>2018-10-22T01:38:36.000Z</published>
    <updated>2019-04-24T08:29:04.724Z</updated>
    
    <content type="html"><![CDATA[<p>PHP操作excel的工具很多，在此使用php一个工具<strong>phpSpreadsheet</strong>,不仅能操作excel还包括一些其他格式如csv,pdf,sylk等<br><a id="more"></a></p><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><blockquote><p>PhpSpreadsheet is a library written in pure PHP and providing a set of classes that allow you to read from and to write to different spreadsheet file formats, like Excel and LibreOffice Calc.</p></blockquote><ul><li><a href="https://phpspreadsheet.readthedocs.io" target="_blank" rel="noopener">官方地址</a></li><li>composer拉取<code>composer require phpoffice/phpspreadsheet</code></li></ul><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><pre class="line-numbers language-php"><code class="language-php">   <span class="token variable">$o_spreadsheet</span> <span class="token operator">=</span> PhpOffice\<span class="token package">PhpSpreadsheet<span class="token punctuation">\</span>IOFactory</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token variable">$s_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$a_sheetData</span> <span class="token operator">=</span> <span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getActiveSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\</span>PhpSpreadsheet<span class="token punctuation">\</span>Cell<span class="token punctuation">\</span>DataType</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\</span>PhpSpreadsheet<span class="token punctuation">\</span>Spreadsheet</span><span class="token punctuation">;</span><span class="token variable">$o_spreadsheet</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Spreadsheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setActiveSheetIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'A1'</span><span class="token punctuation">,</span> <span class="token string">'姓名'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'B1'</span><span class="token punctuation">,</span> <span class="token string">'身份证号'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'C1'</span><span class="token punctuation">,</span> <span class="token string">'手机号'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a_templateData</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'乔峰'</span><span class="token punctuation">,</span> <span class="token string">'51132119941020365X'</span><span class="token punctuation">,</span> <span class="token string">'18180549051'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'需组'</span><span class="token punctuation">,</span> <span class="token string">'51132119941020300x'</span><span class="token punctuation">,</span> <span class="token string">'18180549051'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'短语'</span><span class="token punctuation">,</span> <span class="token string">'511321199410203654'</span><span class="token punctuation">,</span> <span class="token string">'18180549051'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a_templateData</span> <span class="token keyword">as</span> <span class="token variable">$i_key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$a_value</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setActiveSheetIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$i_key</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$a_value</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValueExplicit</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$i_key</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$a_value</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>DataType<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">TYPE_STRING</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValueExplicit</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$i_key</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$a_value</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>DataType<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">TYPE_STRING</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endforeach</span><span class="token punctuation">;</span><span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getActiveSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"导入抽奖人员模板"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Redirect output to a client’s web browser (Xls)</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type: application/vnd.ms-excel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Disposition: attachment;filename="导入抽奖人员模板.xls"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: max-age=0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// If you're serving to IE 9, then the following may be needed</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: max-age=1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// If you're serving to IE over SSL, then the following may be needed</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Expires: Mon, 26 Jul 1997 05:00:00 GMT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Date in the past</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Last-Modified: '</span> <span class="token punctuation">.</span> <span class="token function">gmdate</span><span class="token punctuation">(</span><span class="token string">'D, d M Y H:i:s'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">' GMT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// always modified</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: cache, must-revalidate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HTTP/1.1</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Pragma: public'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HTTP/1.0</span><span class="token variable">$writer</span> <span class="token operator">=</span> IOFactory<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">createWriter</span><span class="token punctuation">(</span><span class="token variable">$o_spreadsheet</span><span class="token punctuation">,</span> <span class="token string">'Xls'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$writer</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//output');</span>exit<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建并下载文件"><a href="#创建并下载文件" class="headerlink" title="创建并下载文件"></a>创建并下载文件</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\</span>PhpSpreadsheet<span class="token punctuation">\</span>Cell<span class="token punctuation">\</span>DataType</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\</span>PhpSpreadsheet<span class="token punctuation">\</span>Spreadsheet</span><span class="token punctuation">;</span><span class="token variable">$o_spreadsheet</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Spreadsheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setActiveSheetIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'A1'</span><span class="token punctuation">,</span> <span class="token string">'姓名'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'B1'</span><span class="token punctuation">,</span> <span class="token string">'身份证号'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'C1'</span><span class="token punctuation">,</span> <span class="token string">'手机号'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a_templateData</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'乔峰'</span><span class="token punctuation">,</span> <span class="token string">'51132119941020365X'</span><span class="token punctuation">,</span> <span class="token string">'18180549051'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'需组'</span><span class="token punctuation">,</span> <span class="token string">'51132119941020300x'</span><span class="token punctuation">,</span> <span class="token string">'18180549051'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'短语'</span><span class="token punctuation">,</span> <span class="token string">'511321199410203654'</span><span class="token punctuation">,</span> <span class="token string">'18180549051'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a_templateData</span> <span class="token keyword">as</span> <span class="token variable">$i_key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$a_value</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setActiveSheetIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$i_key</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$a_value</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValueExplicit</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$i_key</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$a_value</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>DataType<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">TYPE_STRING</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValueExplicit</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$i_key</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$a_value</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>DataType<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">TYPE_STRING</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endforeach</span><span class="token punctuation">;</span><span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getActiveSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"导入抽奖人员模板"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Redirect output to a client’s web browser (Xls)</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type: application/vnd.ms-excel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Disposition: attachment;filename="导入抽奖人员模板.xls"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: max-age=0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// If you're serving to IE 9, then the following may be needed</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: max-age=1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// If you're serving to IE over SSL, then the following may be needed</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Expires: Mon, 26 Jul 1997 05:00:00 GMT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Date in the past</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Last-Modified: '</span> <span class="token punctuation">.</span> <span class="token function">gmdate</span><span class="token punctuation">(</span><span class="token string">'D, d M Y H:i:s'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">' GMT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// always modified</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: cache, must-revalidate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HTTP/1.1</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Pragma: public'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HTTP/1.0</span><span class="token variable">$writer</span> <span class="token operator">=</span> IOFactory<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">createWriter</span><span class="token punctuation">(</span><span class="token variable">$o_spreadsheet</span><span class="token punctuation">,</span> <span class="token string">'Xls'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$writer</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//output');</span>exit<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">/** * 模板下载 * * @param array $a_header 模板头 * @param array $a_data 模板数据 * @param string $s_title 标题 * @param array $width 宽度 */</span><span class="token keyword">function</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$a_header</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$a_data</span><span class="token punctuation">,</span> string <span class="token variable">$s_title</span> <span class="token operator">=</span> <span class="token string">"模板"</span><span class="token punctuation">,</span><span class="token variable">$width</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$o_spreadsheet</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Spreadsheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$o_t</span> <span class="token operator">=</span> <span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setActiveSheetIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$i_char</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a_header</span> <span class="token keyword">as</span> <span class="token variable">$s_name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$o_t</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i_char</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token variable">$s_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i_char</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a_data</span> <span class="token keyword">as</span> <span class="token variable">$i_key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$a_value</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token variable">$o_t</span> <span class="token operator">=</span> <span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setActiveSheetIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$i_char</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a_value</span> <span class="token keyword">as</span> <span class="token variable">$i_key2</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$s_value</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token variable">$o_t</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setCellValueExplicit</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i_char</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token variable">$i_key</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$s_value</span><span class="token punctuation">,</span> DataType<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">TYPE_STRING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$i_char</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">endforeach</span><span class="token punctuation">;</span>    <span class="token keyword">endforeach</span><span class="token punctuation">;</span>    <span class="token variable">$index</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$width</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a_header</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getActiveSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getColumnDimension</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$index</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token variable">$width</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$index</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token variable">$o_spreadsheet</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getActiveSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token variable">$s_title</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Redirect output to a client’s web browser (Xls)</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type: application/vnd.ms-excel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Disposition: attachment;filename="'</span> <span class="token punctuation">.</span> <span class="token variable">$s_title</span> <span class="token punctuation">.</span> <span class="token string">'.xlsx"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: max-age=0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// If you're serving to IE 9, then the following may be needed</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: max-age=1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// If you're serving to IE over SSL, then the following may be needed</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Expires: Mon, 26 Jul 1997 05:00:00 GMT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Date in the past</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Last-Modified: '</span> <span class="token punctuation">.</span> <span class="token function">gmdate</span><span class="token punctuation">(</span><span class="token string">'D, d M Y H:i:s'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">' GMT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// always modified</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: cache, must-revalidate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HTTP/1.1</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Pragma: public'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HTTP/1.0</span>    <span class="token variable">$writer</span> <span class="token operator">=</span> IOFactory<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">createWriter</span><span class="token punctuation">(</span><span class="token variable">$o_spreadsheet</span><span class="token punctuation">,</span> <span class="token string">'Xlsx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$writer</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//output');</span>    exit<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PHP操作excel的工具很多，在此使用php一个工具&lt;strong&gt;phpSpreadsheet&lt;/strong&gt;,不仅能操作excel还包括一些其他格式如csv,pdf,sylk等&lt;br&gt;
    
    </summary>
    
      <category term="php" scheme="http://jl.js.org/categories/php/"/>
    
    
      <category term="php" scheme="http://jl.js.org/tags/php/"/>
    
      <category term="excel" scheme="http://jl.js.org/tags/excel/"/>
    
  </entry>
  
  <entry>
    <title>抽奖算法</title>
    <link href="http://jl.js.org/2018/10/20/%E2%94%82%CE%98%E2%95%9C%E2%96%92%E2%95%A6%CF%80%E2%95%96%C2%BF/"/>
    <id>http://jl.js.org/2018/10/20/│Θ╜▒╦π╖¿/</id>
    <published>2018-10-20T06:29:29.000Z</published>
    <updated>2019-03-05T05:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过程序进行抽奖比较常见，算法可能比较多的实现，以下通过一种比较简单取随机数的方法进行抽奖算法的实现<br><a id="more"></a></p><h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><p>该代码可以实现任意权重的抽奖(包含权重为小数),如果权重为小数,对所有权重以10其最小权重的小数位数的幂次方放大,例如0.1所有权重放大10倍</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ul><li>1.计算所有奖项的权重和</li><li>2.将奖项按照权重的大小降序排序</li><li>3.取１到权重和的随机数</li><li>4.迭代奖项将随机数与每个迭代项的权重进行比较，如果小于该迭代项的权重则返回该奖项，权重和减去该迭代项</li></ul><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Lottery</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//奖项=>权重</span>    <span class="token keyword">private</span> <span class="token variable">$a_sets</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化，奖项对应的各项权重</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token operator">&amp;</span><span class="token variable">$a_sets</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果中奖权重中有小数，则找出其中最小的数，对所有中奖权重进行基于其进行10倍数进行放大使所有权重都为整数</span>        <span class="token comment" spellcheck="true">//找出最小的数</span>        <span class="token variable">$a_weights</span> <span class="token operator">=</span> <span class="token function">array_values</span><span class="token punctuation">(</span><span class="token variable">$a_sets</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$i_min</span> <span class="token operator">=</span> <span class="token variable">$a_weights</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//找出最小数</span>        <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">use</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$a_weights</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token variable">$i_min</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$a_weights</span> <span class="token keyword">as</span> <span class="token variable">$i_item</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i_item</span> <span class="token operator">&lt;</span> <span class="token variable">$i_min</span><span class="token punctuation">)</span> <span class="token variable">$i_min</span> <span class="token operator">=</span> <span class="token variable">$i_item</span><span class="token punctuation">;</span>            <span class="token keyword">endforeach</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断小数位数</span>        <span class="token variable">$a_tmp</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token variable">$i_min</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$i_size</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$a_tmp</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$a_tmp</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//放大所有权重为整数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i_size</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token function">array_walk</span><span class="token punctuation">(</span><span class="token variable">$a_sets</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$i_item</span><span class="token punctuation">)</span><span class="token keyword">use</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$i_size</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$i_item</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$i_item</span> <span class="token operator">*</span>  <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token variable">$i_size</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">endif</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//按照权重降序排序</span>        <span class="token function">krsort</span><span class="token punctuation">(</span><span class="token variable">$a_sets</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a_sets</span> <span class="token operator">=</span> <span class="token variable">$a_sets</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//抽奖</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//总的权重</span>        <span class="token variable">$i_totalWeight</span> <span class="token operator">=</span> <span class="token function">array_sum</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a_sets</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a_sets</span> <span class="token keyword">as</span> <span class="token variable">$prize</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$i_weight</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token variable">$i_rand</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$i_totalWeight</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i_rand</span> <span class="token operator">&lt;=</span> <span class="token variable">$i_weight</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token variable">$prize</span><span class="token punctuation">;</span>            <span class="token keyword">endif</span><span class="token punctuation">;</span>            <span class="token variable">$i_totalWeight</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token variable">$i_weight</span><span class="token punctuation">;</span>        <span class="token keyword">endforeach</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a_testSets</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">4</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">101</span><span class="token punctuation">,</span>    <span class="token number">3</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">70</span><span class="token punctuation">,</span>    <span class="token number">2</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">,</span>    <span class="token number">1</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0.1</span>   <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$o_lottery</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lottery</span><span class="token punctuation">(</span><span class="token variable">$a_testSets</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i_prize</span> <span class="token operator">=</span> <span class="token variable">$o_lottery</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抽奖</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过程序进行抽奖比较常见，算法可能比较多的实现，以下通过一种比较简单取随机数的方法进行抽奖算法的实现&lt;br&gt;
    
    </summary>
    
      <category term="php" scheme="http://jl.js.org/categories/php/"/>
    
    
      <category term="php 抽奖" scheme="http://jl.js.org/tags/php-%E6%8A%BD%E5%A5%96/"/>
    
  </entry>
  
  <entry>
    <title>linux下SSH免密登录</title>
    <link href="http://jl.js.org/2018/10/18/linuxssh%E2%94%9C%CE%93%E2%94%9C%E2%96%84%E2%95%A1%E2%95%9F%E2%94%AC%E2%95%9D/"/>
    <id>http://jl.js.org/2018/10/18/linuxssh├Γ├▄╡╟┬╝/</id>
    <published>2018-10-17T16:00:00.000Z</published>
    <updated>2019-03-05T05:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>ssh每次远程登录输入内容比较繁琐，可以自己简单配置远程主机登录授权<br><a id="more"></a></p><h2 id="本机生成ssh钥匙对"><a href="#本机生成ssh钥匙对" class="headerlink" title="本机生成ssh钥匙对"></a>本机生成ssh钥匙对</h2><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -b 4096<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="将公钥添加到远程主机授权keys中即sshauthorized_keys中"><a href="#将公钥添加到远程主机授权keys中，即-ssh-authorized-keys中" class="headerlink" title="将公钥添加到远程主机授权keys中，即.ssh/authorized_keys中"></a>将公钥添加到远程主机授权keys中，即<code>.ssh/authorized_keys</code>中</h2><pre class="line-numbers language-bash"><code class="language-bash">ssh-copy-id -i ~/.ssh/id_rsa.pub -p24 root@120.26.79.188<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> -p24 root@120.26.79.188<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="远程主机登录脚本"><a href="#远程主机登录脚本" class="headerlink" title="远程主机登录脚本"></a>远程主机登录脚本</h2><ul><li>保存为sh脚本, chmod +x </li><li>command –help,获取用法</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token comment" spellcheck="true"># 远程主机数组</span><span class="token keyword">declare</span> -A hosts<span class="token comment" spellcheck="true"># ip 端口 用户名</span>hosts<span class="token punctuation">[</span><span class="token string">"winneroad188"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'120.26.79.188 24 root'</span>hosts<span class="token punctuation">[</span><span class="token string">"winneroad158"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'192.168.1.58 24 winneroad'</span><span class="token comment" spellcheck="true"># 登录函数</span><span class="token keyword">function</span> login<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    is<span class="token operator">=</span>0    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">${!hosts[@]}</span><span class="token punctuation">;</span><span class="token keyword">do</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"<span class="token variable">$i</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>            is<span class="token operator">=</span>1            <span class="token keyword">break</span>        <span class="token keyword">fi</span>    <span class="token keyword">done</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$is</span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"主机名[<span class="token variable">$1</span>]不存在"</span>        <span class="token keyword">return</span>    <span class="token keyword">fi</span>    n<span class="token operator">=</span>0    <span class="token keyword">declare</span> -A arr    <span class="token comment" spellcheck="true"># 将字符串转换为数组</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token variable">${hosts[$1]}</span><span class="token punctuation">;</span><span class="token keyword">do</span>        arr<span class="token punctuation">[</span><span class="token variable">$n</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$x</span>        n<span class="token operator">=</span>$<span class="token punctuation">[</span>n+1<span class="token punctuation">]</span>    <span class="token keyword">done</span>    <span class="token comment" spellcheck="true"># 拼裝命令</span>   comm<span class="token operator">=</span><span class="token string">"ssh <span class="token variable">${arr[2]}</span>@<span class="token variable">${arr[0]}</span> -p<span class="token variable">${arr[1]}</span>"</span>   <span class="token comment" spellcheck="true"># 执行ssh命令</span>   <span class="token variable">${comm}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 列出现有主机</span><span class="token keyword">function</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"共保存主机:"</span><span class="token variable">${#hosts[@]}</span>个    n<span class="token operator">=</span>1    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">${!hosts[@]}</span><span class="token punctuation">;</span><span class="token keyword">do</span>        <span class="token keyword">echo</span> <span class="token punctuation">[</span><span class="token variable">$n</span><span class="token punctuation">]</span><span class="token string">'=>'</span><span class="token variable">$i</span>        n<span class="token operator">=</span>$<span class="token punctuation">[</span>n+1<span class="token punctuation">]</span>    <span class="token keyword">done</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 列出现有主机</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"ls"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    list<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"-n"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    t<span class="token operator">=</span>1    <span class="token comment" spellcheck="true"># 主机名</span>    key<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">${!hosts[@]}</span><span class="token punctuation">;</span><span class="token keyword">do</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$2</span> -eq <span class="token variable">$t</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        key<span class="token operator">=</span><span class="token variable">$i</span>            <span class="token keyword">break</span>        <span class="token keyword">fi</span>        t<span class="token operator">=</span>$<span class="token punctuation">[</span>t+1<span class="token punctuation">]</span>    <span class="token keyword">done</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token variable">$key</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"主机名错误"</span>    <span class="token keyword">else</span>        login <span class="token variable">$key</span>    <span class="token keyword">fi</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"--help"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"Usage ssh.sh OPTION"</span>    <span class="token keyword">echo</span> <span class="token string">"ls        显示存储的远程主机"</span>    <span class="token keyword">echo</span> <span class="token string">"-n number 根据序号登录远程主机 "</span><span class="token keyword">else</span>    login <span class="token variable">$1</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ssh每次远程登录输入内容比较繁琐，可以自己简单配置远程主机登录授权&lt;br&gt;
    
    </summary>
    
      <category term="shell" scheme="http://jl.js.org/categories/shell/"/>
    
    
      <category term="ssh" scheme="http://jl.js.org/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>redis知识点</title>
    <link href="http://jl.js.org/2018/10/06/reidis%E2%95%93%C2%AC%E2%95%A9%E2%95%A2%E2%95%A1%CF%80/"/>
    <id>http://jl.js.org/2018/10/06/reidis╓¬╩╢╡π/</id>
    <published>2018-10-05T16:00:00.000Z</published>
    <updated>2019-03-05T05:26:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>redis一些简单的知识点记录<br><a id="more"></a></p><h2 id="redis配置文件"><a href="#redis配置文件" class="headerlink" title="redis配置文件"></a>redis配置文件</h2><p><a href="https://redis.io/topics/config" target="_blank" rel="noopener">官方配置文档</a></p><pre class="line-numbers language-bash"><code class="language-bash">//启动server指定配置文件redis-server ./redis.conf//查看所有配置config get *//查看某一项配置config get <span class="token function">dir</span>//设置配置,并非素有配置都能动态设置,详细参考官方配置文档config <span class="token keyword">set</span> <span class="token function">dir</span> <span class="token punctuation">..</span>.//动态设置配置仅仅当前服务生效，如果要保存配置到配置文件,必须在启动server时候制定配置文件config rewrite<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><h3 id="密码授权"><a href="#密码授权" class="headerlink" title="密码授权"></a>密码授权</h3><pre class="line-numbers language-bash"><code class="language-bash">//设置密码config <span class="token keyword">set</span> requirepass password//授权auth password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="protected-mode"><a href="#protected-mode" class="headerlink" title="protected-mode"></a>protected-mode</h3><p>protected-mode是一种客户端连接保护措施,配置文件默认开启<code>protected-mode yes</code>,有以下两种条件者,仅127.0.0.1和::1能访问,其他客户端链接讲访问<code>error</code></p><ul><li>配置文件没有清楚的绑定能访问的客户端例如<code>bind 127.0.0.1</code></li><li>配置文件没有设置<code>requirepass</code></li></ul><p>关闭<code>protected-mode no</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;redis一些简单的知识点记录&lt;br&gt;
    
    </summary>
    
      <category term="others" scheme="http://jl.js.org/categories/others/"/>
    
    
  </entry>
  
  <entry>
    <title>golang tips</title>
    <link href="http://jl.js.org/2018/09/23/golang%20tips/"/>
    <id>http://jl.js.org/2018/09/23/golang tips/</id>
    <published>2018-09-22T16:00:00.000Z</published>
    <updated>2019-03-05T05:26:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>golang一些简单的知识点记录<br><a id="more"></a></p><h2 id="make与new"><a href="#make与new" class="headerlink" title="make与new"></a>make与new</h2><ul><li>new类型分配变量零值，返回指针</li><li>make 只用于smc  slice map chan 三种类型</li></ul><h2 id="int与int64转string"><a href="#int与int64转string" class="headerlink" title="int与int64转string"></a>int与int64转string</h2><p>w</p><pre><code>strconv.FormatInt(int64, 10) stringstrconv.Itoa(int) string</code></pre><h2 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h2><ul><li>类型转化,v.(type) 需要转换的类型<pre class="line-numbers language-golang"><code class="language-golang"> type data map[string]interface{}  var sub  = data{     "zhangsan":"张三",     "lisi":"李四", }   var parent data parent["sub"] = sub for k, v := range parent["data"].(data) {     fmt.Printf("%s,%s", k, v) }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类型断言</p><pre class="line-numbers language-golang"><code class="language-golang">  //单一类型断言,断言变量类型一定要是接口类型，因此讲此变量赋值给一个空接口变量  type emptyInterface interface{}//空接口  var v emptyInterface  v = variable  if _,ok := v.(string);ok{      printf("variable is type of string")  }else {      printf("variable is not type of string")  }  //多类型断言  switch i := v.(type) {      case "int32":      case "float64":  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="字符串转整形"><a href="#字符串转整形" class="headerlink" title="字符串转整形"></a>字符串转整形</h2><blockquote><p>strconv.ParseInt(s string, base int, bitSize int) int64 error</p></blockquote><ul><li>s 要转换的的字符串</li><li>base 字符串类型，可选0 8 10 16,　其中8、10、16 代表字符串进制如果为0将通过string前缀自行判断，如0代表８进制，0x１６进制</li><li>bitSize 整形的位数，8 16 32 64,如果整数大于位数能代表最大数字，如(“128”,10,8)将返回bitSize所能代表的最大数字127</li></ul><h2 id="生成范围内随机整数"><a href="#生成范围内随机整数" class="headerlink" title="生成范围内随机整数"></a>生成范围内随机整数</h2><pre class="line-numbers language-golang"><code class="language-golang">func randInt(start, end int) (i int) {    r := rand.New(rand.NewSource(time.Now().UnixNano()))    if start > end {        return end    }    i = r.Intn(end-start) + start    return}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取程序传入参数"><a href="#获取程序传入参数" class="headerlink" title="获取程序传入参数"></a>获取程序传入参数</h2><blockquote><p>func Int(name string, value int, usage string) *int </p></blockquote><blockquote><p>func String(name string, value string, usage string) *string </p></blockquote><pre class="line-numbers language-golang"><code class="language-golang">total := flag.Int("total", 100000, "how many log want to create")filePath := flag.String("filePath", "/home/jianglong/log/nginx/dig2", "log file path")flag.Parse()fmt.Println(*total, *filePath)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><h4 id="追加写入"><a href="#追加写入" class="headerlink" title="追加写入"></a>追加写入</h4><blockquote><p>func (f *File) Write(b []byte) (n int, err error)</p></blockquote><pre class="line-numbers language-golang"><code class="language-golang">file, err := os.OpenFile(*filePath, os.O_RDWR|os.O_APPEND|os.O_CREATE, 0644)if err != nil {    fmt.Println(err)}defer file.Close()logStr := "我是追加的方式写入的内容,如果不存在就创建文件"_,err := file.Write([]byte(logStr))if err != nil {    fmt.Println(err)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="覆盖文件"><a href="#覆盖文件" class="headerlink" title="覆盖文件"></a>覆盖文件</h4><blockquote><p>func WriteFile(filename string, data []byte, perm os.FileMode) error </p></blockquote><pre class="line-numbers language-golang"><code class="language-golang">err := ioutil.WriteFile(file_path,[]byte("我是覆盖写入的内容"),0644)if err != nil {    fmt.Println(err)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h2><pre class="line-numbers language-golang"><code class="language-golang">hasher := md5.New()hasher.Write([]byte("i am the content))md5str := hex.EncodeToString(hasher.Sum(nil))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="变长参数"><a href="#变长参数" class="headerlink" title="变长参数"></a>变长参数</h2><p><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN/blob/master/eBook/06.3.md" target="_blank" rel="noopener">内容参照</a></p><pre class="line-numbers language-golang"><code class="language-golang">package mainimport "fmt"func main() {    x := min(1, 3, 2, 0)    fmt.Printf("The minimum is: %d\n", x)    slice := []int{7,9,3,5,1}    x = min(slice...)    fmt.Printf("The minimum in the slice is: %d", x)}func min(s ...int) int {    if len(s)==0 {        return 0    }    min := s[0]    for _, v := range s {        if v < min {            min = v         }    }    return min}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="时间相相关"><a href="#时间相相关" class="headerlink" title="时间相相关"></a>时间相相关</h2><h3 id="格式化时间"><a href="#格式化时间" class="headerlink" title="格式化时间"></a>格式化时间</h3><pre class="line-numbers language-golang"><code class="language-golang">time.Now().Format("2006-01-02 15:04:05")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="时间转时间戳"><a href="#时间转时间戳" class="headerlink" title="时间转时间戳"></a>时间转时间戳</h3><pre class="line-numbers language-golang"><code class="language-golang">loc, _ := time.LoadLocation("Local")theTime, _ := time.ParseInLocation("2006-01-02 15:04:05", ts, loc)theTime.Unix()`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修剪字符串"><a href="#修剪字符串" class="headerlink" title="修剪字符串"></a>修剪字符串</h2><pre class="line-numbers language-golang"><code class="language-golang">strings.Trim("hello","h") stringstrings.TrimLeft("hello","h") stringstrings.TrimRight("hello","o") string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="ioreader"><a href="#io-Reader" class="headerlink" title="io.Reader"></a>io.Reader</h2><h3 id="多次ioutilreadall"><a href="#多次ioutil-ReadAll" class="headerlink" title="多次ioutil.ReadAll"></a>多次ioutil.ReadAll</h3><pre class="line-numbers language-golang"><code class="language-golang">if body, err := ioutil.ReadAll(io.Reader); err == nil {    twice := bytes.NewReader(body)    twiceBody, err := ioutil.ReadAll(twice)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ioreader-to-string-or-byte"><a href="#io-Reader-to-string-or-byte" class="headerlink" title="io.Reader to string or []byte"></a>io.Reader to string or []byte</h3><pre class="line-numbers language-golang"><code class="language-golang">bytes,err := ioutil.ReadAll(io.Reader)string(bytes)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="获取变量类型"><a href="#获取变量类型" class="headerlink" title="获取变量类型"></a>获取变量类型</h2><pre class="line-numbers language-golang"><code class="language-golang">import (    "reflect"    "fmt")func main(){    data := [...]int{1,2,3} //array    fmt.Println("%v",reflect.TypeOf(data).Kind())  //获取data的变量类型   array    fmt.Println("%v",reflect.TypeOf(data).Elem().Kind()) //获取underlying type   int }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取执行时间"><a href="#获取执行时间" class="headerlink" title="获取执行时间"></a>获取执行时间</h2><pre class="line-numbers language-golang"><code class="language-golang">import (    "time")func main() {    t := time.Now()    //do something    println(time.Since(t))}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程并发锁"><a href="#线程并发锁" class="headerlink" title="线程并发锁"></a>线程并发锁</h2><p>###　当全局变量被对个线程同时访问的时候可能会造成未知错误，如下例子,一共自增20次，但结果不一定是20</p><pre class="line-numbers language-golang"><code class="language-golang">func main(){    number := 0    for i:=0; i<=10; i++{="" go="" func(){="" number++="" }="" for="" j:="0;" j<="10;" j++{="" time.sleep(1e9*10)="" fmt.println(number)="" <span="" aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></=10;></code></pre><h3 id="加锁这样就能正常同时一个保证为20了"><a href="#加锁-这样就能正常同时一个保证为20了" class="headerlink" title="加锁,这样就能正常同时一个保证为20了"></a>加锁,这样就能正常同时一个保证为20了</h3><pre class="line-numbers language-golang"><code class="language-golang">import "sync"type lockNumber struct {    mu  sync.Mutex    val int}func main(){    number := new(lockNumber)    for i:=0; i<=10; i++{="" go="" func(){="" number.mu.lock()="" number++="" number.mu.unlock()="" }="" for="" j:="0;" j<="10;" j++{="" time.sleep(1e9*10)="" fmt.println(number)="" <span="" aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></=10;></code></pre><h2 id="设置日志文件"><a href="#设置日志文件" class="headerlink" title="设置日志文件"></a>设置日志文件</h2><pre class="line-numbers language-golang"><code class="language-golang">logFile, err := os.OpenFile(file, os.O_RDWR|os.O_CREATE|os.O_APPEND, 0766)loger := log.New(logFile, "前缀", log.Ldate|log.Ltime|log.Lshortfile)loger.SetFlags(log.Ldate | log.Ltime | log.Lshortfile)loger.Printf("第%d行 内容:%s", 11, "我是错误k")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="数据库链接查询"><a href="#数据库链接查询" class="headerlink" title="数据库链接查询"></a>数据库链接查询</h3><pre class="line-numbers language-golang"><code class="language-golang">defer rows.Close()columns, err := rows.Columns()Logger.Printf("查询字段为:%+v\n", columns)if err != nil {    return}scanArgs := make([]interface{}, len(columns))values := make([]interface{}, len(columns))for i := range values {    scanArgs[i] = &values[i]}record := make(map[string]interface{})records := make([]interface{}, 0)for rows.Next() {    if err := rows.Scan(scanArgs...); err == nil {        for i, col := range values {            record[columns[i]] = col        }        records = append(records, record)    } else {        Logger.Printf("err:%+v\n", err)    }}Logger.Printf("查询结果%+v:\n", records)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mysql非固定字段查询"><a href="#mysql非固定字段查询" class="headerlink" title="mysql非固定字段查询"></a>mysql非固定字段查询</h3><pre class="line-numbers language-golang"><code class="language-golang">package mainimport (    "database/sql"    "fmt"    _ "github.com/go-sql-driver/mysql")func main() {    conn, err := sql.Open("mysql", "root:psw@tcp(localhost:3306)/test?charset=utf8")    if err != nil {        fmt.Println("mysql connect error")        return    }    defer conn.Close()    rows, err := conn.Query("select * from user")    if err != nil {        fmt.Println("mysql query error", err.Error())    }    defer rows.Close()    columns, err := rows.Columns()    values := make([]sql.RawBytes, len(columns))    scans := make([]interface{}, len(columns))    for i := range values {        scans[i] = &values[i]    }    var result []map[string]string    for rows.Next() {        _ = rows.Scan(scans...)         each := make(map[string]string)        for i, col := range values {            each[columns[i]] = string(col)        }        result = append(result, each)    }    fmt.Println(result)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><h3 id="保存图片base64编码到本地文件"><a href="#保存图片base64编码到本地文件" class="headerlink" title="保存图片base64编码到本地文件"></a>保存图片base64编码到本地文件</h3><pre class="line-numbers language-golang"><code class="language-golang">func (h *H) WriteBase64ToFile(data, saveDir string) (filePath string, err error) {    //fileType    slashIndex := strings.Index(data, "/")    semicolonIndex := strings.Index(data, ";")    if slashIndex == -1 || semicolonIndex == -1 {        return "", errors.New("base64头格式错误")    }    fileType := str.Substr(data, slashIndex+1, semicolonIndex-slashIndex-1)    ML.Printf("base64文件类型为%s", fileType)    //保存文件    commonIndex := strings.Index(data, ",")    if commonIndex == -1 {        return "", errors.New("base64内容格式错误")    }    filePath = saveDir + "/" + strconv.FormatInt(time.Now().UnixNano(), 10) + "." + fileType    dec := base64.NewDecoder(base64.StdEncoding, strings.NewReader(data[commonIndex+1:]))    bytes, _ := ioutil.ReadAll(dec)    err = ioutil.WriteFile(filePath, bytes, 0644)    if err == nil {        return filePath, nil    } else {        return "", err    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><h3 id="send-a-http-request"><a href="#send-a-http-request" class="headerlink" title="send a http request"></a>send a http request</h3><pre class="line-numbers language-golang"><code class="language-golang">client := http.Client{}request,err := http.NewRequest(method,url,body(io.Reader))#set headerrequest.Header.Add("Content-Type":"application/json")#sendresponse,err := client.Do(request)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;golang一些简单的知识点记录&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://jl.js.org/categories/golang/"/>
    
    
      <category term="tips" scheme="http://jl.js.org/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>golang web middleware</title>
    <link href="http://jl.js.org/2018/09/18/golang%20%20web%20middleware/"/>
    <id>http://jl.js.org/2018/09/18/golang  web middleware/</id>
    <published>2018-09-17T16:00:00.000Z</published>
    <updated>2019-03-05T05:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>golang http中间件知识<br><a id="more"></a></p><hr><p>个人理解golang中http中间件为一个请求链中的一环,用来对真正的请求处理进行一些预处理、如权限验证,参数处理或者辅助<br>进行日志记录等操作,与真正的业务处理分离<br>实现一个demo中间件，验证请求来源ip,让某个ip无法访问网站</p><hr><h2 id="golang-http包接口分析"><a href="#golang-http包接口分析" class="headerlink" title="golang http包接口分析"></a>golang http包接口分析</h2><p><strong>http包代码</strong> </p><pre class="line-numbers language-golang"><code class="language-golang">package http type Handler Interface{   ServeHTTP(ResponseWriter, *Request)}type HandlerFunc func(ResponseWriter, *Request)func (f HandlerFunc) ServeHTTP(w ResponseWriter,r *Request) {    f(w, r)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong> </p><ul><li>以上为http库内置的http处理接口,其中Handler接口有一个ServeHttp接口函数，在处理请求的时候，会调用此函数<br>对接口进行处理。</li><li>任何实现了次接口的类型都可以作为http.ListenAndServe(string, Handler)中的第二个Handler类型参数进行<br>请求处理。</li><li>以上代码中HandlerFunc 就是包内置的默认的实现Handler接口的一种方式。也可以自定义。</li></ul><hr><h2 id="自定义实现handler不使用http包内的handlerfunc"><a href="#自定义实现Handler-不使用http包内的HandlerFunc" class="headerlink" title="自定义实现Handler,不使用http包内的HandlerFunc"></a>自定义实现Handler,不使用http包内的HandlerFunc</h2><p><strong>代码</strong></p><pre class="line-numbers language-golang"><code class="language-golang">type MyHandler struct {}func (mh *MyHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {    //do something    // return result    w.String(200, "hello world")}func main() {    http.ListenAndServe(":1234",&MyHandler{})}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong></p><ul><li>以上MyHandler实现了HTTP包中Handler接口(ServeHTTP方法)，定义了自己处理接口逻辑</li></ul><hr><h3 id="使用函数型"><a href="#使用函数型" class="headerlink" title="使用函数型"></a>使用函数型</h3><p><strong>代码</strong></p><pre class="line-numbers language-golang"><code class="language-golang">//handler Funcfunc MyHandlerFunc(h http.HandlerFunc) http.HandlerFunc {    return func(rw http.ResponseWriter, req *http.Request) {    //do something for example print verse        rw.Write([]byte("昨夜星辰昨夜风"))        h(rw, req)    }}func main() {    err := http.ListenAndServe(":12345", MyHandlerFunc(func(rw http.ResponseWriter, req *http.Request) {             w.Write([]byte("hell world 123456"))    }))    if err != nil{        log.Fatal(err)    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong></p><ul><li>以上没有实现自己的Handler,而是实现了与http.handlerFuc相同签名的函数，相当于使用了http包内实现的HandlerFunc<br>,http包会调用Handler的ServeHTTP方法，然后在ServeHTTP中调用HandlerFuc</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>http.ListenAndServe(“”,Handler),中的Handler可以传两类，第一类是实现http.Handler的ServeHTTP方法的任意类型，<br>第二类是与http.HandlerFuc具有相同签名的函数，以为http.HandlerFuc实现了http.Handler的ServeHTTP,不需要我们再去实现。</li><li>而所谓的http中间件,就是重新实现实现Handler接口或者定义将真正的业务处理部分函数HandlerFunc作为参数传递给中间件函数壳<br>在壳内进行附加操作后，如果满足需求或者其他，然后再调用处理部分函数。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;golang http中间件知识&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://jl.js.org/categories/golang/"/>
    
    
      <category term="middleware" scheme="http://jl.js.org/tags/middleware/"/>
    
  </entry>
  
  <entry>
    <title>函数型接口</title>
    <link href="http://jl.js.org/2018/09/17/%E2%95%91%C2%BB%E2%95%A9%C2%B2%E2%95%A8%E2%95%90%E2%95%9C%E2%95%99%E2%94%90%E2%94%8C/"/>
    <id>http://jl.js.org/2018/09/17/║»╩²╨═╜╙┐┌/</id>
    <published>2018-09-16T16:00:00.000Z</published>
    <updated>2019-03-05T05:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>golang中只要类型实现了接口包含的所有抽象方法。那么该类型便属于该接口的实现类</p><blockquote><p>函数型接口： 某个函数类型作为接收者实现了接口方法</p></blockquote><p>个人理解，函数形接口主要是类似于面向接口编程中，调用实现接口的方法而完成多态，但又不像传统面向接口编程那样显得臃肿，<br>需要先声明类继承接口然后在类中实现方法，golang中任何与接口方法签名相同的函数都可以作为被调用者。</p><hr><p><strong>demo为计算一个二位数组，每个子项数组的和，然后返回结果数组,例如[[1,2,3],[4,5,6],[7,8,9]] 返回[6,15,24]</strong></p><hr><h2 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h2><p><strong>首先实现传统的面向接口编程：</strong></p><ul><li>声明接口</li><li>声明一个类型，实现接口函数</li></ul><pre class="line-numbers language-golang"><code class="language-golang">// 计算接口type Sum interface {    Add(m map[int][]int) map[int]int}//声明类型用来实现接口type R stringfunc (r R) Add(m map[int][]int) (n map[int]int){    n = make(map[int]int)    if m != nil && len(m) > 0 {        for i,v := range m {            if v == nil || len(v) == 0 {                n[i] = 0            } else {                n[i] = 0                for _,v1 := range v {                    n[i] = n[i] + v1                }            }        }    }    return}// 调用func Call(m map[int][]int, sum Sum) map[int]int{    return sum.Add(m)}func main() {    m := make(map[int][]int)    m[0] = []int{1,2,3}    m[1] = []int{4,5,6}    m[2] = []int{7,8,9}    re := Call(m, R("demo"))    fmt.Printf("%v", re)}// 结果map[2:24 0:6 1:15]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上为典型的面向接口编程，Call函数依赖抽象接口类型Sum,R实现接口，作为参数传递给Call</p><p>但是这里R类型似乎是多余的，因为golang并没有所谓class关键字，必须要又一种类型来作为接受者来实现对应Sum接口的方法<br>而且类的实现有一些多余</p><h2 id="函数型接口"><a href="#函数型接口" class="headerlink" title="函数型接口"></a>函数型接口</h2><p><strong>声明函数类型</strong></p><pre class="line-numbers language-golang"><code class="language-golang">// 计算接口type Sum interface {    Add(m map[int][]int) map[int]int}// 声明函数type Handle func(map[int][]int) map[int]intfunc (h Handle) Add(m map[int][]int) map[int]int {    return h(m)}// 调用不变func Call(m map[int][]int, sum Sum) map[int]int{    return sum.Add(m)}// 我的方法进行处理func myHandle(m map[int][]int) map[int]int{    n := make(map[int]int)    if m != nil && len(m) > 0 {        for i,v := range m {            if v == nil || len(v) == 0 {                n[i] = 0            } else {                n[i] = 0                for _,v1 := range v {                    n[i] = n[i] + v1                }            }        }    }    return n}func main() {    m := make(map[int][]int)    m[0] = []int{1,2,3}    m[1] = []int{4,5,6}    m[2] = []int{7,8,9}    re := Call(m, Handle(myHandle))//讲myHandle转换为Handle类型，赋值给Sum类型变量    fmt.Printf("%v", re)}//结果map[0:6 1:15 2:24]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong></p><ul><li>以上没有多余的类型R,而且只要实现任意与Handle签名相同的函数,都可以将其转换为Handle类型，而Handle又实现了<br>接口Sum，</li><li>整个流程 Call() =&gt; Sum.Add() =&gt; myHandle()</li><li>我们就只需要在调用Call实现Handle签名函数，与Sum接口解耦</li></ul><h3 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h3><pre class="line-numbers language-golang"><code class="language-golang">type SumIn map[int][]inttype SumOut map[int]inttype Sum interface {    Add(SumIn) SumOut}//声明函数type Handle func(SumIn) SumOutfunc (h Handle) Add(m SumIn) SumOut {    return h(m)}// 调用func Call(m SumIn, sum Sum) SumOut {    return sum.Add(m)}//内部进行类型转换func CallFunc(m SumIn,f func(SumIn) SumOut) SumOut{    return Call(m,Handle(f)) }// 我的方法进行处理func myHandle(m SumIn) SumOut {    n := make(SumOut)    if m != nil && len(m) > 0 {        for i,v := range m {            if v == nil || len(v) == 0 {                n[i] = 0            } else {                n[i] = 0                for _,v1 := range v {                    n[i] = n[i] + v1                }            }        }    }    return n}func main() {    m := make(SumIn)    m[0] = []int{1,2,3}    m[1] = []int{4,5,6}    m[2] = []int{7,8,9}    re := CallFunc(m, myHandle)//内部进行转换    fmt.Printf("%v", re)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong></p><ul><li>主要对Call函数进行了封装将Handle签名相同的函数转换，换到了内部，不需要在调用进行转换和定义了类型别名</li><li>这种函数型接口相当于对接口的功能实现进行了热拔插，适用于只有一个方法的接口</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;golang中只要类型实现了接口包含的所有抽象方法。那么该类型便属于该接口的实现类&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;函数型接口： 某个函数类型作为接收者实现了接口方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;个人理解，函数形接口主要是类似于面向接口编程中，调用实现
      
    
    </summary>
    
      <category term="golang" scheme="http://jl.js.org/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>通过ngrok自己动手搭建内网穿透服务</title>
    <link href="http://jl.js.org/2018/04/16/linux%20ngrok%20%E2%94%A4%CE%B5%E2%95%9C%C2%BF/"/>
    <id>http://jl.js.org/2018/04/16/linux ngrok ┤ε╜¿/</id>
    <published>2018-04-15T16:00:00.000Z</published>
    <updated>2019-03-05T05:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>这几天一直在折腾ngrok，记录下整个过程</p><p>最先怕影响服务器，是在docker里进行安装的，实例跑的是ubuntu16.04</p><p><strong>大概流程图</strong></p><img src="/2018/04/16/linux%20ngrok%20┤ε╜¿/flow.png"><ul><li>访问服务器<code>(80|443)</code>端口 ，apache按规则对需要进行代理的请求发送给docker</li><li>docker是与服务<code>8080</code>端口进行了映射，而docker内的ngrok服务监听了<code>8080</code>端口</li><li>ngrok服务设置与ngrok客户端建立隧道的端口是<code>4443</code></li><li>ngrok将apache代理的请求按规则转发给ngrok客户端，客户端再与本地端口进行转发关联</li><li>最终将处理结果依次返回</li></ul><p><strong>用docker出现的问题</strong></p><p>由于ngrok需要根据域名的不同对代理进行转发，配置了hosts文件，例如<code>wx.ngrok.com</code> 到 <code>0.0.0.0:8080</code><br>。docker内开启ngrok服务后，客户端成功进行了连接，但当进行url请求的时候始终无法从ngrok服务端转发到ngrok客户端，<br>最先是用<code>80</code>端口报不是tsl/ssl握手，最后换做<code>443</code>报什么read message EOF之类，研究很久最终放弃</p><p><strong>最终环境</strong></p><p><code>ubuntu14.04 golang 1.7</code></p><ol><li>最先利用ubuntu <code>apt install golang</code> 安装的是1.5的go环境,报了一个错，经过搜索是golang版本问题，最后通过下载包的方式安装了<code>1.6</code>解决</li><li>按照教程进行了一系列操作<a href="https://blog.csdn.net/sdfgsdfg1444/article/details/72793313" target="_blank" rel="noopener">参考教程</a>,编译linux,windows客户端成功</li><li>当编译Mac客户端后运行报错什么什么runtime之类的，macos 10.13,又折腾半天不行，然后怀疑go语言版本低了，然后又下载了<code>1.7</code>进行了解压放在/usr/local目录下</li><li>配置go的环境变量GOROOT后，进行客户端编译，报错<code>C source files not allowed when not using cgo or SWIG</code>又是一顿搜索</li><li>最后解决方式为把<code>go1.7</code>解压到<code>/usr/lib</code>目录下配置好环境变量，编译成功，mac下载客户端运行成功 </li></ol><p><strong>没用docker的流程大概是这样</strong></p><p>由于是用apache规矩规则进行代理，只有一个公网域名的情况下，通过根目录子目录不同进行不同代理例如<code>wx.winneroad.cn/jl</code>代理到我的服务器,但是这样<br>会引发一些问题，例如再用tp5进行<code>url函数</code>进行url生成的时候<code>/</code>会直接把域名下的<code>jl</code>顶掉，最好再解析一个域名到原服务器</p><p><strong>一些配置截图</strong></p><p><strong>apache</strong></p><img src="/2018/04/16/linux%20ngrok%20┤ε╜¿/apache.png"><p><strong>ngrokd</strong></p><img src="/2018/04/16/linux%20ngrok%20┤ε╜¿/ngrokd.png"><p><strong>服务器hosts</strong></p><img src="/2018/04/16/linux%20ngrok%20┤ε╜¿/server_hosts.png"><p><strong>ngrok客户端连接</strong></p><img src="/2018/04/16/linux%20ngrok%20┤ε╜¿/ngrok.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这几天一直在折腾ngrok，记录下整个过程&lt;/p&gt;
&lt;p&gt;最先怕影响服务器，是在docker里进行安装的，实例跑的是ubuntu16.04&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大概流程图&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;/2018/04/16/linux%20ngr
      
    
    </summary>
    
      <category term="others" scheme="http://jl.js.org/categories/others/"/>
    
    
      <category term="ngrok" scheme="http://jl.js.org/tags/ngrok/"/>
    
  </entry>
  
  <entry>
    <title>2018学习计划</title>
    <link href="http://jl.js.org/2018/03/08/2018%E2%95%A4%C2%BA%E2%95%A7%E2%96%91%E2%95%9D%E2%95%9E%E2%95%97%C2%AB/"/>
    <id>http://jl.js.org/2018/03/08/2018╤º╧░╝╞╗«/</id>
    <published>2018-03-07T16:00:00.000Z</published>
    <updated>2019-03-05T05:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>2017工作一年多的时间，技术上有很多进步，对编程的思想上也有很多改变，学了一些东西，但是缺少学习计划，学得很杂很大一部分是根据兴趣学的，但是不够系统和扎实，所有制定一下2018的学习计划吧,毕竟purpose很重要</p><p><strong>准备的学习计划</strong></p><p>2018-02-24</p><ul><li>shell</li><li>python</li><li>canvas</li><li>design pattern</li><li>docker</li><li>提升对英文文档的阅读能力</li></ul><p>在2017中以上的各种技术都有接触但是接触不够多，对英文阅读能力的提升也是急需提升的，好在早就已经养成了不惧怕英文的习惯,每天对学习内容进行简单描述</p><hr><p>2018-03-08</p><p>最近由于装了黑苹果，一直在整理开发环境，最开初的时候是打算装虚拟机，但系统资源开销太大。后来准备用docker看文档折腾了几天构建了php5.6,php7.x和nginx镜像，以及一个mysql镜像，<br>利用挂载卷的方式进行数据永久化，但是docker在mac资源还是占用较多，最后用的mamp</p><p><strong>dockerFile:</strong></p><p>dockerFile分为4部分，基础镜像、维护者信息、镜像操作指令、容器启动命令</p><pre><code>#基础镜像From baseImage#维护人信息MAINTAINER name email#镜像操作执行令RUN instruct#容器启动指令CMD instruct   </code></pre><p><strong>docker打标签:</strong></p><pre><code>docker tag image username/repository:tagdocker push username/repository:tag</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2017工作一年多的时间，技术上有很多进步，对编程的思想上也有很多改变，学了一些东西，但是缺少学习计划，学得很杂很大一部分是根据兴趣学的，但是不够系统和扎实，所有制定一下2018的学习计划吧,毕竟purpose很重要&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;准备的学习计划&lt;/stro
      
    
    </summary>
    
      <category term="others" scheme="http://jl.js.org/categories/others/"/>
    
    
      <category term="plan" scheme="http://jl.js.org/tags/plan/"/>
    
  </entry>
  
  <entry>
    <title>github 利用gpg对提交进行签名验证</title>
    <link href="http://jl.js.org/2018/03/05/github%20gpg/"/>
    <id>http://jl.js.org/2018/03/05/github gpg/</id>
    <published>2018-03-04T16:00:00.000Z</published>
    <updated>2019-03-05T05:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="gpggun-privacy-guard"><a href="#gpg-gun-privacy-guard" class="headerlink" title="gpg(gun privacy guard)"></a>gpg(gun privacy guard)</h4><p><strong>大概过程</strong></p><p>利用gpg生成钥匙对，用私钥对文件签名，github用公钥进行验证</p><hr><h4 id="具体步骤仅在linux或者mac"><a href="#具体步骤-仅在Linux或者mac" class="headerlink" title="具体步骤(仅在Linux或者mac)"></a>具体步骤(仅在Linux或者mac)</h4><p><strong>1.生成钥匙对</strong></p><p><code>gpg --gen-key</code></p><p><strong>2.导出公钥</strong></p><p><code>gpg -a --export ID &gt; pub.asc</code></p><p><strong>3.github配置gpg keys</strong></p><p>将步骤2中的pub.asc的内容复制到制定<br>sfd<br>asdfsd<br>sdfsdf<br><img src="/2018/03/05/github%20gpg/gpgKeys.png"></p><p><strong>4.配置git</strong></p><p><code>git config --global -e</code></p><img src="/2018/03/05/github%20gpg/gitGpgConf.png"><p>在仓库中 <code>gpg config commit.gpgsign = false</code></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li>gpg 查看keyid  <code>gpg -k --keyid-format short | long</code></li><li>gpg 导出私钥  <code>gpg -a --export-secret-key key-id &gt; secret.asc</code></li><li>gpg 删除钥匙对  <code>gpg --delete-secret-keys keys-id</code>  &amp;&amp;  <code>gpg --delete-keys keys-id</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;gpggun-privacy-guard&quot;&gt;&lt;a href=&quot;#gpg-gun-privacy-guard&quot; class=&quot;headerlink&quot; title=&quot;gpg(gun privacy guard)&quot;&gt;&lt;/a&gt;gpg(gun privacy guard)&lt;
      
    
    </summary>
    
      <category term="git" scheme="http://jl.js.org/categories/git/"/>
    
    
      <category term="github" scheme="http://jl.js.org/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>画图分析的重要性</title>
    <link href="http://jl.js.org/2018/02/24/%E2%95%97%C2%A1%E2%95%90%E2%95%9D%E2%95%96%E2%95%93%E2%95%AC%C3%B7/"/>
    <id>http://jl.js.org/2018/02/24/╗¡═╝╖╓╬÷/</id>
    <published>2018-02-23T16:00:00.000Z</published>
    <updated>2019-03-05T05:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>如题下:</p><p><strong>一群猴子排成一圈，按1,2,…,n依次编号。然后从第1只开始数，数到第m只,把它踢出圈，从它后面再开始数， 再数到第m只，在把它踢出去…，如此不停的进行下去， 直到最后只剩下一只猴子为止，那只猴子就叫做大王。要求输入m、n, 输出最后那个大王的编号</strong></p><p>在大学c++课程设计中做过类似的题，然后贫着不清晰的感觉用php进行了编程，结果是3个小时写出来是错误的，中间不停修修改改，很痛苦，总是脑袋里理不清然后又急于写代码妄想在调试过程中侥幸得出答案。</p><p>昨天回家的路上还是想了想应该先画图，先理清逻辑，然后今天早上画图花了半个小时，编程5分钟不到就修改成功了,图如下:</p><img src="/2018/02/24/╗¡═╝╖╓╬÷/monkey.png"><p>代码如下:</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Monkey</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$next</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//下一个指针</span>    <span class="token keyword">private</span> <span class="token variable">$number</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//编号</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">next</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setNext</span><span class="token punctuation">(</span><span class="token variable">$next</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">next</span> <span class="token operator">=</span> <span class="token variable">$next</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//原始编号</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">number</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setNum</span><span class="token punctuation">(</span><span class="token variable">$number</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">number</span> <span class="token operator">=</span> <span class="token variable">$number</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用类</span><span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token variable">$head</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//头节点</span>     <span class="token keyword">private</span> <span class="token variable">$m</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//猴子数量</span>     <span class="token keyword">private</span> <span class="token variable">$n</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//踢号</span>     <span class="token comment" spellcheck="true">/**      * Client constructor.      * @param $m int 猴子个数      * @param $n int 提出的数字      */</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">,</span> <span class="token variable">$n</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//初始化</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">n</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//初始化头节点</span>         <span class="token variable">$head</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Monkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$head</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setNum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">head</span> <span class="token operator">=</span> <span class="token variable">$head</span><span class="token punctuation">;</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">head</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token keyword">Null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//添加链表</span>         <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m</span><span class="token punctuation">;</span>         <span class="token variable">$current</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">head</span><span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$count</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token variable">$monkey</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Monkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token variable">$monkey</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token keyword">Null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//设置编号</span>             <span class="token variable">$newNum</span> <span class="token operator">=</span> <span class="token variable">$current</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>             <span class="token variable">$monkey</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setNum</span><span class="token punctuation">(</span><span class="token variable">$newNum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token variable">$current</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token variable">$monkey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token variable">$current</span> <span class="token operator">=</span> <span class="token variable">$current</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token variable">$count</span><span class="token operator">--</span><span class="token punctuation">;</span>         <span class="token keyword">endwhile</span><span class="token punctuation">;</span>         <span class="token variable">$current</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">head</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//便利节点</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">traverseNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">head</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//echo $tmp->getNum();</span>         <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token variable">$tmp</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true">//echo $tmp->getNum();</span>             <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token variable">$tmp</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">endwhile</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//进行剔除</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//头和当前指针</span>         <span class="token variable">$fronted</span> <span class="token operator">=</span> <span class="token variable">$current</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">head</span><span class="token punctuation">;</span>         <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token variable">$monkey_count</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m</span><span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$monkey_count</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$count</span> <span class="token operator">===</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">n</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                 <span class="token variable">$fronted</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token variable">$current</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token variable">$current</span> <span class="token operator">=</span> <span class="token variable">$current</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                 <span class="token variable">$monkey_count</span> <span class="token operator">--</span><span class="token punctuation">;</span>             <span class="token keyword">else</span><span class="token punctuation">:</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$monkey_count</span> <span class="token operator">!==</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                     <span class="token variable">$fronted</span> <span class="token operator">=</span> <span class="token variable">$current</span><span class="token punctuation">;</span>                 <span class="token keyword">endif</span><span class="token punctuation">;</span>                 <span class="token variable">$current</span> <span class="token operator">=</span> <span class="token variable">$current</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token variable">$count</span> <span class="token operator">++</span><span class="token punctuation">;</span>             <span class="token keyword">endif</span><span class="token punctuation">;</span>         <span class="token keyword">endwhile</span><span class="token punctuation">;</span>         <span class="token keyword">echo</span> <span class="token variable">$current</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token variable">$o_instance</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//$o_instance->traverseNode();</span> <span class="token variable">$o_instance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>通过对例子进行流程图分析的方式，即使脑子是混乱的但图是清晰的，通过分析图来分析逻辑的正确性，通过图来进行编码就变得很容易了，所有遇到脑子理不清的问题还是应该先画图,画图虽然花费一定时间，但相比在脑子里理不清的时候，其所带来的直观的逻辑展示往往会帮我们在整个编程节省大量的时间</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如题下:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一群猴子排成一圈，按1,2,…,n依次编号。然后从第1只开始数，数到第m只,把它踢出圈，从它后面再开始数， 再数到第m只，在把它踢出去…，如此不停的进行下去， 直到最后只剩下一只猴子为止，那只猴子就叫做大王。要求输入m、n, 输出最后
      
    
    </summary>
    
      <category term="php" scheme="http://jl.js.org/categories/php/"/>
    
    
      <category term="think" scheme="http://jl.js.org/tags/think/"/>
    
  </entry>
  
  <entry>
    <title>linux scws中文分词扩展安装</title>
    <link href="http://jl.js.org/2018/02/08/php%E2%95%93%E2%95%A8%E2%95%AC%E2%94%80%E2%95%96%E2%95%93%E2%94%A4%E2%95%A9/"/>
    <id>http://jl.js.org/2018/02/08/php╓╨╬─╖╓┤╩/</id>
    <published>2018-02-07T16:00:00.000Z</published>
    <updated>2019-03-05T05:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>SCWS 是 Simple Chinese Word Segmentation 的首字母缩写（即：简易中文分词系统）。</p></blockquote><p>这是一套基于词频词典的机械式中文分词引擎，它能将一整段的中文文本基本正确地切分成词。 词是中文的最小语素单位，但在书写时并不像英语会在词之间用空格分开， 所以如何准确并快速分词一直是中文分词的攻关难点。</p><p><strong>安装环境ubuntu16.04</strong></p><hr><h4 id="安装scws-123"><a href="#安装scws-1-2-3" class="headerlink" title="安装scws-1.2.3"></a>安装scws-1.2.3</h4><ul><li><code>wget -q -O - http://www.xunsearch.com/scws/down/scws-1.2.3.tar.bz2 | tar xjf -</code></li><li><code>cd scws-1.2.3</code></li><li><code>./configure --prefix=/usr/local/scws</code></li><li><code>make &amp;&amp; sudo make install</code></li><li><code>php -m | grep scws</code></li></ul><hr><h4 id="安装php扩展"><a href="#安装php扩展" class="headerlink" title="安装php扩展"></a>安装php扩展</h4><p><strong>检测phpize</strong></p><ul><li><code>which phpize &amp;&amp; sudo apt install php-dev</code></li><li><code>cd phpext &amp;&amp; phpize &amp;&amp; ./configure --with-scws=/usr/local &amp;&amp; make &amp;&amp; sudo make install</code></li><li>在php.ini添加扩展即可(extension = EXTENSION_PATH)</li></ul><p><a href="http://www.xunsearch.com/scws/" target="_blank" rel="noopener">scws官方网站</a></p><p><a href="https://www.jianshu.com/p/6bee26eed66c" target="_blank" rel="noopener">更多教程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;SCWS 是 Simple Chinese Word Segmentation 的首字母缩写（即：简易中文分词系统）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是一套基于词频词典的机械式中文分词引擎，它能将一整段的中文文本基本正确地切分成词。 
      
    
    </summary>
    
      <category term="php" scheme="http://jl.js.org/categories/php/"/>
    
    
      <category term="php" scheme="http://jl.js.org/tags/php/"/>
    
  </entry>
  
</feed>
